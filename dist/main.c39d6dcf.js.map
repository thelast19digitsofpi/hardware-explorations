{"version":3,"sources":["Exploration.ts","InputBit.ts","OutputBit.ts","Adder.ts","Wire.ts","Gates.ts","Display.ts","AdderExploration.ts","Text.ts","BinaryExploration.ts","ChoiceGate.ts","ChoiceExploration.ts","RegisterBit.ts","Subtractor.ts","Clock.ts","DividerExploration.ts","FullAdderGates.ts","GateExploration.ts","HalfAdderCheat.ts","MultiplierExploration.ts","main.ts"],"names":[],"mappings":";;AoBIA;;AACA;;AACA;AjBNA,AIEA,AEAA,AEGA,ADLA,AIAA,ARAA,AS6BA,Af7BA,AgBIA,ACAA,AZJA,AaIA,AjBJA,AkBEA,AjBFA,AUAA,ACAA,ALAA,AJAA;ADKA,AOJA,AIAA,ARAA,ANAA,ACAA,ACAA,AUAA,ACIA,ALJA,AJKA,AgBEA,IjBHA,AUAA,KVAA,KUAA;AVAA,AIFA,AEAA,AEGA,ADJA,AIAA,ARAA,AS4BA,Af5BA,AgBGA,ACAA,ACAA,AjBAA,AkBFA,AjBGA,AUJA,ACGA,ALHA,AJKA,IHFA,ACCA,AECA,IAAA,IHFA,CCCA;ACDA,AOFA,AIIA,ARAA,ANDA,ACDA,ACCA,AUHA,ACEA,ALKA,AJHA,AgBEA,INFA,ARAA,ANDA,AQIA,IAAA,GFHA,CHFA,AUAA,ECEA,CdDA;AGQI,AIVJ,AEGA,AEAA,ADCA,AIDA,ARAA,ASwBA,AfzBA,AgBAA,ACAA,ACAA,AjBDA,AkBDA,AjBEA,AUEA,ACMI,ALJJ,AJHA,IMCA,AEAA,QXHA,ACCA,AECA,EMCA,CEAA;ATOI,AOPJ,AIDA,ARAA,ANDA,ACQI,ACCA,AUPJ,ACOI,ALLJ,AJOI,AgBPJ,WjBKI,AFDA,ACCA,AWAA,ATEA,CUVJ,ARAA,ANDA,AQIA,GJOI,CDFA,ACGI,CDHQ,CAAZ,ACEA,CHHA,CECuB,AFDX,ACCZ,AEII,CDJJ,AFDA,ACCY,AWAZ,CXAA,AWAY,CVAsB,AFDX,AYCvB,CZDA,ACCuB,CAAvB,AWAuB,CZDW,AYClC,CVAA,ADAkC,CWAA,ATElC,CDFgD,CCK5C,CHNJ,ACCA,CWAA,CZD0D,ACCP,CCAnD,AUAgD,EVAyB,CFDzE,EAA2E,AYC3E,ATEA,ESFyE,ATMrE,CDNJ,EAAiG,GUAjG,CTEA,CSFiG,CTMpE;ADNmB,AIVpD,AEGA,AEAA,ADAA,AIQI,AREA,AScJ,AfTI,AgBfJ,ACDA,ACAA,AjBOsC,AkBTtC,AjBUsC,AUPtC,ACOoD,ALShD,AJJI,QDL4C,AFDd,ACCA,AWAc,ATK5C,GJGJ,AQCA,CEhBJ,AROsC,AUPtC,CTOoD,AFDd,AYCc,ELShD,CAAY,CNTsB,AMSlC,AJJI,CDL4C,AFDd,AYCc,CLSzB,CAAvB,ERDA,AERkC,AMSA,AJJ9B,CDL4C,AHQpC,ACTsB,ACCA,AWAc,CVAA,AFDd,AYCc,CXAd,CCAc,AFDd,AYCc,ALShD,CJJI,CII4C,AJJ5C,CJGJ,CIHI,CJGmC,CQCvC,EAA+E,ERD/E,EAA4D,GQC5D,EAAwG,CRDxG,EAAgF;AGRhC,AOEhD,AIAA,AREA,ANIuC,ACTL,ACCA,AUElC,ACFgD,ALS+B,AJJ3E,AgBTR,MjBIoD,AFDd,ACCA,AWAc,ATK5C,EJGmC,AQCwC,ENT7C,CCAc,AWEhD,AbHkC,AYCc,EbQT,AERL,CCA8B,AFD9B,AYC8B,CXA9B,AMS6C,AJJ3E,GDLgE,AHQ7B,AaR6B,ATKhE,CHN8B,COU6C,AJJ3E,CDLiE,AWErE,ADFqE,CCEzD,CXFoC,AWEhD,AdMuC,AaRS,CbQT,CcNhB,ANOwD,CMP/E,AdMuC,AQCwC,EMP7C,ANO6C,IMP/E,EAAgD,KAAhD,EAAqE,MAArE,EAAwF;AXFjB,AIT3E,AIGA,ADSI,AIDgD,ARGhD,ASaJ,AfV2C,AgBd3C,ACDA,ACAA,AjBM4D,AkBR5D,AjBSuD,AUGnD,ACHuE,ALSQ,AJJnB,MJGrB,AQCwC,EMP/B,GJChD,AVKuC,AYLvC,EEDgD,ANO+B,CRDxC,EQCwC,CRDxC,CcNS,ANO+B,GEN/E,CAAY,AEAZ,CFAA,AIDgD,AFCpC,CEDoC,AFChD,CFAuB,CAAvB,AIDgD,AFCzB,CAAvB,CFAkC,CEAA,GFAlC,CEAA,CFAmD,CEAA;AFAjB,AIDc,ARIhD,ANE0D,AYLxB,AJMsE,AYZ5G,MNKoD,EJCd,AEAA,GEDc,ARIhD,CIHkC,AEAA,EEDc,GJCd,AIDc,AFCd,CNGlC,CAAY,CAAZ,EIHkC,AJGX,AMHW,CFAA,AJGlC,AMHkC,EFAA,AJGA,AMHA,UNGlC,EAA2D,MAA3D,EAAoF,IAApF,EAAqG;AHN5B,AIR7E,AEPA,AEUA,ADQsC,AIDiC,ARIR,ASa/D,ACxBA,AEDA,AjBK8D,AkBP9D,AjBSQ,AUE8B,ACHuC,ATMrE,MMH8B,AEAA,ETHuC,AGMd,ALPD,AYCe,ATMrE,CFLK,CQEyB,AEAA,EXJwB,CSIxB,AEAA,CTHuC,AGMd,AONc,CHGvC,AEAA,ARG9B,EHPsD,ACEtD,ECDqE,AGMd,AONc,CXCrD,AEKhB,EHPsD,CAAA,CECe,AGMd,AONc,CVAA,AGMd,ALPD,AYCe,ATMrE,CAAA,CDNqE,AGMd,AONc,CTMrE;ADNqE,AOGtB,AJGQ,ANEC,ACTF,ACEpC,AUE6B,ACHsB,ALJzE,AJUI,MDNqE,AGMd,ALPD,ACEpC,AWDmD,ATMrE,CFLmB,CFOqC,CEPnC,AMLzB,CPG0D,ACEtC,ECDqD,AGMd,AONc,CZDf,AGOtD,CJEwD,AQZ5D,CLI0F,AGM/B,ALPD,AYCgC,CTMtF,CIVI,CJUJ,CJEwD,CGRmC,AGMpC,AONoC,GVAC,AUAA,CVAvB,AHQb,AaRa,CbQb,EAAA;AGRqC,AIPrG,AOSyE,ARIa,ASctF,AfZgE,AgBZhE,ACXA,ACUA,AjBI+E,AkBN/E,AjBQgC,AWDqE,ALJxF,AJUoB,MJE+B,AEPhC,AMLnB,CNKoB,CYCwC,CZDtC,CMLlB,ERY+C,AQZ7C,EMMsD,CdMT,GAAA,CcNS,KAAA,CAAA,EAAA;AJEjE,AIFiE,AdMW,AiBtBpF,AfewB,AUGhB,AJRI,AYRZ,KlBaQ,AMLJ,CMMqE,GJE5D,AEAA,GEF4D,GAAA,EJEjE,AIFiE,AFEjE,GFAgB,AEAA;ATHhB,AQhBR,ADoBY,AIHgF,ARIJ,ASexF,AElCA,AhBaQ,AkBNR,AjBQQ,AUGI,ACJJ,ALFJ,AYEJ,MVIY,AEAA,CFAC,AEAA,CNC2E,CHL3E,AOIE,ATLF,ACEA,AUGE,ACJF,ALFT,AYEK,CVGe,AEAA,CRES,CEAuD,AFPpF,CFGI,GAAY,CCDZ,AGKgF,ALNhF,AYCA,GVAgB,AFDA,AYCA,CLFpB,AYEJ,CdKwF,CAAA,CEPrE,AYEE,CdKmE,CEPpF;ALGQ,AQhBZ,ADoBY,AJA4E,ANR7E,ACGC,ACCU,AUIV,ACJA,ALFR,AYEA,MjBAQ,AOIA,AJA4E,ALL5E,ACCU,AUIV,ACJA,AOAF,CjBAG,AOIA,ATLA,ACCU,AUIV,ACJA,EVAE,AOIA,AVRJ,ACGI,ACCU,AUIV,ACJA,ALFX,CLCoB,AGKgE,ALNhE,AYCA,EOCR,CdIwE,AJJpE,EIIoE,AcJlD,EpBJ3B,GAAoB,EQE3B,CYE0C,CAAC,CpBJpC,AQES,CRQgE,CAV9C,AQElC,UYEkC,CAAuB,QAAvB,CAAlC;AjBCQ,AIlBZ,AIEA,ADiBwB,AIDhB,ARGiG,ASgBzG,ACrCA,AEAA,AjBiBY,AkBPZ,AjBO+B,AUEP,ACDZ,ALFR,AYEA,KVCI,AEAA,CTDI,AFDA,ACAmB,AWCnB,CVAC,AFDA,ACAmB,AWCnB,EVAE,AWAF,AbDE,ACAmB,AWCnB,ALFX,AYEO,MAAP,ENAI,ENFJ,CMEoB,ENFP,EAAb;ALAoB,AQbxB,ADqBQ,AILI,AdJD,AgBdX,AEAA,AjBcwB,ACEJ,AUOZ,ACRgB,ATDpB,AgBIH,EAED,GjBLQ,AFDA,ACEA,AWDA,CCGI,CAAC,EJKA,AILE,AdJJ,AYSE,ARTT,CUGoB,GJMhB,AEAA,EZTG,CUSS,AEAA,EZTS,AIAzB,GAA2D,EJApD,AIAP;ADMI,AOII,AILA,AREJ,ASgBR,AftBW,AgBdX,AEAA,AjBiBQ,AkBRR,AjBOQ,AUOI,ACJJ,ALJJ,AJMI,MMEI,AILA,AFKA,CFAC,AILA,AFKA,ETJA,AOIE,AILA,AREF,ANNF,ACGE,ACDA,AUOE,ACJF,ALJT,AJMS,IDFL,AOIW,ATNX,AWKY,ACHZ,CXHA,ECGY,AOIA,ATNA,AYEA,ALJhB,CEOgB,AJFZ,AJJa,EFFV,AQCG,CFKU,AFChB,EJPwB,CIOL,EAAnB,CJPG,KQCG,CAAQ,CAAlB;ALKQ,AOIA,AIRY,ARKZ,ANND,ACGC,ACFW,AUQX,ACJA,ATEJ,KUNA,CXII,AOIA,AJHA,ALHA,ACFW,AUQX,ACJA,CVAC,AOIA,AJHA,ALHA,AWMA,ACJA,EVAE,AOIA,AJHA,ANNJ,ACGI,AWMA,ACJA,ATEF,CEFW,AJJG,EAAE,CDCT,ACDU,CCGV,AUAA,GTGZ,CFNqB,EFDlB,AIOa,GJPS,IAAI,CAAC,AIO9B,GJPyB,EAAtB;AGMC,AOCQ,AIDZ,ARCI,ANAJ,ACHI,ACHS,AUMD,ACDR,ALLR,AJOI,AgBHR,IAAM,CVEE,ARNA,AUMA,CTDI,AGCA,ALHA,AYEA,CVAC,AGCA,ALHA,AYEA,EVAE,AWAF,ARCE,ANAF,ACHE,AYEA,ALLX,AJOS,IUFL,EdCA,CcDY,AMDF,CZJd,CRMkB,AICd,CgBHa,CZJN,AYIO,ChBGG,GJDjB,AoBFa,EAAO,IhBGpB,AgBHa,EZJN,AYImB,IAAb,EAAmB,IAAnB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,CAArB;AjBDoB,AOQZ,AILI,ARFY,ANGhB,ACNY,ACCZ,AUSA,ACRY,ALHC,AJSb,KDNA,AGCA,ALHA,AYEA,CCGI,CAAC,EJKA,AILE,AdCF,AELA,AUSA,ARFA,IITQ,CEWb,AINY,AFMZ,ARFA,CITa,CROb,CUIa,AEAA,ARFA,CAAA,CJFE,CIEF,CFPb,EEOa,CFPO,CFKC,AELA,CFKC,IIEF,CAAC,KJFN,AIEF,CJFoB,IAAlB,CAAf,AIE0B,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,EAAb,GAAiB,MAA9B;ADDA,AOII,AILA,AREJ,AS3BR,Af0BQ,ACFA,AkBxBR,AjBoB8B,AUUlB,ACJJ,ALRe,AJUlB,AgBJL,KZNI,CEYQ,AILA,AZLkB,AUUlB,CELC,AZLkB,ECMlB,AWDE,AREF,ANDA,ACFA,ACJoB,AWMpB,AOFJ,CVMO,ARVa,AUUb,EFAE,AEAA,CFAC,AJHX,AMGW,CTJX,AFFA,AYEA,EPCY,CHDC,AFFA,AYEA,CHIH,AEAA,CZJV,GAAkB,EAAlB,EoBFR,CAA2B,EAA3B,EAAuC,IAAvC,EAA+D;AjBGnD,AOES,AIND,ARKR,ANDJ,ACFI,ACLwB,AUSf,ACFT,AOFR,KVII,AINA,AFMA,CTFI,AWVgF,ARWhF,ALHA,ACLwB,AUFmB,ACS3C,AOFF,CNEF,ARCK,AJRwB,AUa7B,ENLO,ANDF,AEP0B,CCOvB,AUAA,EVAE,AFFA,AYEA,CPCC,AcHF,CnBAG,EKGE,AcHF,CdEA,ELHC,KmBCO,CpBEpB,AoBFqB,GpBEG,EAAxB,CAJ4E,CAM5E,OoBJY,CAAwB,EAAxB,CAAhB;AjBCiB,AOMb,AJHI,ALHA,ACNiB,AWMR,ALPjB,AJWA,EAAA,GDJI,ADNoB,AWMpB,CPGI,ALHA,ACNJ,AEUJ,CEDS,AJd0C,AEenD,CMEU,ARXN,CIQO,AEVX,CPOY,EAAE,CAAC,CSMC,ENFhB,CMEmB,ANFnB,CHJc,EGId,CMEuB,AFbvB,EJWA,CME0B,AFbX,GEaX,MFbJ,EJWA;ADAI,AOGA,AILA,ARDY,ANGZ,ACNa,AWUb,ACJA,ALLA,AJMA,AgBLJ,IpBII,CMHA,ALHA,CmBEA,CAAC,CNEK,AFMA,CTJD,AOGA,AGHA,ALLA,CRKC,CAAC,GYIK,AQRhB,EjBII,AWFc,AdEd,AaAA,AOJU,CRQK,AJTf,ELKe,AWFa,AdEb,AaAA,CLLC,CEQhB,AECmB,ETJnB,AUAA,CHGoB,AILa,AdEjC,AYIsB,CFAlB,AIN8B,GFMlC,CENiC,CAAL,CAAY,GAAZ,CAAgB,UAAA,CAAA,EAAC;AXI7C,AOEK,AIN4C,ARGjD,ANAA,ACFA,ACPA,AUaA,ACHA,ALPiB,AJOjB,AgBLA,IpBIA,AoBJA,EVOK,AFTY,CESX,AFTY,CJOd,CDAC,AOEG,AJHH,ALFA,ACPA,AUaA,ACHA,ALPe,AJOf,CMEI,AVHH,AQNU,CRMT,AoBJA,CAAC,CNCyC,CVIvC,CMEI,AJHd,CcJA,CpBIA,AoBJa,CNCoC,ARGnC,CIGL,CAAU,AVHH,CGChB,AOEQ,ATLR,AWMA,ACHA,CXVA,ECUoB,AOEG,AJHvB,ALFoB,AWMA,ACHA,CHEZ,ARZa,AUcjB,ARJJ,CDAA,AHDA,ACFA,ACPsB,AWUtB,CVjB6F,AHQjB,ACTL,AYCsB,ATiBtE,CDCvB,AOCyB,AVDzB,ACJwB,AYIxB,CHCI,KNF0B,KAAP,AgBLY,ChBGvC,CAGI,AgBNa,GAA2B,aAAxC;AVO4B,AIN0B,ARItD,AJVuB,AUclB,AJXkB,AYGvB,KNA4B,CJMA,AIN5B,AZNuB,AUclB,AJXkB,CESM,ARZL,AUclB,AJXkB,EESO,AJF1B,AJVqB,AUclB,AJXkB,CNHJ,AUcb,MAAL,GNJJ,GAAkB,UAAlB;AHEA,AOAI,AILJ,ARKA,ANAA,ACJA,ACR6B,AUcZ,ACFjB,ALTgB,AJShB,AgBLH,KVIuB,AFRpB,CNH6B,AUcZ,CFDb,ARb0B,AUcZ,CTFZ,AHAF,AaAE,CCLD,ARKA,ALJA,ACR2B,AUcZ,CZFd,AYEe,CRFd,EJAE,CcLT,ARKA,CHAa,AUAA,CTAD,CULC,ARKA,ANAA,CGAG,AHAF,AaAE,CZJhB,GAAkB,CEIG,AHAZ,AaAY,CbAD,ACJpB,GEIyB,AUAA,ATAlB,CJAiB,AIAA,CJAC,EGAI,AUAA,ETAtB,CAAuB,CDAT,AHAD,AaAK,CVAzB,EUAoC,ATA7B,CSAc,ATAc,CJAC,AaApC,GbAS,CAAT,AIAwC,QAAjC,KAA8C,KAArD;AMCK,AILD,ARKA,ANAJ,AK9BR,AJ0BQ,ACTsB,AUclB,AJVJ,AJSH,GALD,CJKI,AK9BR,CHiB6B,AUaD,CFAf,AILD,AZRJ,CQaM,AEEF,CPhCZ,CK8BgB,ATJH,AOLA,CESI,AILD,AdKF,CAAC,CcLG,CNJV,GESI,AFTQ,IMGC,EbEb,GDIA,ACJqB,CDIC,ACHlB,MDGJ,EAA8B,gBAAgB,EAA9C,EAAkD;AGAlD,AOAiB,AIJb,ARKA,ANAA,AK/BZ,AJ2Ba,ACTL,AUcK,ACFL,ALTa,AYKjB,EAAA,IVIqB,AIJb,ARKA,ANAA,ACJC,AWKA,AJXQ,CESK,ATHZ,AWKA,AJXQ,ELST,AOAe,ATHZ,ACTH,AUcI,ACFJ,ALTW,AYKb,CVIkB,AJCb,ALJJ,AONQ,AYKR,CNAK,AdKA,CMAC,CHDD,AWJE,AdKA,AaDF,CVAC,AWJE,ADIF,CHAgB,AEEtB,ETFS,AUAA,CVAb,AUAA,CHAqB,ARZrB,AkBQJ,CjBIoB,AOAe,AGAf,CVAC,AOAG,AGAH,CXZC,CkBQD,CjBIG,AOAa,ARZjC,AWYoB,IVApB,AUAA,COJJ,CjBI8B,AUAA,CVAC,AUAA,EVA3B,AUAA,EVA+B,AUAA;AVC3B,AODA,AINS,ARKA,ANCqC,AK9B1D,AJ2BmB,ACRd,AUaoB,ACDb,ALVe,AJWvB,AgBJA,EhBIA,GMJwB,AIJpB,ARKA,ANCA,CMdiG,ALWtF,AWKM,AJXE,AJWvB,AgBJM,CVGE,AJEJ,ALNY,AWKM,AJXE,AJWxB,EHLkB,AWKM,AJXE,CIWD,CTDZ,AUAA,CR/BjB,IDgCI,CAAA,EgBJmB,GAAG,CjBGd,AUAA,CVAkB,AUAA,IVAlB,AUAA,ATCR,CDD+B,AUAA,COHD,ChBI9B,AgBJ+B,UhBInB,CAAZ,EAAuB,AgBJD,ChBItB,AgBJ6C,EhBIb,GgBJV,CAAtB;AjBIY,AODH,AIHL,AdKA,AKvBJ,AJiBQ,AWKA,ACAI,ALXI,AJYZ,AgBJJ,EAAA,EpBII,CCPqB,AWID,AJTpB,CEUK,ATLL,AWIA,CFCM,CPCE,AUAA,CVAC,AODD,AIHH,ADII,ATCJ,CMFI,CPCE,AHCJ,AaDI,CVAC,AHCJ,AaDI,GbCZ,AoBJS,CVEL,AIHJ,AdKY,AoBJF,EpBIV,AIAA,CDDW,AWJI,ADIJ,ATCI,CJAC,GGDO,AWJvB,ADIuB,ATCvB,CDDwB,AWpB4D,AdqBpF,AaDwB,ATCJ,CUJpB,AMAJ,EjBG+B,AUAA,COHL,EjBGX,AUAA,IVAuB,AUAA,KVAK,AUAA,GVAC,AUAA,CVDb,AUAA,UOF/B;AjBIY,AOFS,AJGjB,ANAH,AKvBD,AJkBC,ACTD,AUeI,ACFQ,ALXR,AJWqB,AgBHzB,ElBVA,CFnBJ,CAmCI,EULqB,ANEI,AgBHnB,CVCgB,ANEI,CDAd,AUAA,CVAC,AOFW,AJGf,AMCA,ACFI,ALXJ,AJWmB,CMFH,ANED,CDAT,AEtBf,AHSA,AWae,CVAC,ADbhB,AWagB,AOHJ,CZRR,EES0B,ALpB9B,AemBe,CfnBH,AGWI,CLWK,AEtBrB,AQsBqB,EHFI,ALpBF,CKoBY,ALpBnC,AGWI,CLWY,AOFQ,AJGpB,AJdJ,AWagB,CVAU,AEtBQ,AHSlC,AUeI,ACFsB,CVAX,AUAA,CHFsB,AJGb,CMCC,CTFG,AGCxB,ADvBJ,AOyBQ,ACHoB,COHD,CfnBqB,AHShD,CkBUA,ElBVA,KGTA,EAAkE,GHS3D,CGTP,EAA8E,AHS9E,EAAoC;ACWL,AOAvB,AIDJ,ARKA,AD3BG,AHaH,AUeK,ACLsB,ALR3B,AJU2B,AgBF/B,EAAA,GVHwB,CAApB,AEQK,ARHsB,CDFvB,ASKE,ACLF,ATEwB,CFZtB,CYSD,ARKA,AD3BF,AO4BK,AJbH,AJUyB,CQG1B,EVfM,GGbP,AHaU,AkBUJ,CZRT,AYQU,EfvBU,CGeL,CHfZ,AHae,CYSlB,CRKA,EQLoB,CAChB,ARIiB,CEZrB,CFYA,AcJJ,ClBViB,AkBUS,ClBVK,CAAd,GAAkB,CkBUnC,IlBVwC,IAAL,CAAU,CAAV,GAAY,CAA3C;ACcI,AODJ,AIHK,ARKL,ADxBA,AJmBJ,ACTI,AUcW,ACDP,ALXP,AJSuB,AgBDxB,EnBDA,AmBCA,GhBCI,CUFK,AFKM,CELL,AFKM,CVdN,CQYD,AIHG,ARKH,ADxBA,AOwBS,AQJX,CNDC,AbAR,AmBCQ,CjBGK,AFJb,ACTa,AWaA,EDCS,CVdN,EUcO,CPxBnB,ECwBA,AJdiB,CGVD,AJmBpB,CAAA,AmBCA,CVEI,AJEkB,AcJF,CjBGZ,AUAA,CVAkB,AGCtB,AODsB,CHDD,CACjB,CTJR,ACTgB,CAAc,CAAd,CDShB,CEIQ,AUAA,CVA0B,ADbA,AWaA,GOHlC,ElBVuC,GDShC,CCT2B,CAAU,CDS5C,ACTkC,EDSE,CCTU,CAA1C;ACcQ,AODH,AIJM,ARMd,ANCD,AKzBQ,AJmBJ,ACTA,AUaI,ACAI,ATFX,AgBAD,EpBIA,CINA,CFTI,CUYqB,CFAhB,AIJM,ATlBP,AOsBJ,AQDE,CVCI,AIJM,ATlBP,AHUF,CCaK,AFJJ,ACTA,AWaI,CVAC,AODD,AIJM,ATlBP,AQuBE,CHDL,AIJW,ATnBC,CFwBL,AUAA,EbEf,ACNa,CDMb,CcPwB,EZRpB,AkBWa,CjBEK,AFJd,AYIc,CCLH,AbCA,CaDU,AZRT,AkBWA,CNHF,CXKQ,AUAA,CVAC,AHE3B,AaF2B,CCLI,AdO/B,AoBJwB,CNHN,AbCV,CEIsB,AUAA,CXb1B,CYQ+B,AMGf,CjBEE,AUAA,AOFO,CjBEd,AHEf,ACN8B,AYIf,GVAsB,AHErC,AaFqC,EZJF,AmBEf,CAApB,EjBE0C,AUAA,EZJZ,CEIa,AFJF,AYIE,CVDT,AUAA,GbGlC,ACN8B,CAAgB,CAAhB,CAA1B,EAA8C;AEKtC,AOFG,AIJP,ATjBA,AJmBA,ACTJ,AUeA,ACFQ,ALXZ,AYSA,EZTA,AYSA,ElBXI,CYMoB,CJKT,AILX,AThBI,AGYR,CESgB,ALrBP,AHUF,AMEP,CLWY,ADbJ,AWaI,CVAC,AOFK,ALrBP,AOyBF,ACFI,EVAE,AUAA,CVAC,AUAA,CHFM,AUAX,CAAC,EVAW,ARXnB,AMEJ,CLWqB,ADbJ,AWaI,ALXrB,EIaI,CQJJ,CjBEgB,ADbZ,AWaY,CVAU,ASEJ,ACFI,CVAX,ADbQ,AWaR,ALXf,CIaI,ETFwB,ADbxB,AWawB,ALX5B,ENF4B,KAAK,GME1B,CNFqB,CAAU,CAAlC,AMEJ,ENFyC,AMEL,KNFU,IAAL,CAAU,CAA/C;ACW8B,AOA1B,AIDJ,ARKJ,AD3BoB,AJsBZ,ACTJ,AUeH,ACLiC,ALR9B,AJSJ,AgBAA,EdGA,AFHA,AgBAA,ElBXI,AMEA,CEOqB,ALtBrB,CKsBA,ANEJ,CDDQ,ADVD,AWUC,ALRD,AJSP,CFXQ,AMEA,AYSF,CNFG,ARKT,AcHO,CdGP,ELLc,AOPV,IPOc,AGElB,CFXI,AEWJ,EEGA,CAAA,AJdqB,CDSP,CaAV,AbAoB,CGExB,EUFyB,AZTC,AkBW1B,ChBAA,AgBAwB,CNFpB,ARKJ,GAAA,AJdqB,CAAW,EkBWhC,ElBXqB,AkBWY,ClBXI,AEW9B,CFXc,EEWrB,CEGQ,CJdkC,AEWJ,IAAtC,AgBA0C,EhBAwB,CEGlE,EAA0B,AJdL,AkBWY,EAAc,ClBXO,KIctD,EAA0C,EJdtC,UDSU,CAAN;AEKH,AMlCT,ACiCQ,AIHA,ARKA,ANDA,AKtBA,AJkBC,ACTD,AWaC,ALXD,AJSA,AgBAA,IXhCR,APqBQ,AkBWA,CjB3B6F,CA+B7F,CDfG,CYSG,AZTF,AMEE,AJSF,CMCC,AVCA,AKtBA,ADoBA,ICpBL,CDoBU,CUFG,ANPA,AYSF,CpBEX,AKtBY,AHSZ,AkBWY,CpBEC,AEZT,CYQY,ANPC,CEUjB,EDjCR,APsBgB,CQWU,CIHG,AMErB,CVCA,ARXW,AkBUS,CZTI,AJSxB,CUFwB,AdIxB,CAAuB,AIFA,CJEvB,CEZgB,AkBUS,CNFzB,AdI0B,AQXG,AYSH,CpBE1B,EAA6B,AEZlB,CAAU,AMCJ,CNDN,EkBUX,CpBEkC,AEZT,CMCa,AYSH,ElBXnC,EAEI,CFWyB,AoBFW,CpBEC,AoBFA,ClBTlC,GAAG,AMAO,CRWjB,EAAgD,AQXG,AYSnD,ElBTe,GFWsC,AQXG,CNA9C,CAAU,CAAV,CMAyC,ERWH,AEXxB,AMAP,CRW2C,EEb5D,AMEiE,ENC7D,EFUJ,CQXsE,ENC7D,EMDT,ENCI,CAAU,CAAV,GAAc,GAHlB,EAII,KAAK,IAAL,CAAU,CAAV,GAAc,GAJlB;AOrBR,ACkCK,AJEA,ADvBO,AHcP,AUUD,AJbI,AJSA,AgBAH,ERID,CNHA,AJnBA,AkBgBA,CZPI,AJSA,CgBnBuD,CfDnD,AesBR,CftBS,AGWF,AJSA,CITC,AJSA,CCpBG,GGWP,AJSA,CCrBY,AOyBhB,CAAA,CJbkB,KAAK,GIavB,CAAA,AJbkB,CAAU,CAAV,GAAW,EIa7B,GAAA,SJbI,CIaI,AJhB4B,CAIhC,OIYJ,EAA0B,QAA1B,EAA0C;AHrC9C,AK+BQ,AdIA,AKrBI,AJiBJ,AWOA,ACFA,ATFA,IHHA,AGGA,ECpBI,CAAC,AJiBF,AGGA,CHHC,AGGA,CUHC,AdIA,AKrBE,AQsBF,CJpCb,GK+BiB,AdIA,CcJC,AdIA,ESnClB,CK+BqB,AdIA,ACJb,CQ/BR,AK+BQ,AdIA,CIDA,CUHgB,AdIA,ACJC,CaAA,AdIA,CaCjB,ATFkB,EUHE,AdIA,CCJE,AYKD,EAArB,ATFuB,CUHvB,CdIyB,CcJC,AbAT,CaAU,AbAC,CGG5B,CUHA,EAA+B,EbAd,EDIG,CAAgB,ACJC,MDIrC,EAA4C,CAAC,ACJ5B,EDIjB,CCJiD,CDIA,QCJjD;AEMA,AMrCwB,ACoC5B,AIJQ,ARIP,ANAO,AKxBQ,AJoBZ,ACLH,AUYA,AJbG,AJSA,AgBCJ,EXpC4B,ACoC5B,CECA,CXLI,AONA,AJSA,CCvBA,CewBA,CnBJG,AONA,AJSA,CHHC,AONA,AJSA,CDEC,EMrCmB,AKgCf,AdIA,CSpCe,ACoC5B,CAAA,IFVI,AJSA,AgBCW,CpBAP,AoBAQ,CpBAK,ACJjB,CONiB,AJSD,CDEhB,ACFA,CDEkB,AODtB,ATJsB,CSItB,AVAQ,CcJA,CAAmB,CXKvB,AHFiD,AoBCrD,CjBC2B,AHAnB,AQXoB,CYUF,CXpCE,AKgCpB,CJIR,AIJgC,CLhCJ,CD0BK,CEUjC,IDpC4B,CAAA,CRgCxB,AONwB,CAAa,GEUjC,EFVa,KAA8B,CEUnD,EAA0B,OFVL,CEUrB,EAA0C,AFVsB,KAAK,OAAL,CAAa,KAAb,EAA3C,GAAkE,KAAK,OAAL,CAAa,KAAb,IAAsB,MAAzG,CALgC,CAMhC;ALWI,AODJ,AIJQ,AGjChB,AZiBQ,AJgBA,AYIA,ATDA,AgBCA,IHrCR,AhBiCQ,AGGA,EDEI,CAAC,AFLF,AGGA,CUHK,AbAJ,AGGA,AgBCE,CjBCC,AWLE,AThBJ,AQoBA,ECJM,CAAC,CAAC,ADIJ,CVCG,AErBZ,AQoBU,ECJM,AMIF,CfpBD,AJgBb,AYIa,ATDb,CDEO,AUDP,CVCiB,ActCzB,AGqCyB,CjBCV,AWLa,ADIJ,CAAC,EVCI,AWLA,CXKd,AWLK,ADIQ,GVCG,AWLE,AMIA,CjBAF,AUAvB,AOA0B,EPAA,CCJC,ADIA,CCJhB,CDIX,EAA+B,CCJC,KMIf,CAAuB,CNLZ,IMKX,CAAjB;AjBEI,AMtCR,ACqCC,AIJW,ARIZ,ANAQ,AiBtCZ,AZkBY,AJgBJ,ACNJ,AUWC,ACDO,ALVJ,AJSA,AgBCA,EdAJ,AJVA,CQQA,CTFI,AONA,AJSA,AgBCA,EjBCI,AErBA,CFqBC,AFLF,AONA,AJSA,CUHK,AbAJ,AONA,AJSA,CDEG,AWLE,ARIb,CAAA,ANAc,AKpBF,CIjBZ,AKiCe,AbAX,ACNJ,AWUa,CRpBC,AJgBF,ACNZ,AkBUY,CfpBG,AeoBF,CpBAK,AIDd,CAAW,CUHK,CdIC,ACJJ,AONb,CHVU,CCoBd,AFDmB,CUHJ,ARIf,AEVoB,AJSA,CUHK,AZNzB,AESI,CUHW,AdIW,AEV1B,AkBUI,ChBDmB,CSCf,CCJmB,AbAf,AYIe,AOAF,CdAzB,ALJ0B,CAAtB,AGGuB,CKpC3B,AD2BI,AJSwB,CKpChB,AHqCZ,ALJ6B,ACN7B,AWUQ,ATDJ,CSC4B,EbAX,AEVrB,CFUqC,CAAhB,ACJa,CQjClC,ATqCQ,ESrC6B,EHqC9B,GAAP,ALJ6B,ACNrB,CDMmC,CKIP,ALJhC,AmBIA,EnBJ0C,GCN9C,EDMmD,ACN1B,IDMqB,CAAU,CAAV,CCN9C,EDM4D,ACNpB,CDMpC,EAA2D,CAA3D,EAA8D,IAAI,CAAC,EAAL,GAAU,CAAxE;AEGuB,AWLK,ARO5B,AWvCR,AZiBqB,AJkBb,ACNA,AWUQ,ALVR,AYUA,IdAA,ALJA,AONA,AYUA,CjBFA,AEpBA,ESeI,AROD,ALJA,AONA,CFUC,ALJA,AYII,ALVJ,CKUK,CIvCjB,CJuCmB,CPAX,ALJA,AYIY,AOAJ,CAAC,GHvCjB,EAAA,CJuCmB,CLVX,EYUA,CPAuB,ALVJ,CKUK,COAH,EPAM,CAAC,GLV5B,CKUgC,GAAC,CAAN,IAAS,CAAzB,CADiB,mHOKD,EAJN,GAIQ,mDAJR,IAIoD,YAAY,CAAC,MAAb,GAAsB,CAJ1E,IAI2E,yHAJ3E,GAQO,EARP,GAQS,yDART,GASQ,EATR,GASU,sDATV,GAUM,EAVN,GAUQ,gDAV7B,CAHsB,CAgBtB;AjBVA,AQxCR,ADoCK,AIFI,ARKD,ANFI,AiBvCkB,AZqBtB,AJeA,ACNH,AUWD,ACDY,ALVR,AJQA,EatCsB,ALyC1B,CVbA,CS1BJ,AVkCQ,AONA,GPMG,AONA,CFWG,ALLF,AYII,ALVJ,CLYC,AErBA,AQmBI,ATFJ,EJCI,AiBvCa,AJwCX,CPCD,AWzCY,CLyC1B,ARHa,CHFT,AWKJ,ARHc,CEGG,ANFA,CAAC,AaCE,ALVhB,CHTA,AGSa,AJQA,CAAb,CJCiB,CMEC,ANFd,AKlBY,AQmBL,ATFK,COpCxB,AEsC6B,ATFJ,CDIjB,AHHoB,AaCT,CbDU,AYEzB,CAAA,AJXI,AJQoB,CDIC,AUFE,CbDC,AQTF,CLYtB,Ac1CsB,CXyCT,ADpBW,CCoBG,AWzCL,AbsCG,CEGZ,ANFe,AYEhC,CZFiC,AKlBF,AGSA,EFWI,AMAnC,EKzC0B,AZqBS,CYrBT,AZqBU,ECoBI,ADpBpB,ADiBI,CIRE,AJQa,CIRC,CRSZ,AKlBa,AGSrC,CFW+B,ANFS,CMEC,AMAtC,AJXoC,CFWR,ADpB/B,CDiBA,CQGJ,CNA+C,AFHA,CEG3C,ANFI,AYE4B,AJXY,AJQA,EJCI,AIDhD,CJCiD,CIDD,CJC5C,EAAiD,CQTd,CAAc,CAArD;AC7BJ,AECJ,ALwCQ,ANFQ,AgBrChB,AXoBQ,AarBR,AjBmCK,AWKG,ACJ4B,ALP5B,AJQI,AgBcJ,GnB3BJ,CevBJ,AEDA,ANwCQ,AJXA,AYsBA,EhBdI,CQGD,ACJC,ALPD,CC9BP,AHyCU,ADnBA,AOmBF,AJXA,CJQG,CAAC,CEGC,CNFK,AYEd,AQWQ,CXpDZ,AWoDa,CdXG,ADnBA,CGQZ,CC7BA,ALqCI,CChBW,ADgBA,CcrCvB,CZwCyB,CNFK,CKjBH,CIrBnB,AJqBoB,ADgBA,CKrCpB,ATsCyB,EgBrCjC,AXoBuB,CAAS,Ae8BxB,CXnDA,AHwCY,AcWW,CXnDvB,AHwC0B,CAAd,EDnBiB,ADgBd,CKrCf,AHwC8B,AFHA,CAAf,CKrCT,CLqC2B,CAA7B,CEG+B,CFHC,CChBrB,Ae8BoB,CXnDnC,AJqBA,CCmB8B,AcW9B,CXnDc,AHwC0B,CAAV,AFHW,AgBcD,EXnDxC,CHwC0C,CGxCvB,AHwCnB,CAJgC,CAKhC,CGzCA,ELqCoC,CAAe,CAAf,CKrCb,CLqC+B,CAAlD,EKtCR,AWoDI,CAAyD,QAAzD,EAAmE,UAAS,KAAT,EAAc;AjBVjF,AQzCR,ADsCI,AIFI,AdGY,AgBtCpB,ACFI,AZuBI,AatBR,AhB4BK,AUcG,ACFC,ALVJ,AJQI,AgBcG,EVdR,CFnBA,EKhBiG,CAsC7F,AOWI,Ef9BE,AOoBA,CTDD,AWLA,CHpCb,AXuCoB,CAAC,AiBxCjB,CPuCA,ALhBc,AOoBA,CTDD,AOHb,AVCmB,CGEL,CEnBG,AOoBA,CD1CrB,CRyCqB,AHFM,AoBaJ,CjBXf,AQzCR,AXuC4B,AoBaJ,CNhBhB,ATdiB,CFmBD,AEnBE,AOoBA,CTDD,COHrB,AIFsB,CJEtB,ALhBiB,CFmBO,AWLpB,ATdsB,ELiBP,AiBxCnB,CjBwCiC,AiBxCrB,Cd0CR,AHFe,AYGF,AQUT,CVdR,ALhB+B,AOoBA,CTDD,ASCb,CTDc,AHFM,AoBaJ,CVdjC,CPGI,Ac1CJ,AL2CmC,ETDA,AHFM,AiBxCJ,CjBwCK,CKjBzB,CAAb,AOoBoC,CPtCsC,CAmB1E,EKeG,AEI4B,CAAU,AQUA,CRVV,AQUW,CVd9C,EAAoC,AEIW,CZHV,AYGjC,CZHmD,CAAlB,AoBae,CAAE,CpBbI,CAD7B,GoBc8B,CAAC,MAAN,CAAkC,KAApC,CAAP,CAArC;AjBVA,AMxCJ,AEFwB,ADuCxB,AIFH,ARKG,ANFY,AgBvCpB,ACFI,ACCJ,AjBmCK,AWQG,AQUC,ETrDuB,EDuCxB,AJGA,CcSA,EVZG,AJGA,CGxCG,ACqCF,AJGA,AW3CR,AL4CU,EZHM,AgBvCpB,AEDA,Cf0CiB,AQ1Ce,AXwCX,AYGJ,CD3Ce,ADuCxB,CVCe,AiBzCnB,CL4CgB,EHzCE,AODtB,ACDQ,ACAR,CZ0CQ,ANFmB,CAAC,AgBvC5B,AEDA,CTEyB,AGyCA,CHzCjB,AHwCgB,EW1ChB,CAAA,Cd0CI,CAAmB,CHFR,CAAc,AiBxC7B,AL2CY,CZHG,AiBxCf,AL2C0B,CTDtB,AQ1CoB,AL0CxB,AMCY,CTDgB,CQ1CJ,AXwCS,CiBxCjC,AL2C8B,EK3CxB,CjBwC+B,CAAC,CWxCd,AC2CW,CD3CX,EMAxB,CL2C8B,CK3ChB,AL2C0B,CAAV,EK3C9B,CL2C0C,CK3CvB,AL2CnB,CZHiC,CAAkB,CAAlB,AiBxCjC,EjBwCsD,GiBxC/B,IAD3B;Ad4CY,AMxCR,ACsCA,AJEA,ASrDR,AfgDiC,AgBrCG,AXuB5B,AaxBqB,AhB6BzB,AUeI,AJbR,AJQQ,AgBeA,EJrD4B,AEDP,AhB6BzB,EIcI,AMCA,AQUA,GdXG,AMCA,CTDK,AMxCJ,ACsCE,AJEF,ADnBA,AOoBA,ARLE,CDIG,AHLD,AQPhB,ELYmB,Aa1CiB,AEDP,AhB6BzB,AkByBW,CjBXK,AOFF,AMxCkB,AXuBpB,AaxBa,AhB6BzB,AkByBY,CZvBhB,EEUqB,CDtCD,AJqBA,CCmBZ,ADnBA,AOoBA,ARLe,CQKD,CTDH,AMxCI,AJqBA,CKiBG,ANFA,CKpClB,AP0BJ,CAAA,AUeI,CTDuB,AiBWvB,CjBXwB,ASCJ,AQUA,ChBfG,CcvCF,Cf2CM,ASC3B,CTD4B,AOFf,AQzCQ,CRyCM,AEFK,CFEnB,ARZjB,AUgBI,ETFgC,AiBWhC,CVb+B,AMxCH,Ad4BhC,CgB7ByB,Cf2CY,Aa1CL,AEDP,Cf2CM,ACJT,CAAiB,CMEC,EPEA,CAAzB,Aa1CiB,CbyCA,AODG,AMxCH,CNwCa,ARZpC,CQY0B,GAAY,ARZ/C,CQYI,CRZoB,CEUF,CAA+B,KAAK,QAApC,CAAlB;ADKQ,AQ3CZ,ADyCI,AIHJ,ARKI,ANFQ,AiBxCR,AZuBI,AJYR,AkBpCJ,AjB6BQ,AWYA,AL5CR,AJ0CQ,AgBgBA,CZ1DR,CMyCI,AbFA,COvCJ,CF8CQ,Aa3CR,AfuCQ,GEIG,AFJA,CDIK,AOFF,AJEF,AW1CE,AbsCF,AgBgBE,CjBZG,AHFD,AaAH,CZLT,CEOe,AQ3Cf,ADyCa,AVAD,AKjBC,AJYb,CaEA,CAAA,AGrCe,CPwCC,AJEZ,ANFQ,AIFR,CEIW,AFJA,CDIK,Ac1CF,CAAC,CjBwCH,CUAK,AJEjB,ANFa,CGEF,AFPf,CEOyB,AGAU,ALPnC,AmBmBqB,CjBZN,AWLf,ADGI,CCHJ,ATdQ,AQiBe,CPEnB,AFJoB,AgBgBC,CjBZE,AgB3C/B,AfuC6B,CCfG,ADeb,CMEC,ALhBJ,AQgBR,CFzCJ,ADyC8B,ATL9B,AYK4B,CFzChB,ADyCI,AVAJ,AIFiB,CUD7B,AdG4B,CAAhB,AiBxCM,AhBmClB,CSKkC,AVAtB,AoBcqB,CNjBjC,AGrC4B,AGsDM,ChBhBA,COvClC,EAAqC,ADyCE,CVAT,GUAI,ATL1B,CSKoC,AVAhC,CUAsB,AIH1B,EVCqB,CMEiB,AVAhB,AiBxCZ,AbsC4B,AgBgBrB,CVdrB,AUc4C,CpBdlB,AiBxCM,ChBmCpC,EaEA,AbF0B,EaEA,AdGI,CIFD,CAA0B,CAAnD,EJE0B,AIF4B,CJE9C,ACLZ,AmBmB4D,ENjB5D,AbF0C,AmBmBjB,CpBdK,AiBxCZ,AGsDd,CNjBsC,AGrCtC,IjBwC0B,AIFqC,CJEvD,AIFwD,CAAV,EJE5B,CIF0C,CJE1C,CAAE,GIF6C,GJE/C,CAAS,KAAK,EIF4B,CAAiB,IJE3D,EAAuB,EIFmB,CAA0B,CAA9F,IJE0B,CAAlB;AGAoB,AMtC5B,AEHJ,AD0CI,AIHA,ARKA,ANFK,AgBzCT,AXyBgB,Aa1BhB,AjBqCI,AkBrCR,AjB8BQ,AUeA,ACHI,ATFJ,AgBgBA,IVdA,AJEA,ALPA,AWQA,ARLA,AgBgBA,EPdI,CVDA,AOCD,AJEA,AMCA,ACHE,ATFF,COxCP,AD0CQ,AJEA,ADlBQ,AOmBR,ARLA,CKrCC,AJuBQ,AQgBN,CAAC,CGzCZ,AXyBmB,Aa1BnB,AjBqCW,CAAC,CQlCC,AEHb,CFGc,AHyCV,AFJA,CEIW,ADlBQ,AJWnB,AYKa,CFzCb,AVoCY,CQlCC,ACuCb,AEGA,AQWW,CXrDX,ACuCc,AUcF,CdZG,ADlBQ,AQgBf,CJvCQ,AJuBQ,AOmBR,ACHE,CJvCD,AIuCV,CFzCP,ADyCA,AJEkB,CK3ClB,ANyBuB,CIvBH,ACuCA,AGAA,CK1CxB,AN6CyB,CPnBO,Aa1BpB,CPCR,ADyCA,AJEuB,CK3CvB,CDoCgC,AGIR,CHExB,AEEgB,CNDE,AMCS,CH1C3B,AEFA,AL2C4B,AU3ChC,AXyB2B,Aa1B3B,CZ4CI,AU3CQ,CPEsB,AEFxB,AOD2B,AEwDjC,CXrD+B,AHyCA,ADlBM,AOmBrB,AQWa,CnBnB7B,AWQgC,CH1ChC,AG0CgB,CNDhB,CGzCmC,AOFvC,CLAI,CKAiC,AXyBQ,AOmBJ,CQWrC,EAAsC,CTvDzB,ANyBM,CADX,GMzBZ,CC6CoB,GAAiC,GQWX,MRXtC;ATAC,AIhDT,AEOY,AKoCP,ARKG,AU5CJ,ACCI,AZyBY,Aa3BhB,AjBsCI,AkBtCR,AjB+BQ,AUeA,ACHI,ATDJ,AgBeI,GNnBR,CPzCJ,ADgDQ,AMCA,ARJA,CDxC6F,CA4C7F,AUHI,AOcA,CdZD,AMCA,ACHE,ATDF,CEGC,AU5CR,AX0BgB,Aa3BhB,AN8CQ,ARJA,CaxCC,AZyBQ,AJWR,AYKE,CJvCG,AUJlB,Cd2BuB,AHIR,EO3BM,AOHjB,ACCa,ACFb,CZ6CI,AW3CU,AhBoCV,CKOW,ADlBQ,AJWR,ACPX,AMCO,CC5BS,AOFhB,AEDA,ACDR,CFEqB,AL4Cb,ARJA,AgBee,CHvDf,AEFR,ACyDwB,CdZD,ADlBQ,CE9B/B,AEO4B,AQFJ,AZyBQ,ADeR,CaxCC,AhBoCjB,AGIA,CEGkB,AU3ClB,AEDA,CFCA,AXyBuB,Aa1BvB,AEwDI,CHvDgB,AhBoCA,CgBpCpB,AhBoCqB,CIXO,CCkBL,AU3CvB,ACAuB,ACDvB,CFCA,ACAwB,ACDxB,EDCA,AhBoC0B,CKOR,CAAU,AU3C5B,ACA4B,AZyBL,Aa1BvB,CZ4CA,CU3CM,AEDA,CZ4CyB,ADlBM,AJWhB,CAAW,CQlChB,CAAa,AHyCK,EU3ClC,AEDA,CZ4CqC,ADlBI,CWzB3B,AEDA,AjBqCd,EQlCmC,COFnC,AXyBmB,Aa1BnB,CZ4C0C,CU3CvB,AEDA,ETGmB,CAAtB,AHyCqB,AU3CrC,AEDA,CZ4C+C,CGzCN,AHyCzC,EGzCgB,COFO,AEDA,CTGsB,GOHjD,AEDA,ETIoB,EAAoC,EAApC,CAAZ;AFPZ,AEQY,AEFJ,ADyCA,AJEA,ANHI,AiBxCA,AZsBI,AJcR,AkBvC4B,AjBgC/B,AUeG,ACNwB,AOiBpB,ED1DwB,CjB4BhC,CQgBI,AJEA,AMCA,CCNA,CJpCI,AWqDA,CVdD,AJEA,ADtBqB,AOuBrB,CD5CG,ADyCF,AJEA,AMCA,CPlBI,AJUH,CgBpCK,CjBwCD,AmB3CmB,CAAA,EVKhB,AHyCZ,AW3Cc,AhBoCd,AWQA,CH1Ca,AHyCF,ALPA,AWQA,EFHX,AOzCiB,EREb,AEFa,AL2CjB,ALPA,AmBmBe,CXrDG,ACuCF,ATLA,AWQA,AQWA,CdZe,ANH3B,AiBxCiB,AhBoCrB,CUpCoB,AXwCA,CStChB,ATsCA,CMG8B,AMCvB,CZJY,ACJF,AWQA,CD5CG,AC4Cb,CND0B,CcYjC,CVdJ,AEGuB,CXRG,CDItB,AoBeuB,CdZe,ANHZ,AYI9B,CO/C4B,CP+CA,CXRP,AkBvCO,AP+C5B,AQWI,CdZiC,ALPL,CKOe,ANHZ,CMGnC,AW3CiB,CAAa,CAAC,CEHH,ClBuC5B,AkBvC4B,CRGR,AMAY,AhBiCM,CUjCL,AXwC7B,ACHJ,EUrCoB,AMAU,ENAO,CMAC,CNAlB,CMAH,CNAwB,CMAC,EAAzB,ENAG,AMA0B,ENAE,EAA5B,CAApB,AMAiB,EAAoC,EAApC,CAAb;AVNZ,AEUY,AEHJ,ADyCA,AILH,AROG,ANHI,AgBxCJ,ACAI,AZ0BQ,Aa3BZ,AjBsCH,AWOG,ACFA,ATHA,AgBgBI,GnBvBR,CSSI,AJEA,AMCA,EQWI,CVdD,AJEA,AMCA,CD5CG,ADyCF,AJEA,AU3CE,AX0BM,Aa3BN,AN6CF,CPlBS,AQgBR,ATHA,CG9Cb,AEUkB,AQHA,CjBwCD,AKdM,EDaN,CKpCK,AOHF,ACAE,ACDF,AN6CZ,ARLU,CCbS,AOkBR,CLnDnB,CEUyB,AEHF,ADyCf,AJEA,AU3Ce,ACAE,ACDF,AdwCF,CG9CrB,AP+CY,AIDJ,CJCiB,AKdM,AQgBvB,CF1CkB,AC4CF,ARLA,AgBgBA,CXpDK,AOHF,ACAE,ACDF,AdwCF,AgBgBA,CPbC,EF1CI,AC4CX,ACFX,ATHoB,CCbO,AOkBN,CZJjB,AYIO,GAAY,ARLE,AgBgBrB,Ef7BmB,COkBvB,AQW4B,EXpDX,AJuBmB,AOkBR,CHzCF,EWoDtB,CXpDyB,AOHd,ACAE,ACDF,AdwCK,CKpCU,AOHF,ACAE,ACDF,AN6CK,ARLE,CavCJ,AZ0BS,CM1BtB,AKAH,CLAgB,AODhB,CFCiB,ACAA,AL4CJ,CPlBT,Aa3Bc,AN6CK,CD5CpB,AKAH,AXyBP,AOmBoB,ARL5B,CavC8B,ACDf,CTIW,AEHU,AKAA,AZuCO,CKpCJ,ASJF,AN6CG,ARLI,CKpC3B,AEHC,AMAoB,CbuCtC,CKpC0C,AEHF,AC4CxC,CI5Ce,ACAE,AbuC+B,CcxCjC,CTI8B,AOHF,ACAA,CRGG,ASJF,CPC1B,AKAH,ACAE,CDAjB,AEDe,CPCgC,AMAA,ACD/C,EPCkB,CAAlB,EFG0C,AQHzB,CRGsC,CAAb,AQHY,EAArC,CRG0C,AQHvD,CRGa,EAA6C,EAA7C,EAAiD,MAAM,CAAC,IAAA,CAAA,GAAA,CAAA,CAAA,EAAG,CAAH,CAAD,CAAvD,CAAb;ANwCJ,AIlDuB,AIQvB,ADyCA,AJEA,ANHC,AgBxCD,ACAI,AZ0BQ,Aa3BZ,ACMJ,AjBsBC,AUiBG,ACFH,ATHO,AgBgBH,Eb/DsB,EGiDvB,AJEA,AMCA,CQOA,EVVG,AJEA,AMCA,CD5CG,ADyCF,AJEA,AU3CE,AX0BM,Aa3BN,AN6CF,CTFC,AEhBQ,CY1BH,AbuCF,CG/Ce,AFkCR,AcrBnB,CZb2B,ADmDvB,EIFA,AMzCY,ACAE,ACDF,AN6CZ,CD5Ca,ADyCF,ALfQ,AOkBR,ARLE,CMEb,CMzCe,ACAE,ACDF,CPCC,ADyCF,CAAd,ALfuB,CAAC,AOkBR,CI5CG,ACAE,ACDF,Cf2CnB,AQ1CoB,CR0CD,AEhBI,COkBZ,ARLH,CQKa,ARLE,CavCG,AZ0BE,AOkBjB,ARLH,CDGR,Ac1C2B,Cd0CH,AIlDD,AUQG,AbuCA,CavCT,AL4CM,CLpDA,AUQO,CAAC,CZ0BR,AcrB3B,APuCI,ARLI,CelCI,CFLwB,AL4CJ,ARLI,CCbK,CElCd,CAAA,AUQO,CDAf,AEDA,CPCC,AKAY,AEDA,ACMhC,APuCqC,CD5CJ,AMAS,CZ0BG,AcrBR,CHLlB,ACAE,ACDF,CPCC,AC4CY,CI5CK,ACAS,ACDT,AN6CK,CD5CJ,AN0Bf,AOkBnB,CI5Ce,AEDA,CPCC,AMAC,CDAoB,AEDA,CPCC,AMAS,EAA9B,EDAF,ACAoC,ACDpC,CPCC,AMAC,CDA2B,ACAxC,ACDwC,CPCC,CKA9B,AEDA,CPCC,AKAhB,AEDA,CPCA;AR2CI,AMxCA,ACuCJ,AILJ,AROI,AU3CA,ACAI,AZuBI,AaxBR,AjBoCH,AkB/BD,AjBuBJ,AUiBQ,ARLQ,AgBgBR,ENnBJ,EJKI,AJEA,AMCA,AQWA,EjBbI,AMxCA,AQFA,Cd0CC,AODF,AJEA,ADzBqB,AO0BrB,CFHC,AJEA,AU3CE,AXkBF,AanBE,ACKV,APwCQ,ARLI,CDGD,ADff,CCegB,Ac1CA,CREA,AQFC,AbuCE,CKrCF,AKkCb,AVGgB,CUHhB,AKhCA,CTqCI,AJEA,AU3CY,AJ4CZ,CTFa,AODF,AQ1CE,AN6CF,COvCX,CbwBgC,AU7BjB,AIuDJ,CdVX,AY9CgB,AhB4BxB,AkB4BoB,CjBbJ,CAAU,AODF,AEGA,CTFT,Aa1CY,ACAf,AbuCI,CKrCJ,AKkCR,AGpCwB,ACDA,ACMpB,CVHoB,AKkCxB,AK/BI,ChBqCoB,AODT,AEGA,CFHU,AEGA,CFHV,AOzCP,AL4CO,AQWX,CXrDI,AQFqB,AEKzB,CVHyB,AUGzB,ChBoCwB,AOAD,AIL3B,AFQ2B,AQWA,EHvDM,CREzB,ACuCJ,AILJ,AK/BI,APuCA,CQWA,CVd4B,ASpCtB,APuCsB,CFH5B,GMzCe,CAAa,AJ4CK,CM7CjB,ACMhB,CDN8B,CJqC3B,AEpCY,CJ4Ca,CI5CK,ACAR,ACDT,AN6CsB,CER1C,AGpCsC,AEKrB,APuCe,CM7CO,CJqCH,AEpCjB,CJ4CyB,CI5CF,ACAb,ACDT,ACKpB,EFJ4C,ACDA,AN6CxC,CK5CyB,CCDT,CFCD,ACA4B,ACD3C,CDEQ,CDDqC,EAA9B,CAAf;Ab2CI,AInDR,AEWK,AEHD,AD0CA,AILA,AdIA,AgBxCA,ACAS,AZ2BR,Aa5BD,AhBbR,AU0DQ,ACFJ,ATHY,AgBgBR,ClBrER,CWwDI,CXxDJ,CSaQ,AD0CA,AILA,AFQA,CP5BA,CF0BI,CAAC,AODF,AILA,AFQA,CFHC,AILA,AdIA,AgBxCE,ACAG,ACDH,AN6CF,ARLI,AgBgBF,CjBbC,AQ3CH,AMCM,CNDL,CJRT,AUSgB,AZ2BL,ADYI,CUHX,ADMJ,ATHgB,CSGhB,CHDI,CAAW,AVDA,AgBxCE,ACAG,ACDH,AdwCL,CavCS,AbuCD,CQKhB,CI5CgB,AEDA,EPAhB,AD0CgB,AVDA,CWzCA,APwCK,CYvCD,AEDA,AL2CxB,AOasB,CPbtB,CHDe,AOzCC,CNDZ,AD0CqB,AOzCK,AGuDL,CTxDA,AD0CV,AOzCC,CVThB,CAAY,CGkDe,AOzCO,CJ0ClC,ATHoB,CJCZ,AiBxCI,AbuCuB,CAAf,CMEhB,AGCJ,AOaiC,CbhEjC,AHgDsC,AgBgBJ,CVdD,ANFrB,CGhDyB,APiDD,CWzChC,APwCqC,EOxCH,CD0CA,AMzClB,AEDA,CFCc,AEDA,CdwCY,CcxC1B,AL2CZ,CHDyB,AMzCb,CNyCuB,AQ1CL,CPAlC,AD0CA,AVDA,AgBxCmC,CIuDd,CTxDsB,AXyCC,AkBzC5B,AEwD4B,CJvD5B,CEDuB,CFCC,AH0C5C,ATHyC,CcxCrB,AdwCoC,CYvCpC,AEDhB,AL2CsB,ATHe,CYvCrC,CZuCuD,CAA/C,COxCR,CPwC0D,CAAlD,ESGZ,ATHiE,AgBgBJ,ChBhBjD,CSG8B,AOajB,ChBhB2C,AgBgBhE,IhBhBkE,IAAI,CAAC,EAA/D;ADCgB,AOExB,AIJA,AROA,ANJI,AgBxCJ,ACDkC,AZ4B9B,Aa5BJ,AjBoCJ,AkBnCA,AP4CI,ACFA,ATHQ,AgBgBR,EnBpBJ,ESMI,ASzCJ,AP4CI,AQWA,CjBhBA,EOEG,AEGA,CFHC,AIJE,AROF,AU5CE,ACD4B,ACA5B,AN6CF,ARLI,CaxC2B,AECvC,ClBmCA,AkBnCA,CnBwCa,AiBzC4B,AZ4B5B,AJQb,AGIe,CUFD,AFOV,ARLY,CcxCD,CR0CX,CAAW,AIJE,AErCA,ACD4B,CAAC,ACA5B,EZ6CA,AU5CE,AGApB,AfuCY,AgBgBI,CAAC,CVdG,AIJE,AItCA,AjBoCtB,CKSqB,ALTrB,AkBnCoB,Cb4ChB,ANJI,AgBxCgB,CX2BhB,CKcO,AO1C0B,CP0ChB,AO1C8B,AECvD,CTyCe,AO1C0B,AZ4Bb,CAAC,CSUZ,CJIU,AIJI,AGtC4B,AhBoC3D,CaEiB,EbFjB,CSMI,AIJ+B,CItCjB,CR0Ce,AQ1CL,AEwDxB,CAA8B,ENlBM,AItCtB,ER0CoB,AMzClB,AEDa,CFCC,CFqCC,AbF1B,CaEoC,AItC3B,AjBoClB,AmBoBI,CVd6B,AIJE,AErCf,CNyCuB,AQ1CL,AjBoCjB,AmBoBsB,CVdvC,AMzCmC,AEDrB,CJsC6B,CAA3C,AItCqC,CFCrB,EAAwB,AED1B,EFCE,AED0B,CFC1C,EEDc,CAAd,AEwDuC;AjBXvC,AMzCA,AEHA,AD0CA,AIJA,AdGC,AgBvCD,ACHQ,AZ6BA,AJQR,AWSA,ACFH,ATHQ,AgBgBD,GPfR,CHCI,AEGA,CH1CA,CWqDI,CXrDJ,ACuCG,AO5CwC,AL+CxC,CD7CG,AD0CF,AIJE,AEpCA,AX0BE,AOiBJ,CTDC,Ac5CG,AZ4BC,CIzBT,CKmCS,ATVE,AJQJ,CelCG,AfkCF,EaEI,AFOZ,CH1CI,AODS,AX0BE,AHDR,COxBF,AEHS,CD0Cd,ATNa,AWNmB,AQ0BjB,Cf5BG,AOmBlB,AQSgB,CjBZhB,AQ5CiB,AGsCA,AEpCA,EX0BN,CFgBO,AFRV,CUpCa,AVoCF,CEQnB,AEhBsB,Ae4BlB,EXrDJ,CKmCY,CLnCI,AKmCU,ATXD,CSWb,AbFL,CAAP,EQjCA,AKmC8B,CLnCV,AEHH,AKEJ,CLFY,AKEA,GLFR,AGsCkB,CLnCnC,CAAoB,AEHU,CKEC,CPC/B,AKmC8B,AEpCE,CLFf,AGsCuB,CLnChB,AKmCM,CHtCK,EAAlB,AGsCyB,CAA1C,CHtCuC,CAAtB,AKEQ,CLFzB,AKEyC,CPCzC,AODyB,GAAoB,EAAhC,EAAoC,GAApC,EAAyC,EAAzC,EAA6C,CAA7C,CAAb;Ab2CH,AIvDD,AGqDI,AIJA,ARMA,ANHH,AgBvCG,ACHS,AZ6BD,Aa7BR,AjBqCH,AkBmPD,Af/OK,AgBgBG,GpBnCR,ACaA,CSQI,AIJA,AEpCA,AEHA,ACwRJ,EC/NQ,CVdD,AIJA,CPjDP,AGqDQ,AIJA,AEpCA,ACHK,AZ6BD,CCgBH,AU1CA,ACHK,AZ6BD,Aa7BL,ACwRR,CDxRS,ACwRT,CFxRgB,AZ6BD,CKcX,CHrDJ,ADuDa,CAAC,CW7CM,AZ6BD,CEtCf,AUSiB,CHuCjB,ARMa,CQNC,ARMd,ADhBkB,CW1BlB,AX0BmB,Ae4BJ,CdZC,AU1CA,AEHhB,AEyDgB,CdZC,AY7CD,ACwRpB,CZjSI,AOgDA,ATVW,CEtCX,COgDoB,ARMA,AU1CpB,ACHY,AEwRF,CHrRW,ACHK,AZ6BH,Aa7BvB,CDAQ,ACAa,CXTrB,AOgDA,CPhDA,AakEI,CNvB4B,ARWP,AU1CA,CFqCzB,CIxCA,AEyD2B,CblE3B,CWS4B,CXTtB,EYiSI,AC/NN,GdZgB,AY7CpB,CXTA,ADsDoC,CY7CA,CXTtB,ASYO,CAAS,ETZ9B,CDsDA,CCtDmB,AWSnB,CZ6C4C,CAAC,AU1CxB,AEHuB,CXT5C,CDsDA,AU1CsC,CAAjB,CV0C4B,AU1CjD,ETZuB,CWSvB,EAAqD,CXVzD,MWUI;ATIA,AEHA,AD2CA,AJEI,AU1CJ,ACJ6B,AZ2BJ,Ac8PzB,APzOA,ACLH,AOeO,ITzDJ,AD2CA,AMxCA,AJ4CA,CH5CA,CWsDI,CXtDJ,ACwCG,ALjBqB,AOqBrB,CFJC,AMxCA,ACJyB,AZ2BzB,AOqBA,CD/CA,AKGC,ACJyB,CRI9B,AEHK,AL6CK,Aa2OJ,CFzR0B,EEyRvB,CT7OT,AJEc,CG1CV,AQJgC,CRI/B,AQJgC,AEyRzB,CT5PoB,AJiBf,AMEjB,CFFA,CM1CA,CLHA,AKGgB,AJ4CA,AQUA,CTzDA,AQwRA,AC/NC,CdZK,Aa2OL,EHrRjB,ACJgC,CNChC,AKGqB,ACJyB,CNCzB,AMDW,GDIP,ACJyB,AEyRlD,APzOA,AQUI,GXtDJ,AH0CiB,AcYW,CdZK,CG1CX,AEHtB,AL6CiB,CAAb,CcYA,EXtDJ,CAA0B,GOAL,CAAS,CPA9B,CAA0B,EAA1B,EAA8B,AOAT,EAAiB,CAAjB,EAAoB,CACrC,EPDJ;AN2CJ,AItDI,AOgDA,ARMI,ANHR,AgBvCS,ACLG,AZ+BP,Aa9BD,AjBqCR,AkBqPQ,AP1OA,ARPA,AgBiBC,EjBZL,AHHA,EcHI,AIxCA,ANgDA,ARPA,CgBaA,CJlDK,Cb0CT,AWNO,AEpCG,ACPqC,ALmDxC,ARPA,CDKP,AItDU,AOgDF,AG3CqB,ALmDrB,ARPA,CYrCI,ACPJ,ACGC,AjBqCb,CKSkB,AY9CJ,AC0RA,GZlSK,APmDf,AgBvCgB,ChBuChB,AgBvCiB,CV0CE,Aa4OJ,AfjPX,CGjDc,CJsDlB,AWNI,AbHR,AWWQ,CTFJ,AGAsB,Aa4OJ,Cb5OK,CCtDD,AOgDF,AIxChB,CAAiB,CFIT,CV0Ce,ANH3B,AgBvC0B,AGsRJ,Cb5OM,ANH5B,AgBvCY,AGsRW,ChB5OvB,Ae9CI,CAAsB,CFII,Cb0C9B,CWNI,ARMmB,AU1Cf,CV0C0B,AY9CJ,ClB2C9B,EmB+OkB,CZlSA,ADsDK,ANHvB,AmB+OiC,CZlSL,ADsDW,CAAhB,EHAf,AItDU,CYkSA,CZlSe,ADsDW,Aa4OL,Cb5OhB,ECtDL,AWQQ,CZ8CsB,ANHxC,AkB3C2B,CXRG,ADsDhB,Aa4OlB,ChB5OJ,AItDkB,CAAd,CJsDsB,EGA4B,AY9C5B,CZ8ClB,ANHR,CMCqD,AY5CV,CZ+CnC,ANJiB,AkB3CC,CAAtB,Ef8CJ,EAA0C,EHH1C,EAAwC;AGIpC,AM1CA,AEJA,AD6CA,AILA,AdGA,AgBxC8B,ACH1B,ACAJ,AjBlBR,AWkEQ,ACLJ,ATFC,AgBiBG,CnB5ER,CY6DI,CZ7DJ,AGoCI,COlBI,AGwCA,AIxCA,ANgDA,AQUA,EJvD8B,ACH1B,CHwCD,AErC4B,AJ6C5B,CH5CG,ACyCA,AILF,AFQA,CZLC,AgBxC4B,AEH5B,CR6CG,AO7CA,ACAF,CDAG,ALgDT,CDhDQ,ACgDA,ACLZ,AOeY,CT1DC,AD6CE,AVFF,AgBxC4B,AHwCzC,AOea,CpBfC,AgBxC4B,CPCzB,EKoCb,AdGa,AYKA,CH5CG,ACyCA,AVFhB,EAAgB,AkB3ChB,ClB2CiB,AiB3Cb,ACAa,ANgDT,CH5CY,ACyCT,AM1CsB,ACHb,ALgDF,ACLtB,CF3CI,AD6CqB,AM1C0B,AJ6CvC,ACLZ,CF3CwB,AD6CpB,AVFoB,AgBxCa,CEHjC,CDAI,ACAkB,ANgDA,AQUtB,CJvDmD,ACH1B,AG0DF,CT1DvB,CAAyB,AX2CA,AaA7B,CK3C8B,ANgD1B,CKhD6B,CLgDD,ACLhC,CF3CiC,ICgDI,CH5CjB,AWsDkB,CXtDN,ATuCR,CAAgB,AoBepC,CRV4B,CH5CZ,AG4CsB,ACLnC,AOeoC,CF1DjB,ANgDM,CH5CK,AQJR,ACAM,CDAG,AJ2CtC,CF3C6B,AX2CzB,AYK0C,CH5C1B,AEJkB,AE2CF,CbAY,CSvCN,ATuCO,AiB3CpB,CCAH,ANgDtB,CZLA,AiB3CwC,CAAf,ACAc,ANgDS,CZLC,AkB3C3B,CDAqB,ACA3C,CDCQ,ERGQ,AG4CqC,CDhD5B,AS0DzB,CXtDgD,AWsDQ,CT1DT,CAAtB,ACgDuB,CAAU,CDhDR,ACgDF,CH5ChC,AEHZ,EFGmD,AG4CO,AQU9D,EXtDgB,AWsDiD,CXtDjE,CG4CA,EAAoE,MAAI,CQUI,CAAC,ERVD,CAAC,EAAT,CQUH,CAAmB,CRVJ,GAAhF,AQUiE,CAAwB,CRVJ,MAAI,IAAI,AQU5B,CRV6B,AQU9F,ERVqF,AQzB/D,CAqCtB,ERZiG,GAAjG;ATDH,AIvDG,AISK,AD6CL,AILA,ARMI,ANHA,AgBzCA,ACFK,AZ8BT,Aa9BA,ACyRA,APzOA,ACLA,AOiBH,GjBhBD,CIrDI,AGsDA,AQ7CA,ANgDA,ACLA,CG1CyC,CLDpC,AL8CD,AU7CiB,CLDf,AD6CH,AM5CH,AJ+CG,ACLA,CHEC,AILA,AGxCK,ALgDL,ACLA,CNpDA,AISI,AGwCH,AGxCK,AZ8BL,CEvCA,APoDK,AmB8ON,CFzRQ,ACAL,CPAH,AGwCI,AIxCA,ANgDR,ACLA,GI3CgB,AEyRP,CLjPG,ARME,AW9CG,CP6CjB,AILa,EdGM,AmB8ON,CZlSb,AGsDgB,AILR,ARMW,Aa2OnB,CZlSgB,AOiDC,CdGK,AKbtB,Aa9BA,ACyRgB,CDzRG,CDAP,CVTZ,ADuDwB,AW9CE,AZ8BL,CEvCA,AOiDC,AGxCV,AZ+BR,CLYuB,AkB3C3B,CAAwB,CDAM,CHwCb,CPjDjB,AOiD2B,ARMR,AW9CX,CHwCS,AIxCW,GJwCG,ARMG,CAAC,CNHb,CcHd,AdG8B,CAAhB,CcHc,ARMG,ANHnC,EUEJ,GILyC,ARMG,AY9CpB,CAAS,GJwCG,CAAU,CAAV,AIxCZ,EAAgB,CJwCU,AIxC1B,CZ8Ce,AY9CvC,CZ8CuD,CQN/C,CAAR,IRMuC,GAAuB,CAA5C,GAAiD,CAAC,KAAlD,GAA0D,KAAxE;AG1CJ,AEJa,AD8Cb,AILA,ARMC,ANHG,AgBvCJ,ACLkC,AZgC1B,Aa/BR,ACyRI,APzOJ,ACJA,ATJR,IKrCQ,AC0CA,AQ7CA,ANgDA,EDjDa,ANgCL,CMhCM,AD8CX,ALdM,AOiBN,CFHC,AILE,AEpCA,ACL4B,ALiD9B,ACJE,CJzCF,AEJY,AGyCT,AGzC4B,AZgCxB,ADSnB,CKrCa,ATwCK,CiB5C2B,ACC9B,CJwCG,AEpCA,AEJF,ACyRE,AN7OA,CRbK,Ac0PJ,AfjPnB,CQQQ,CI5Ca,ACL4B,AhBqClC,AYQM,CI7C6B,AZgCxB,Ac0PH,CT5Of,AILe,AdGE,AKZE,EW3BF,CPDjB,ATwCoB,AKZT,AQaO,CJzCF,AKqCN,AKiPU,CLjPA,AIxCpB,CJwCA,ATTuB,Aa/BJ,CDDkB,AE0Rd,CVtRvB,AQJmD,AE0RrC,CVtRO,AQJgB,CjB4CV,AKbvB,Aa9BJ,CAAwB,AL4CX,CI7C0C,AE0R1B,AN7OF,CbDG,AmB8O1B,AN7OS,EK5Ce,CTG5B,AOCa,AHwCkB,CGxCN,IHwCW,CbDG,CAAC,AgBvCT,CAAC,CHwCD,CAAU,CAAV,CK5CP,CAAS,CL4CU,CbDb,AaC9B,CbDiD,AgBvCxB,ChBuCrB,AgBvCqC,CAAhB,AEJD,EAAgB,CFIK,AEJrB,CAAxB,CFIa,EAAoC,GAApC,EAAyC,EAAzC,EAA6C,CAA7C,CAAb;AbyCH,AIrDG,AIOI,AD+CJ,AINA,AdII,AgBvCJ,ACNQ,AZiCA,Aa9BR,AN+CA,ACJA,AT/DR,AgB+EI,ChB/EJ,EAAA,CMgEQ,AMzCA,CLPkD,CNkC1C,CMhCJ,AD8CD,AOhDwC,AZkClC,CKcL,AINmB,AEnCnB,AEHE,AL2CA,CNrDD,AOgDmB,AEnCnB,ACLG,AZgCG,Ae6BR,CpBjBO,CUEV,AGDS,CHCD,AINmB,CPhDlB,AFwCM,CExCL,AGsDA,AGDE,ERbM,CExCL,AGsDF,AINqB,AdIf,COpDjB,CSaA,AX2BW,AQaM,CNrDD,APoDI,AgBvCJ,AIwDpB,CbrEqB,AGsDjB,AIN2B,AItCR,CJsCkB,ATRf,CKcL,AINjB,CPhDoB,AGsDpB,AMzCA,AEHsB,CXVtB,ASaqB,CNyCD,CHtDG,APoDI,AaCf,CNrDY,AGsDF,AQ5CI,AL2CA,CGxCD,AHwCb,CNrDZ,APoD8B,CUEP,CHtDK,AMqDE,GHC9B,EAA6B,AGDM,CHCnC,CVFuC,CUEP,AVFQ,CaCV,CGxCT,AHwCmB,CGxCV,AHwCA,CHCM,AQ5Cd,CR4Ce,AQ5CH,CL2CQ,CHC1C,AGDA,CbD8B,AkB1CR,ALuCU,CbGiB,AgBvC5B,AHyCrB,CbFI,AkB1CmC,CFGD,CAAjB,CEHC,CFGmB,CACrC,AEJwC,CAAC,OAAD,EAAU,OAAV,CAAtB,EAA0C,KAA1C,EAAiD,EAAjD,CAAtB;AXTI,AEWJ,AEJK,AD+CL,AINA,AROA,AU1CK,ACNI,AZ8BL,Ac4PA,AC5NX,EAGD,EX7DQ,AC2CA,AINA,AROA,CDnBqB,CM7BhB,AKMA,AXuBL,CM7BM,AD+CH,AINA,AROA,AU1CG,CNyCF,AINA,AROA,AWhDK,CRIL,AEJI,AKMA,ACNE,CVPA,AEWL,CEJD,AMAQ,CP+CZ,AS2OQ,CZjSK,ASaD,AGoRH,CLjPT,AEnCa,CFmCF,AGzCK,CVPA,AOgDJ,AGzCK,CXgDjB,Aa0Oa,CAAT,CLjPS,CPhDO,ADuDJ,Aa0OA,ELjPhB,AEnCQ,CAAc,CFmCJ,AEnCV,ACNI,CHyCZ,AGzC0B,CRI1B,AQJQ,CRIc,AOEI,CV0C1B,CU1CI,EPFJ,CAA2B,KFXX,CAAa,CEW7B,IFXkC,CAAC,QAAN,CAAe,CAAf,GAAmB,GAAnB,GAAyB,CAAC,GAAC,EAAxC,EAA4C,EAA5C,CAAZ;AJsDR,AIrDQ,AIMQ,ADgDZ,AINA,AROA,ANJI,AgBvC0B,ACND,AZoC7B,AajCA,ACwRQ,AN5OR,EVAJ,EOCI,AINA,AROA,AY9CA,AL4CA,ENrDI,AIMQ,AKMkB,CbyClC,AQ/CiB,ADgDV,AINA,AROA,AU3C4B,AHyC5B,CVAP,AOCQ,AINA,AROA,AWjDyB,AJ+CzB,CF/CW,AKMkB,ACNH,AZoCzB,AajCD,ClB0CI,AkB1CH,ACwRG,CZjSC,AUMuB,CVNtB,COgDV,AEpCqC,AGqR1B,CLjPD,AdGE,AgBvC0B,AGqR1B,CLjPD,AdGE,AiB7CuB,Ab0C7B,Ca1C8B,Cd+CzC,AOCI,AGDA,CVAJ,AWLgB,AdGJ,CAAS,AKTjB,CKYgB,AJChB,AY9CA,AL4CgB,CCLhB,AIvCgB,CXTZ,ASY6B,AX8Bf,CE1CG,AOgDJ,AROE,AU3C4B,AGqRvC,ChB5OZ,AWLI,AEpCiC,ACND,AZoChC,CYpC8C,ACG9C,CJuCoB,AdGZ,AiB7CwB,ACGX,ACwRG,ChB5O5B,AWLyB,AEpC8B,ECND,AJ+ClD,CNrDI,AOgDkB,AdGM,COnDC,ADuD7B,EQPA,EPhDiC,AOgDN,CAAC,CXKzB,EWL0B,AdGQ,AkB1CrC,Cf4CJ,AHF0C,EGEN,AOChC,AINA,EAAkC,AdGN,CcH5B,AdG2C,CAAf,EOnDC,CAAS,APmDO,CAArC,AmB8OA,EZjSqB,EAAc,APmDO,COnDrB,EAAiB,CACtC,APkD8C,CAAC,GAAL,CAAS,OAAT,IAAoB,SAAS,CAAC,IAAV,CAAe,CAAf,GAAiB,CAAnF,EAAsF;AGG1F,AIrDS,AIKL,ADiDJ,AINA,AROA,ANJQ,AgBxCJ,ACNI,AZqCX,AcuPW,AN5OR,IVAA,AOCA,AINA,AROA,AOFA,CFlDkD,AKOT,CLPhB,AKOJ,Cb2ClB,AQlDH,ADmDG,AINA,AROA,AU7CH,ACP2C,AJkDxC,CVAC,AIrDK,AGsDL,AINA,AROA,ANJI,AiBhDiB,AJkDrB,CNrDM,AIPuB,AMU7B,CNKJ,CJRY,CJqDZ,AGEA,CQPA,CPhDe,AOgDL,AKiPI,CZjSE,AOgDL,AROA,EIDX,AVHiB,AaEjB,CCLY,AdGM,AmB8OA,Cb1OH,CAAC,CQPhB,AKiPsB,EZjSV,AOgDK,CPhDQ,AOgDP,CPhDN,ADuDD,ANJH,CMIc,ANJI,AmB8OA,CLjPP,AKiPQ,CZjSE,EOgD7B,CRO2B,CCvDnB,AOgDgB,CAAC,AdGjB,EMIc,ANJa,AmB8Ob,CLjPI,AROM,CAAV,Ca0OgB,CLjPtC,CROkC,CQPH,AROT,CQPU,AdGxB,CmB8OkC,Cb1ON,Aa0OO,CLjPV,AROtB,GQPX,CROyC,CQPH,CAAtC,GKiPsC,IAAmB,IAAE,Cb1O3D,Aa0OsC,CAAjB,GAA4C,EAAzD;AhB1OR,AIvDmC,AEUtC,AC6CG,AINA,AROA,ANJK,AgBvCL,ACNI,ACEJ,ACyRQ,AN5OR,AOiBR,IVhBQ,AINA,AROA,AU3CA,AEJA,AL6CA,AOiBJ,GVhBO,AINA,AROA,AOFA,CVCG,AIvD6B,AGuD/B,AINA,AROA,AU3CA,AHyCA,CNtDgC,ASa/B,AEJD,CDFM,ACEL,CXTiC,AGuDtC,CPAU,AOAF,CINR,AG1Ca,CPgDH,AINA,AKiPI,AN5Od,CVCa,AWNb,ADKW,CI/CK,CVP4B,AGuDjC,AINE,AROb,CCxD6C,AOiD/B,CEpCd,AGqRmB,AN5OnB,CVCkB,AGCF,AU3CA,ACNI,AGgER,CbvEkC,AGuD9C,AINe,ADKqB,CM4Od,CT3OL,AUgB2B,CVhB5C,AINA,AEpCA,AHyCA,CGzCqB,AGqRb,AC3NhB,CVhB4B,AINA,AROpB,AY/CA,CJwCA,AIxCsB,Cf8CT,AOAS,CPAK,AWNJ,AEpCE,Cb0CZ,AWNW,CJMD,AQ9CvB,CAA2B,Cf8CI,AWNN,EJMzB,CINA,CJM6B,CPAO,AOApC,AIN8B,AG1Cd,CH0ChB,AG1C8B,ACE9B,CR8CgC,AOhDD,CCEK,Cf8CL,Aa1CV,Cb0CoB,Aa1CX,ACNE,CdgDD,AOAK,CAAC,COhDP,CdgDa,AOA3C,CPAA,Ae9CA,CFIqB,ACNiB,EDMA,ACNtB,CDMK,CAArB,ACN0C,GAA1B,EAA+B,EAA/B,CAAZ;AdiDJ,AIxDQ,AISR,AD+CA,AINA,AROA,ANJC,AgBtCD,ACPI,AZqCR,AcqPY,AN3OR,AOiBR,Ef3BI,EKWI,AINA,AROA,AOFA,CbVoC,CAUpC,AiB/CI,AZqCR,CE9CkD,AGyD3C,AINA,AROA,ADZP,AQUO,CVCG,AQ/CA,AD+CF,AINA,AROA,AU1CE,AHwCF,CNtDI,AUOD,CAAC,CdgDC,COAT,AMzCU,CLNC,AGyCX,CXMY,AWNF,AKgPiB,AN3O3B,CCLA,AEnCa,AHwCF,CF9CG,ALgDd,ADZJ,Ae2BY,CNtBK,AROA,ADZjB,Ae2Ba,CNtBT,CXMiB,AazCA,AGmRe,AN3OjB,CF9CG,AGyCF,AG1CZ,CH0Ca,AG1CE,AGgE3B,CD0N2C,AN3OjB,AOkBtB,CdhBuB,CQPD,AROE,ADZxB,CYrCQ,AE0RI,CF1RgB,CdgDZ,AWNZ,ATLJ,AQU2B,CVCG,CAAd,AWNW,CAAvB,AG1C4B,CJ+CV,CVCY,AWNJ,ADKE,CCL5B,AEnCa,AHwCK,CF9CJ,ALgDK,AU1CM,CLNC,ALgD1B,COF8B,CVCK,AGCF,AU1CpB,AX8BT,CMpCU,CKMgB,AI0DjB,CThEkB,AE8C/B,AOkBc,CjBjBgB,CAAU,AGCF,AU1CzB,AHwCuB,CVCN,AQ/ChB,AMDU,CDOW,ACPF,CNCG,ANoCxC,AQUI,CVC0C,AazC7B,CbyCb,AQ/Cc,ANoCQ,CFOU,AarCO,ACPf,CdiDxB,AQhDwC,AKM3B,CLNC,ALgDmB,AU1CjC,ACPuC,CNCvC,ALgD+C,AWjDvB,CXiDxB,AWjDI,EXiD8C,AcgBrC,Cf5BjB,Ce4BkC,Cf5BQ,ECYiB,QAAL,CAAc,CAAhE,acgBa,CADrB,EAEI,iBAAiB,CAAC,OAAD,EAAU,yBAAV,CAFrB,EAGI,iBAAiB,CAAC,OAAD,EAAU,wBAAV,CAHrB,EAIA;Ab3EiB,AEUjB,AEDQ,ADgDA,AIPA,ARQA,AU3CA,AX8BA,AanCA,ACwRQ,APxOR,ACHA,AOqBJ,IVnBI,AIPA,ARQA,AU3CA,AHwCA,GHEG,AIPA,ARQA,AOHA,CNvDM,AISH,ADgDF,AIPA,ARQA,AU3CA,AELE,ANgDF,ACHA,CNvDM,AEUlB,AOKa,ETfO,EWUD,ANgDF,CL1DM,AYkSD,AN3Od,CNvDgB,AISH,ADgDb,AJCA,AOHW,CK7CG,CJwCd,AM0Ba,CTnEG,AQyRE,ACtNJ,CJ7Dd,AHwCe,CGxCC,AELE,CCwRI,CRzRF,AE8CF,CNvDN,AK0DR,CL1DqB,ASezB,AJ2CoB,CL1DZ,ASea,AJ2CjB,CHhDZ,AUwRkC,ACtNb,CDsNc,AN3OJ,COqBC,CJ7DC,CJ2CC,CCHR,CAAU,CK7Cd,AL6CI,CK7CK,CCwRF,APxOU,CDjDf,AE8Cc,CF9CF,AOCd,CCwRyB,CRzRvB,AOCY,AL6C5B,CM2OQ,CRzRwB,AE8CI,CGxCf,AELP,CFKgB,CLNd,AOCiB,AL6CM,CDGb,CDjDW,AOCvB,ANgD4B,CI3CrB,AJ2CK,ACHgB,CF9C1B,AOCqB,CFKD,AJ2CS,CDjDJ,AKMpB,CLNL,AKMhB,AELc,CPDd,ACiD0B,ACHqB,CK7CL,CNgD1C,AQkBa,CALrB,CRb4D,ACHV,CAAU,AOsBxD,CPtB8C,GAAY,IAAtD,SOsBa,CAAC,kBAAD,EAAqB,uBAArB,CANrB,EAOI,iBAAiB,CAAC,aAAD,EAAgB,wBAAhB,CAPrB,EAQI,iBAAiB,CAAC,aAAD,EAAgB,uBAAhB,CARrB,GAUA;AjBxBQ,AIzD4B,AEXpC,AEqBQ,ADgDH,AIPG,ARQH,AU3CG,ACRI,AZsCP,AapC+C,ACyRpC,APxOJ,ACHJ,CJnER,CAAgC,CCwC5B,AJFA,ADiBA,CFaI,AOtER,AIgEQ,AEnCA,AHwCA,CHGJ,COnDQ,ACEwC,ANiDxC,CTFD,AWNA,ADKA,CVCC,AIzDwB,AIUtB,AGyCF,AEnCA,AHwCA,CNxDyB,ASgBxB,AJ2CE,CDjDC,AQyRA,APxOA,CL3DuB,AUQvB,ACEyC,CJyCjD,AG3CS,CNEE,AOAwC,ACyRxC,CAAC,AN3OZ,CAAW,EVCX,AIzDqC,AIUtB,CJVuB,CSgBtC,AJ2CI,ACHW,CVCC,AazCA,CThBuB,CEX/C,AQmBY,AJgDc,CJnE1B,AQmB4B,AE2RZ,CHnRR,CAAqB,ECRjB,AJgDmB,CIhDE,CdiDzB,AazCyB,CLNd,CAAW,AE8CJ,CIhDd,AJgDwB,CAAV,CF9CP,AMFoB,ENEJ,AE8CG,EIhD1B,CNEO,CMF0B,AJgDrC,CF9CgC,CKMX,AHwCe,CF9CzB,AKMmB,CCR1B,CNEgC,AE8CpC,CF9CW,AMFgC,CNE3C,EKMqB,ACRjB,EDQkC,CAAjB,EAAoB,CACrC;AbyCJ,AI1DQ,AIYR,AGwCA,AdGA,AgBtCK,AEPqC,AC0RlC,APxOJ,ACHJ,AO0BR,IjBzBQ,AQ9CA,AGwCA,ADKA,CK/Cc,CFOT,AEPL,ANkDI,CTFD,AI5D2C,AOsD3C,AEnCG,AHwCH,CVCC,AI5DyB,AOsDzB,ADKA,CN3DA,AIcC,AX2CA,AgBtCG,AJ2CD,CDhDD,AQwRE,APxOA,GI3CI,AGmRD,CLhPX,AEnCa,AGmRD,AN3OZ,CbFA,AaEW,CDGP,AQuBI,CjBzBR,AWxBgC,AF0BjB,AQuBN,CN7BT,CDGe,CF7Cf,AQwRQ,CAAW,ACjN3B,CJlEgB,AJ2CY,ACHF,AO0BJ,CTvEK,AKKG,CLJlB,AKII,CGmRA,CPxOO,CI3CW,AGmRD,APxOA,ACHF,CF5Cf,AC+CO,CI3CX,EJ2CyB,ACHX,CM2OV,AN3OoB,CAA5B,EDGI,ACHgC,EDGD,CCHnC,CO0B+B,CAAC,CTtE5B,CAAS,AC+C2B,IAAL,CAAU,CAAV,ED/C/B,CC+C6C,CD/C1B,CAAnB,EAAsB,AC+CtB,ED/CA,ASsE2B,CTvEZ,CSuEgC,CTrE/C,IAAI,aAAJ,CAAS,OAAT,EAAkB,CAAlB,CSqE2B,CTrEN,ASqEjC,CTpEgB;AR4CR,AQ5CS,AL8Cb,ANLC,AgBvCiC,ACR1B,AZqCP,AanCG,AC0RQ,APxOJ,ACHJ,AO0BR,EdvBI,CNjBA,CGeI,AUDA,EF3CS,AKEqB,ACR1B,ALoDA,CTFD,AQ5CO,AKEqB,AHyC5B,CVCC,AehDE,AL+CF,CF3CQ,AL8ChB,AU5CqC,AJ4C1B,CNAX,AawOY,APxOA,CKpDA,CNMA,AMNC,CCEE,AC0RA,ChB1OX,AgB0OY,AN3OZ,CVCW,AM/CJ,AOKgC,AHyC5B,CGzC6B,AEN1B,ANkDV,AQuBI,CRvBO,AQuBN,EjBzBT,AGEJ,AOHmB,CPGnB,AYlDsB,AC0RV,ChB1O4B,AgB0OjB,ACjN3B,CRvB4B,ACHF,AO0BJ,EjBzBd,Aa1CiC,CAAgB,AGoRzC,CHpRJ,AJ4CW,COwOU,APxOA,ACHF,CPG3B,AWpDQ,ALoDW,CKpDW,EXoD9B,AMAiC,ACHX,CM2OV,AN3OoB,CIjDxB,ACEU,AL+CI,CIjDa,ACER,ANkDnB,EMlDU,ANkDoB,ACHJ,CIjD1B,ALoDA,CMlDuB,CEyEI,CP1B/B,AO0BgC,CdvB3B,AYlDS,CL+CsB,CK/CJ,EZkDpC,AYlDkB,AL+CyB,EPGnB,AYlDgB,CL+CM,EK/C5B,EAA2B,CL+CM,CO0BhB,EAAiB,CP1BN,CAAU,CAApD,wBO0B+B,CAAvC,GACA;AjBzBQ,AI1DI,AIaa,AD6CrB,AILI,AROA,AU7CoD,ACPnD,ACC0C,AC2RnC,APxOJ,ACHJ,EHCJ,EPAI,AWLA,ADIA,ENzDI,AIaa,AKEmC,AENT,ANmDvC,CTFD,AQ7Ce,AGwCf,ADIA,CVCC,AWLA,ADIA,CF5CgB,AC+Cb,CI7CiD,AGqRhD,APxOA,CL5DA,AD4DD,AYnDyC,CXTvC,AG0Db,AM3C8D,CN2C9D,AJEI,AYnDkD,AC2RvC,ChB1OX,AgB0OY,AN3OZ,CVCW,AUDA,CDGP,CEPJ,CAAc,CXKC,AWLA,ADIA,CM2OP,CAAW,ChB1OD,AI1Dd,AG0DR,AILoB,ADIE,CNzDE,AG0DxB,AILI,EAAmB,AK+OX,CL/OR,CXKuB,AI1DnB,AYoSqB,AN3OF,CNzDE,AOgCO,CAqBT,EXKL,AI1Dd,AG0DR,AGDsB,CVCU,AgB0OpB,AN3OoB,CVC5B,AUDkB,CHCtB,CPAwC,CUDN,EVC9B,EUDA,EAAoC,EHC/B,CGDkC,GHC3C,AGD8C,EHCtB,GGD2B,IAAL,CAAU,CAApD;AVEA,AQ9CQ,AD8CR,AJEH,AS5CL,AfuCI,AgBzCQ,AXiCR,AavC6C,AC4RjC,APxOP,ACHD,AO2BR,EpB7BI,AKRA,CCWA,CHAI,AY1CR,AFyCQ,CF9CyB,AKEgB,AEL3B,CFKO,AXkCzB,AavCI,CfkDG,AQ7CK,AKAR,AXkCJ,AQUO,CVCC,AUDA,CO2BH,CDgNO,CT1OD,CAAC,CVHZ,AmB6Oe,ChB1OX,AHHJ,AmB6OgB,ChB1OD,COAC,ALXhB,CKWiB,ALXjB,AQUI,CHCY,CPAG,AOAP,AU0BhB,CDgNgB,CAAW,ChB1OD,AOAA,AK1C1B,AKoEmB,CpB7Bf,AKRA,CLQA,CmB6OY,CT1Oc,ALX1B,CFW2B,AOAA,AS0OE,CT1OH,CAAd,AVHZ,EGGsB,CAAU,AOAA,AVHhC,AmB6OY,ChB1OU,GAAY,AOAE,ALX7B,CKW8B,CAAD,CAAzB,ALXX,CFWI,AOAA,CLXgC,CFWI,EHHxC,CGG2C,GAAG,KAAK,IAAL,CAAU,CAApD;AACA,AI1DI,AIYK,AD8CZ,AING,ACrCR,AfwCQ,AgBvCA,ACRA,AZuCA,AcqPQ,AN3OR,AO2BJ,GV5BA,CPEI,AWNA,AEpCA,AX+BA,AQUA,EF7CS,CR8CN,AQ9CO,AGwCP,ATLA,AQUA,CVCC,AWNA,AG5CE,AZuCF,AQUA,CF7CQ,AX2CP,COvDK,AYoSF,CHpRD,CLJC,AKIA,AX+BR,AQUA,CM2OW,ChB1OX,AI1Dc,AYoSF,ChB1OD,AHHX,AKTgC,CYtClB,AZyCd,CEjDiB,AOoDjB,CdGc,AmB6ON,ChB1OO,AclDE,EVRI,CJ0DH,AHHlB,AgBvCA,CAAmB,ACRE,IdkDE,Aa1CvB,CAAwB,Gb0CN,CAAU,Aa1CA,Cb0CV,GAAY,EI1Db,CAAa,CJ0D9B,AclDiB,CAAa,CdkDM,EI1DD,AUQlB,CdkDsB,AI1DH,ASgBZ,CAAS,ACRE,EdkDO,AclDzB,EDQO,ACRe,EDQA,Cb0CQ,AI1DjB,ASgBN,CThBqB,ASgB7C,CThB8B,AUQb,EdkDyB,AclDI,CdkDM,AI1DH,CJ0DjD,AclDiB,CAAjB,CVR8B,GAAyB,CAAC,GAAC,EAAxC,EAA4C,EAA5C,CAAb;AJ2DJ,AI1DI,AIWa,AGyCjB,AROR,AS7CA,AfyCQ,AgBtCA,ACTA,ACDA,AC6RK,APxOL,ACHA,AO2BJ,IjB1BI,AWNA,AdGA,AkBhDA,ANqDA,ACHA,ENzDI,AIWa,CR+Cd,AQ/Ce,AGyCf,AFQA,ACHA,AO2BF,CjB1BG,AWNA,AEnCE,ACTA,ALoDF,ACHA,CF9CgB,ALgD5B,AYpDY,ACgRY,CJzQxB,AGPa,AC+RD,CZtSK,AaoFJ,CbpFK,ASiBA,AImEJ,ENhCN,ADKA,CCLW,AEnCE,ACTA,ALoDb,AQwBS,CNhCT,AROR,AS7CA,AKsEI,CjB1BI,CWNc,ACtCtB,AENwB,AG4EJ,CNhCG,AEnCE,AImEJ,CNhCb,AI7CA,CAAgB,CXPZ,AUQgB,AG4EJ,CbpFK,CPuDD,CAAC,AkBhDrB,CAAqB,CXPjB,CAAsB,EPuDA,CkBhD1B,CXP8B,AUQd,CDSH,ACTW,ACDI,CFUH,ECTT,EAAa,ACD7B,AE6EgC,CAAC,EJnED,ACThB,CDSiB,CCTC,CjB+Cd,COvDM,APuD1B,AiB/CgB,AG4EpB,CbpFuC,CUQG,AG4EG,CH5EzB,AG4E0B,CH5E1C,CVR0B,ASiBD,AImE7B,CJnE8C,CTjBD,ASiBhB,AImEqB,CbpFpB,EAAkB,ASiBE,CThBtC,CSgBK,EAAqC,GAArC,EAA0C,EAA1C,EAA8C,CAA9C,CAAb;Ab0CA,AI1DS,AIUD,AD+ChB,AILQ,ARxER,ASiCiC,Af0C5B,AgBtCG,ACTA,AZwCA,AOYH,ACFG,AO0BA,CdxGR,CSiCiC,CTjCjC,ANwEI,AY5BA,CTkCI,AWNA,AEnCA,ACTA,AZwCA,AOnER,AC6EQ,CFlDyB,ACqD7B,CDrDQ,CRkDD,AQpDgB,AG8ChB,ATJA,AQUA,CVAC,AI1DK,AIMT,AG8CI,AEnCA,AX+BA,AQUA,AO0BE,CbpFI,AGyDlB,AMxCa,ETjBO,AQaa,AELlB,CdkDP,AY7CyB,AELjB,EH4CR,CPpDgB,AOoDL,CPpDM,AOoDjB,CTJA,AQUA,CCNc,CJKtB,AILuB,AEnCf,AImEiB,CNhCjB,AEnCgB,AX+BA,AQUA,EIlDhB,AG4EoB,CH5ED,CVRP,ASiBZ,CTjB0B,ASiBL,CTjBT,CUQZ,CAAwB,AJkDxB,CN1D8B,ASiBL,AX+BzB,CUnCyB,EAAA,AELG,CVRpB,KQaiB,AKuEW,CLvEX,AKuEY,CAAD,CAApC,CJnEqB,CAAS,ECTN,CAAS,CDSZ,EAAe,CAAf,EAAkB,CACnC,CCVoB,EAAmB,CAAnB,CAAxB;AdmDA,AI3DoC,AIapC,ADhCR,AIwEQ,AEnCK,ACTL,AZwCA,AQUA,CH9ER,EAAA,CP8EQ,AQ9CA,AGwCA,ATJA,AQUA,EGzCK,CbyCF,AWNA,AEnCG,AX+BH,AQUA,CVAC,AI3DgC,AOqDhC,AG5CE,AZwCF,AQUA,CN3DiC,ASkB7B,ETlB+B,AIahC,CAAC,CKKI,CbyCZ,AWNA,AEnCa,CFmCF,CAAC,CPrDiC,AOqD7C,AG5Ce,CVT+B,COqD/B,ATJf,CSIgB,AG5CE,AJkDlB,CN3D+C,AOqD/C,CHxCA,AKKQ,AX+BU,CW/BI,AHyCH,CGzCX,ACTc,CNID,CACjB,CKIsB,EAAtB,AX+BJ,CMnCQ,CE6CR,WIlDkB,CNKd,AML4B,CNKnB,EMLK,EAAmB,GAAnB,EAAwB,ENKtC,AMLc,CAAlB,CNK0B,CAAtB,EAAyB,CACrB;AR8CR,AI7DQ,AIeC,AGuCT,AChCJ,AfmCA,AgBvCkC,ACR9B,AZwCA,Aa3CH,AC+RO,ACjNJ,EpB5BJ,EGII,AWPA,AG5CA,AZwCA,EMnCS,AKGqB,Cb2C3B,AI9DyC,AIgBlC,AGuCP,AEpC4B,AXgC5B,CFWC,AWPA,ATJA,AemCA,CbpFI,AIcI,AKGqB,ELHzB,AIOZ,CIgRY,CnB7OZ,AiB/Ca,CH4CT,AdGJ,AiB/Cc,CH4CC,ARMJ,CQNK,CXOZ,AWPA,ATJA,ESIe,AM+Bf,CjBxBgB,AWPA,ATJA,CSIhB,ATJA,AemCiB,EpB5BrB,CAAA,AiB/CI,AE4RoB,CF5RC,EE4RE,ChBzOvB,AgByOI,CJhRR,AEZI,CFYQ,AfmCZ,AiB/C8B,GjB+C9B,CiB/CkC,EFYlC,EAAqC,OfmCrC,EiB/C8B,CAAS,OAAT,EAAkB,CAAlB,CAA1B;AdoDA,AI7DS,AIcO,AGwChB,ACjCJ,AfoCI,AgBxCI,AXiCJ,AOWJ,ACFI,AO0BI,ERxBR,ETAI,AWPA,ATJA,CWlCuC,CLFvB,ASuEZ,CjBxBD,AQ/Cc,AGwCd,AEpCC,AXgCD,CFWC,AI7DK,AOsDL,ACjCR,AV6BQ,CElDM,AIcS,AX2Cd,AaEA,EN3DO,EQqBhB,AHwCA,ACFa,CCLT,AFOJ,ACFc,CN3DM,AG0DT,AVDP,COzDiB,AQsBjB,CDKgC,ATuBhC,AQSa,AO0BE,CN7Bf,AdCc,AKPA,AQSd,AO0BgB,EjBxBhB,AUFgB,CAAC,CErCjB,CZuCmB,AYvCnB,AfmCA,AKPmB,AOWvB,CL7DgB,AK6DhB,ACFwB,AO0BhB,CbrFsB,CAAlB,CQsBR,CAAA,CFqCyB,EVEzB,AEXc,CU5Bd,AV4B4B,AOWhC,CPXI,CU5BM,CV4ByB,AOWnC,KGvCI,AV4BoC,CQShB,CAAkB,GErCzB,AHuCR,GPX0B,AQS/B,CEtCJ,AV6BiD,AOWjD,CPXI,AQS8C,CDE1B,ACF2B,EAA/C,EAAmD;AN3DtB,AIcrB,AX4CR,AgBxCK,ACRL,AZyCA,Aa5CR,AC+RY,APxOJ,ACFI,AO0BH,IH5ED,AZyCA,CMtC6B,CKKxB,CLHG,AKGF,AXiCH,CEnD0B,AFmDzB,CEnD0B,AP0DzB,AgBxCG,ACRJ,ACHZ,CDGa,AJkDG,CN5DwB,AK8DzB,EI5CK,AGoRH,CHpRI,AXiCb,CAAW,AOWA,CAAC,ACFE,CN5DwB,AYsSzB,APxOF,CL9D4B,AYsSzB,APxOP,CCFU,CIlDjB,AZyCgB,CEnDwB,AUUxB,AE4RC,APxOA,CI5CT,AGoRJ,APxOc,CZJlB,AgBxCsB,AEX9B,CFWY,AGoRgB,AN1OE,CIlDtB,AE4RqB,CnB5OC,AiBhDD,ALoDC,CAAC,CPXvB,AcmPwB,APxOF,CAAL,CPnBe,AOmBzB,CPVP,EY1CA,AE4R4B,APxOC,COwOA,CF5RC,CJkDb,CAAkB,CDED,ACFjB,CAAb,EM0OoB,EF5RxB,ALoD6B,COwOU,APxOC,CKpDA,AE4RpC,EnB5OuC,AmB4OD,CnB5OE,AmB4OD,APxO3C,EOwOI,EAA2C,CnB5OE,CiBhDjD,SjBgD4C,CAAgB,IAAhB,CAAqB,IAArB,CAAD,CAA3C;AGIA,AI9DQ,AIeC,AG0CT,ACtCJ,AfwCC,AgBzC4B,AElCjC,ACuTgB,APxOX,ACFO,AO0BP,CFvGL,CAA6B,ClBwEzB,AYKA,CEJI,ACtCJ,EJJa,AKGgB,AH2CrB,CN/DwC,AIiBlC,AG0CP,AEvCuB,CTpBA,AO2DtB,CXKC,AIhED,AIiBQ,AIIhB,ACDgC,AH2CrB,CE1CX,AF0CY,CF9CA,CKGJ,Cb4CK,CAAC,AgByOI,GhBzOD,AWLb,AK8OiB,ChBzOjB,AY3CJ,CF0CQ,CVCY,AWLA,AK8OI,ChBzOH,AY3CD,CGnCxB,AL6E4B,CK7E5B,Cf8E4B,CY3CxB,AIoR4B,CAAC,GhBzOA,AWLzB,EDII,UVCgB,AgByOA,ChBzOkB,AgByOG,CAAC,IAAI,ChBzO9C,EAA8C,CAAC,AgByOC,CAAN,ChBzO1C,AgByOoB,CAAZ,ChBzO2C;AAC/C,AQhDY,AG2ChB,AExCiC,ACPjC,AZ0CA,AcmPQ,AN1OJ,ICJJ,AG/CA,AZ0CA,CSKC,CH3Ce,AKGiB,AH4C7B,CF/Ca,ANsCd,CSKC,ATLA,CMtCe,AMJf,AJmDG,CVCC,Aa7C6B,ACPhC,AE6RG,AN1OA,ECJA,AExC+B,CFwC9B,GXKK,AWLV,CAAS,ATLb,CSKc,CXKG,AUDb,ECJW,CAAX,AK8OgB,EhBzOE,AWLJ,CAAC,CG/CnB,AE6RwB,CF7RF,CH+CF,CAAhB,CAAJ,CG/CA,CAA2B,AE6RG,CAAC,GhBzOd,AgByOiB,ChBzOC,AgByOA,ChBzOlB,CAAb,EcpDJ,CE6R+B,CAAU,IAAV,CAAe,CAAf,CAAD,CAAN,IAA6B,KAAK,CAAlC,CAAhB;AhBxOJ,AI9DA,AIaI,AG4CR,ACuVJ,AfrVA,AgB3CQ,AGuRC,APzOb,ACDY,AOyBR,EpB3BA,AoB2BA,EN7BI,ACuVJ,CJrYiC,AKGU,CbgDnC,AI9DA,AIWA,AKGiB,AH+CjB,CFnDiB,AG+ClB,AE3CH,CF2CI,CXKG,AQ/CH,AIiYR,AHlVJ,ACDe,CVCC,AYkVZ,AFnVY,CN7DA,CAAC,CIeD,AX4CZ,AaEQ,CbFR,AaEgB,CKtDL,EJkDP,CAAc,CXKV,AWLJ,ADIiB,CDCzB,CELyB,ACuVrB,CZlVwB,AI9DhB,AOyDc,CPzDE,AP2DxB,AoB2BqB,CL0TP,AfrVd,AoB2BsB,CN7BC,CH1Cf,AG0CJ,CPzDI,AIeS,AE8CD,CN7Da,AOyBO,ADoCN,CCJH,ADIX,EVCR,CI9DA,AM6D0B,EbFlC,AoB2BqB,CAArB,CTvEQ,AIiYM,CfrVd,CW5C4B,AE8CY,CF9ChC,AE8CiC,CAAjC,CF9CuB,CACnB,AE6CgC,KAAK,EbFjD,MaE4C,CAAc,CAAd,GAAkB,MAAM,CAAC,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,IAAE,IAAI,CAAC,EAA7E;AVEA,AI9DH,AIeQ,AIiYT,AfrVA,AgB1CA,AXkCA,AO1ER,ACoFY,AOyBX,CR7GD,EAAA,CIwCQ,Eb6CI,AQ/CK,AE8CL,CF9CM,CKEN,AXkCA,CFWG,AQ/CK,AKEP,AH4CE,CVCC,AUDA,CF9CA,ENoCC,CQUL,KVCA,Aa7CJ,CAAgB,IAAhB,CAAqB,AXkCjB,CAAkB,GWlCG,GXkCrB,KAA6B,CAAjC,EAAoC,EWlCf,CAAS,MAAT,EAAiB,CAAjB,EAAoB,CACrC;Ab6CA,AQhDY,AG0ChB,ACwVA,AfrVA,AgB1CK,ACTR,AZ2CO,AcoPA,AN1OA,ICLJ,EXMI,AQhDY,AKGX,AXkCD,AQUA,CF/Ca,AG0Cd,AEvCG,CFuCF,AdGA,AmB4OA,ChBzOG,AQhDY,AX6Cd,AgB1CG,AXkCD,AQUA,CVCC,AYkVF,AV7VE,AQUA,GVCJ,AYkVK,AC/XG,AGsRJ,ChBzOI,AHHF,AgB1CG,AGsRJ,EJyGG,AV7VR,CSKJ,ATLe,EFWE,AUDb,CbFA,CeqVY,CAAC,AC/XT,AXkCY,AQUA,CG5CE,ChB0CF,AgB1CZ,EXkCO,CFWH,Aa7Cc,AXkCD,CFWC,AEXX,CFWH,AYkVZ,AfrVyB,AgB1CrB,AH4CA,CM0OA,CdpPyB,AcoPH,ChBzOI,AEXA,GAA1B,AcoP0B,EdpPK,CFWC,CAAC,AHHjB,CGGhB,AgByO8B,CAAC,ChBzOK,AHHF,AKRE,CLQpC,GKR+B,CFWU,AHHF,AKRE,CAAV,AcoP/B,EAAwC,CnB5OG,AKRE,CLQD,AKRE,GFWV,AHHG,AKRvC,AcoP4C,ChBzOM,AgByOL,ChBzOT,GAAkB,AHHF,GmB4OZ,EnB5OiB,CGGG,AgByOL,ChBzOM,AgByO7D,ChBzOA,CgByO0D,ChBzOM,CAAhE,EAAmE,CAAnE,CgByOA,ChBzOsE,AHH/B,CmB4O2B,EnB5OK,CGGC,IAAI,AHHA,CGGC,EAA7E,IgByO8E,GnB5OlF,EAA4F,OmB4OtB,GAAwB,GAA1F;AhBxOA,AI9DJ,AIaQ,AG2CR,ACwVA,AfrVI,AgB3C0B,AXmC1B,AcoPH,AN1OG,AOwBZ,IN7BQ,CH5C2B,CRkDvB,AYkVJ,AChY8B,AXmC1B,AQUA,CF/CI,AG0CL,AExC4B,CFwC3B,CXMG,AI9DF,AQgZF,AChY8B,AXmC1B,AQUA,CVCC,AYkVJ,AV7VI,AQUA,AOwBN,CN7BF,AdGS,CcHD,CPxDC,AOwDT,CXMI,AI9DM,AQgZV,AKzTR,CN/BmB,AExC4B,AJ6ChC,CELP,AExCwC,AXmCpC,CEnDS,AQ6YH,AflVN,AKRW,CEnDf,AOwDc,AC0Vd,AFrVI,CCLJ,ADKiB,CN7DD,CAAC,AOwDA,CAAjB,ATLoB,EEnDA,AOwDA,AExCa,CThBjC,ASgBiD,AH6C1B,CRVR,AQUS,CN7DD,AFmDE,AQUF,CN7DC,AOwDF,ATLP,AQUX,EN7DJ,AM6D4B,CRVC,CEnDD,AOwDF,ATLI,CSKH,EAA3B,ATLI,AQU6B,ERVE,CAA/B,KQUwB,CAAc,CAAd,GAAkB,MAAM,CAAC,CAAP,GAAS,IAAnD,EAAyD,KAAK,QAAL,CAAc,CAAd,GAAkB,MAAM,CAAC,CAAzB,GAA6B,EAAtF;AVEA,AI9DA,AIaK,AG2CT,AdGC,AgB5CG,ACPZ,AZ2CY,AQUH,ICLD,CE1CyC,CLDhC,AKCY,AXqCjB,CMtCM,AG2CP,AE1CH,CF0CI,CH3CQ,AKjCqB,AC4BzC,AZ2Ce,CEnDG,ASkBV,AXiCQ,EMtCA,AG2CR,IPxDgB,AFmDZ,CAAW,EEnDI,GFmDC,CEnDG,CUQ/B,EZ2CuB,CAAU,CAAV,GAAc,GAAzB,EAA8B,KEnDf,AFmDoB,CEnDN,GFmDC,CAAU,CEnDN,AFmDJ,CEnDK,EFmDS,CAAC,GAA7C,EEnD6B,CAAe,CAAf,GAAmB,IAAnB,GAA0B,CAAC,GAAC,EAA1C,EAA8C,GAA9C,CAAf;AACA,AIYa,AG4CjB,ACyVA,AE1aR,AZ4EY,AcoPJ,ACjNR,CH/GA,CAA8B,EHiFtB,EPxDI,AIYa,ANuCb,CMvCc,AG4Cf,CAAC,CH5CgB,ANuCb,AemCN,CL2TK,AV9VE,AcoPJ,EZvSM,CAAC,COwDX,CCyVW,AI1GF,CdpPL,CS/B4B,AT+BjB,CSOf,ACuVc,CI1GD,GFhUrB,AZ4E4B,CEnDhB,AQiZc,AE1a1B,AEgUuB,CZvSO,AQiZH,EV9VJ,CAAU,CEnDrB,AFmDW,AcoPI,CZvSQ,AYuSP,ACjN5B,CAA8B,CfnCO,EEnDE,AQiZjB,CAAe,AV9VzB,CemCZ,CfnC0C,AcoPrB,CdpPT,AemCyC,EL2T/B,AI1GgB,CJ0GK,AI1GnC,EAAiC,GJ0GjC,CRjZ2B,CAAS,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAAvB;AJ+DH,AQnDO,AX+CR,AgBzCA,AXkCI,AcoPA,AN1OJ,AOyBJ,KT7E+B,CAAvB,AN0CA,AemCJ,CTlFqB,CAArB,AKaM,AGsRF,CnB7OC,AKPE,AQUF,CRVG,CWlCC,AIqEJ,EDiNG,AN1OC,CG5CG,AGsRH,AN1OC,ERVN,AemCM,CPzBG,CG5CG,AH4ChB,EAAgB,AOyBpB,CPzBqB,COyBD,CpB5BhB,CaGoB,CM0OhB,CnB7OkB,AmB6OD,GN1OI,EG5Cb,AGsRR,CHtRmB,AGsRI,MAAvB,CHtR0B,CAAC,CGsRK,CN1OhB,CAAmB,GM0OnC,CnB7OuC,CAAC,AgBzCrB,CAAiB,AH4CxC,CG5CY,CH4CmC,CG5CJ,AH4CK,CbHC,CaGjD,EAAoD,GG5CF,CAAC,GhByCP,CAAgB,IAAhB,AgBzCD,ChByCsB,AgBzCL,CAAjB,GhByCC,AgBzCoB,ChByCrB,CAA3C,AgBzCY,EAAwD,EAAxD,EAA4D,CAA5D,CAAZ;ATjBI,AIcJ,AG4CA,ACuVA,AftVH,AgBzCG,AXkCC,AcoPG,AN1OA,AOyBR,GpBlCA,CWvCI,AG4CA,AExCA,ETlBI,AIcF,ASyEA,CTzEC,AG4CA,AExCA,CFwCC,AExCA,AGsRA,EJyGA,AFnVI,AOyBF,CbvFE,CAAC,AO0DT,CK8OQ,ACjNC,CDiNA,CJyGA,AEzYF,CJsDO,CFhDd,CKIA,CD+Xa,AC/XE,AH4CE,CFhDD,AImYZ,CJlYA,CJfA,CAAgB,ASkBpB,CD+XkB,AC/XE,AH4CE,CF/Cd,AQyRJ,CAAiB,CZxSjB,CAAqB,ASkBD,CD+XD,EIzGnB,CJyGsB,AIzGC,EZxSvB,EQiZwB,AIzGxB,CN1Oa,CF/Cb,AE+CgC,CF/CvB,AQyRqB,AN1OjB,CM0OkB,AN1O/B,CEmV4B,AC/XZ,CD+Xa,AC/XJ,GGsRK,CRzR9B,AKGgB,AGsRhB,ERzRkB,AKGa,CLH/B,AIkYsB,AC/XN,ELHK,AKGa,CD+XG,AC9XrC,CLJA,AIkYJ,CJnYgB,CImY4B,CJjYxC,IAAI,WSuEZ,ETvEQ,CAAS,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAFY,CAAhB;ARkDA,AWLA,ACuVI,AC/XC,AGsRJ,AN1OG,AOyBR,MJrES,AH4CD,AOyBF,CJrEI,CFwCA,CXKD,Aa7CG,AH4CD,CAAC,EEmVE,AC/XC,AIqEH,CjBxBC,AWLE,ACuVA,AC/XC,Cb6CF,CiBwBC,CN7BG,ACuVC,CZlVF,CAAb,CUDI,CVCY,AWLA,AM6BA,CjBxBC,AYkVG,AC/XZ,AIqES,CJrEI,AH4CD,CG5CZ,Cb6CY,AWLA,ACuVC,CDvVA,ACuVP,CC/XW,CFwCX,CExCV,AIqEO,CjBxBc,AYkVE,AK1TF,CN7BC,ACuVtB,AK1TO,CPzBP,COyBwB,GN7BG,OXKX,AWLpB,CXKuC,MAAvC,EAA+C,CAAC,AiBwBrC,CAAsC,CjBxBjD,EAAoD,CiBwBzC,CAAf;AjBvBQ,AIhEA,AIiBJ,AX2CJ,AgB1CiC,AXmC7B,AcoPH,AN1OO,EbHR,EW3CI,CQuPJ,CZxQQ,ASkByB,AH6CzB,CG7C0B,ELD1B,AKC4B,AXmC3B,AQUE,CVCC,AQ/CH,AE8CG,CN/DA,CAAC,CP4Db,AgB1CwC,ChB0CxC,AgB1CyC,Eb8CvB,CEXd,CAAc,CFWG,CQ/CjB,CAAgB,ANoChB,AQUI,CG7C4B,ChB0CpC,AgB1CkD,Cb8CxB,AHJ1B,AgB1CoC,AH6CT,CF9CvB,CAAqB,CKC6B,CTlB9C,CAAsB,AM+DE,CbHhC,CW3CI,EJjBI,AIiBwB,AX2ChC,CO5DmC,AM+DR,CAAW,EVCjB,CAAmB,CAAnB,AUDM,CVCnB,AIhEA,AIiBJ,AE8CuC,CAAhB,CF9Cc,EAArC,CX2CJ,AaGgD,SAArB,GAAiC,SAApD;AVEA,AIhEH,AO0DD,ACuVI,AfrVJ,AgB3CI,AXqCJ,AQSI,AOwBR,IfjCI,CEjFiC,AS2CK,CbgDlC,AI9DJ,AM6DI,CG7CA,AXoCD,AeiCF,CL0TG,AV3VA,CFUG,AWNF,ADKE,CVCC,AUDA,COwBH,CAAC,CN7BG,ACuVD,CDvVE,ACuVD,AV3VT,CAAW,AeiCF,CfjCG,AeiChB,CN7BiB,CAAb,AM6BY,CjBvBR,AUDA,AOwBS,CN7BG,CAAC,ATJA,CFUG,AUDA,AOwBJ,CPxBZ,CCLgB,IM6BE,CN7BG,ATJzB,AeiCuB,EjBvBnB,CYiVA,CAAwB,CAAC,CK1TjC,CN7BI,CCuVgC,AK1TD,CN7BG,ACuV9B,AK1T4B,CN7BG,CCuVA,AK1TvC,CN7BI,ACuVoC,CK1TA,CN7BG,CCuVA,CAAnC,EAAsC,MAAtC,EAA8C,WAA9C;AZhVA,AQ9CJ,AGwCI,AdEJ,AgB3CK,AXqCL,AcpEA,AN6EI,AOwBJ,IfjCA,AcpEA,EhB8EI,AWNA,AEzCC,AH8CD,CG9CE,AXqCH,CMpCG,ANoCF,AeiCE,CjBvBC,AWNA,AdEF,AgB3CG,AH8CD,CVCC,AWNA,AKxEF,AN6EE,CM7ED,CdoEP,AeiCU,CpB3BD,AgB3CG,CLCA,AX0CF,AgB3CG,CXqCF,AeiCE,CDrGb,CRgCe,AX0CF,CAAb,CcFI,ATJW,AcpEA,AN6EX,CbHY,AKNA,CFUZ,AQ9Ce,AX0CF,CgB3CT,AG/BR,CH+BsB,AIsED,CjBvBE,AHJH,AgB3ChB,AIsEkB,CfjCX,CAAW,GFUM,AHJH,EKNE,GFUJ,CAAW,AEVZ,CAAU,CAAV,AeiCT,CAAuB,CjBvBb,AQ9CR,AX0CK,CGImB,AQ9CV,AX0CO,AKNA,CFUb,CiBuBV,CTrEE,ANoCJ,AeiCX,EjBvB4C,AQ9CV,CX0ClC,CKN2C,CMpC5B,AX0C6B,CW1C5C,AX0C6C,EAA7C,EAAiD,CGI1B,GAAiC,IEVxD,KFUI;AACA,AQ9CJ,AGwCI,ACuVA,AfrVA,AgB5CqB,AXsCzB,AcpEA,AN6EI,AOwBJ,ITrEA,ANoCA,AcpEA,ACqGA,EjBvBI,AWNA,AE1CqB,AH+CrB,CG/CsB,AXsCvB,CAAC,AeiCA,CjBvBG,AWNA,AE1CqB,AH+CrB,AOwBF,CjBvBG,AQ9CF,AGwCE,AdEE,AmB1EJ,AN6EE,CF7CD,AQhCA,CJ+ZC,CAAC,ACjYuB,AH+C5B,CbHU,AgB5CmB,AH+CrB,ECLR,ACuVQ,CDvVG,ACuVX,AfrVa,AKNjB,AcpEA,CLwEI,AM6BJ,CjBvBI,AYiVW,AFlVE,CCLC,ATJF,AcpEA,CRgChB,AGwCmB,AM6BF,CjBvBG,AQ9CF,AGwCd,AdEkB,AgB5CM,CbgDxB,AahDsC,AG9B1C,CH8B4B,CIuE5B,CTrEA,ANoCA,CMpCuB,AKFuB,AH+ClC,CAAc,CAAd,EF7Ce,CX0CV,AaGa,CbHG,CAAhB,CAAb,GaGgC,CAAC,CAAjC,EAAoC,EF7CjB,CAAS,EAAT,AE6CsB,EF7CT,CAAb,CAAvB,IE6CwC,CAAc,CAAd,GAAkB,MAAM,CAAC,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,IAAE,IAAI,CAAC,EAA7E;AVEA,AIhEJ,AO0DI,ACuVI,AClYJ,AXuCJ,AcnEA,AN4EI,AOwBJ,IfjCA,CWzCsC,CbmDlC,AWNA,AE7CgB,AHkDhB,CGlDJ,AXyCG,CEtDG,AFsDF,AcnEE,ACoGA,CjBvBC,AWNA,ADKA,CVCC,AWNA,ACuVA,AFlVA,EN/DE,AYbA,ACoGA,EPxBN,CN/DS,AQiZD,AI9ZC,ACoGA,CN7BT,ACuVS,AI9Zb,CLuEe,ATJf,CSII,CXMA,CWNc,ATJF,CSIG,CAAD,CM6BG,CAAC,CN7BC,GAAL,ATJlB,GSI6B,CAAzB,ECuVI,CAAwB,CAAC,CK1TpB,CAAuB,CL0TF,CAA1B,EAA6B,AK1TxB,CAAb,GL0TyC,CAAC,GAAL,CAAS,CAAC,GAAC,CAAX,EAAc,CAAd,CAA7B,EAA+C,MAA/C,EAAuD,UAAvD;AZhVJ,AIjEU,AIkBd,AGyCI,ACuVC,AftVD,AgB3CJ,AXsCA,AcnEA,AN4EI,AOwBJ,ITtEA,AKDA,AXsCA,AcnEA,ACoGA,EjBvBI,AIjEU,AO2DV,ADKA,CG/CD,AXsCA,CWtCC,AXsCA,AeiCA,CjBvBG,AQ/CH,AGyCG,AKvEH,AN4EG,AOwBF,CjBvBG,AQ/CH,AGyCG,AdCA,AmBxEH,AN4EG,CNhEW,EJiEf,AIjEiB,CJiET,EWNR,ADKA,CbJW,AmBxEf,CH6BA,AIuEA,CjBvBiB,AahDF,CLCf,ANqCA,AcnEe,CR8BC,AX0CG,AoB4BF,CpB5BG,CgB3CpB,AXsCmB,CWtCC,AG7BpB,CR8BA,ASsEA,CTtEqB,CR+CT,CAAc,AahDF,CbgDZ,EEVZ,CFU8B,AQ/C9B,EX0CQ,IGK4B,CAAC,AHLA,CGKjC,CahDgB,CbgDoB,AahDX,IAAT,CbgDyB,CahDV,ChB2C/B,AgB3CgB,EhB2C6B,AgB3CX,CAClC,Gb+CoC,CAAc,CAAd,GAAkB,MAAM,CAAC,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,IAAE,IAAI,CAAC,EAA7E;AACA,AIlES,AO6DT,ACsVH,AftVO,AgB1CJ,AXqCJ,AclEA,AN2EC,AOwBD,IfjCA,AeiCA,CbzFA,CJkEI,AWLA,CTLD,CLKK,AKLJ,AclEE,ChB4EC,AWLA,CXKC,AWLA,AM4BF,CAAC,CpB5BK,AoB4BN,CpB5BO,AoB4Bb,CjBvBI,AiBuBM,EN5BN,ATLJ,CSKe,ATLF,EclEI,GLuEb,ATLc,AclEE,GnBuEZ,AoB4BR,CDnGwB,ACmGF,EfjCtB,EAA0B,AeiC1B,CfjCA,EAA6B,CAA7B,SclEoB,CAAa,GAAb,EAAkB,EAAlB,EAAsB,KAAtB,EAA6B,EAA7B,CAApB;AhB6EI,AIjEJ,AIiBA,AG2CC,AdAI,AgB3CA,AXuCL,AcnEA,ACmGA,ITvEA,ANuCA,AcnEA,ACmGA,EjBvBI,AahDC,CAAC,AXuCH,CExDG,AFwDF,CFSG,AQhDH,AKAI,AG5BJ,ChB4EI,AQhDH,AQ5BA,ACmGC,CAAC,CJvEI,AIuEL,CJvEM,AIuEZ,CAAU,CfhCV,CFSI,CIjEW,GAAG,CSiBV,AG5BR,CH4BqB,CAAb,CTjBc,AYXH,CCmGnB,CTvEA,AKAyB,AIuEH,CTvEA,CKAlB,EIuEJ,CTvEA,CAA2B,GQ5B3B,GR4BA,EA/CiC,CJ8Bf,AImBlB,CJnB+B,GAAb,EAAkB,GAAlB,EAAuB,KAAvB,EAA8B,EAA9B,CAAlB;AJkEC,AYiVD,AftVC,AgB5C4B,AXwChC,AcnEG,AN2EA,AOwBH,Gf7DD,EL0BA,Ce6VI,AfpVA,AgB9C6B,CAAC,CG3BxB,AN2EF,CEkVD,AClY6B,CDkY5B,AClY6B,EHgDzB,EGhD6B,CAAC,AHgD3B,CM3EG,AN2Ed,CEkVA,EI7ZiB,CJ6YP,CAkBV,ECpYiC,AG3BZ,CH2B0B,CAAd,GAAkB,GAAG,CAAC,CG3BtC,CAAQ,GAAR,EAAa,CH2BqB,CAAa,AG3B/C,CH2BgB,CG3BC,EH2BkC,AG3BnD,EH2Be,AG3BM,EAArB,CAAjB,CH2BwE;AThBxE,AO4DA,AdGA,AgB/CI,AG1BJ,AN0EA,AOyBP,IbzFO,AO4DA,AKtEA,CHwBsC,EF8CnC,AE3CC,CF2CA,ADIU,CNhEV,CAAC,EYVG,AN0EU,CM1ET,ELsET,ADIqB,CAArB,ECrDgC,CAmDhC,CP9DA,CAAgB,EYVhB,CAAoB,CZUpB,CAAqB,EYVrB,CAAyB,IAAI,EZU7B,WYVyB,CAAS,WAAT,EAAsB,CAAtB,CAAzB;AhB6EA,AQhDA,AIkYA,AfrVA,AgB/CK,AX0Cb,MW1Ca,CAAC,CbkDF,AQhDE,CKFE,AX0ChB,CU0VY,EZlVI,CalDI,AX0CpB,CW1CqB,CbkDF,AYkVF,CZlVT,GYkVa,CJlYK,EKFV,CLEa,AIkYJ,ACpYK,CAAlB,GLEqB,CIkYJ,CAAC,OAAT,GAAmB,CAAhC,EAAmC,EJlYd,CAAa,GAAb,EAAkB,GAAlB,EAAuB,KAAvB,EAA8B,EAA9B,CAArB;ARgDA,AIjEA,AIkBA,AG2CA,ACuVI,ACrYqB,AXxDjC,Ac8BQ,AN0EA,AOyBR,CfjIA,EAAA,CSsGQ,AKxEA,EH0ByB,CF8CtB,AE9CuB,CbkDZ,AIjEV,AIkBE,AG2CF,ACuVA,CCrYwB,AG1BxB,AN0EC,CGhDwB,AG1BxB,EhB4Ea,AWJlB,CCuVQ,AFrVC,CEqVA,ACrYwB,AHgDvB,CVEW,AalDa,CbkDlC,AQ/Cc,CE6CD,CAAb,CN/De,AIkBE,CQ7BjB,AN0EgB,AOyBJ,CDnGI,AN0EC,AOyBJ,CbxFK,CIkBG,AKHQ,CTf7B,ASe2C,AHgDvB,CEqVhB,ACrYyB,AG1B7B,CJ+ZqB,AI/ZA,EH0B0B,CHgDtB,AOyBJ,CAAC,CL4TlB,ACrY8C,CDqYvB,ACrYwB,EG1BnD,EN0EA,EEqVI,AFrV8B,CAAC,CF7ClB,AKH8B,CLGjB,AIkYM,ACrYwB,AHgD5D,CGhD6B,CHgDU,CF7CtB,ASsEJ,CJzEmD,AIyE3B,CTtEF,AIkY/B,CCrYwB,ELGX,EAAuB,AKH4B,GIyEvD,CAAD,CTtEK,ASsEzB,ETtEuD,EAA9B,CAAjB;AJjBA,AIkBA,AG2CA,ACuVI,ACtYA,AHiDA,ICFJ,CElDsC,CAAlB,CFkDjB,AElDH,CTXI,AIkBE,AG2CF,ACuVA,EFrVM,GEqVF,CDvVR,ACuVS,CDvVE,ADEI,GF7CC,AE6CE,CN/DH,CO6DC,CH3CG,CJlBD,CM+DK,CN/DvB,CIkBuB,AG2CZ,ACuVP,CDvVkB,ACuVD,KDvVV,ACuVP,CAAuB,CFrVT,CCFY,ADEI,CAAhB,CEqVd,AFrVA,GCFJ,ACuVkC,CAAC,EJlYhB,CAAa,EIkYE,CJlYf,AIkYf,EJlYiC,GAAlB,EAAuB,KAAvB,EAA8B,EAA9B,CAAnB;AR+CA,AIhEA,AIkBA,AG2CA,ACuVC,AftVD,AgB/CA,AX0CR,AcpEQ,ANyEI,ICDJ,AE9CA,AX0CR,GSIW,CP7DC,AIkBE,AG2CF,AdCE,AmBzEA,ChB2ED,CUFiC,CG/C/B,AX0Cf,CW1CgB,CbiDC,CAAC,AQ9CE,AQ7BA,CNyE+B,EVE9B,AQ9CE,AG2Cf,AKxEe,ChB2Ef,AUF8C,CN9D/B,CJgEC,AHFE,AmBzElB,ChB2EiB,AQ9CE,AG2CF,CP7DC,AO6DlB,AE9CA,ChB+C6C,AgB/C1B,AH+CgC,CVE/B,AIhEpB,CP8DA,EgB/CA,CAAwB,CbiDC,GajDG,CH+CkB,CAAgB,CAAC,CVE/D,EAAkC,AUFgC,CVE/B,CQ9CpB,CR8Cf,AQ9C8B,ER8CS,AUFgC,CF5CxD,CKHS,CLGW,AKHF,GLGlB,AKHS,CH+CsB,CF5CN,AKHF,AH+ClC,CG/CoB,CLGT,AKHf,CLGA;AR+CI,AIhEJ,AIkBA,AG2CA,ACuVH,AftVG,AKNR,AclEQ,ANwEI,ICDJ,CCgUJ,CF/TQ,CCDD,CP7DC,AIkBE,AG2CF,AdCE,AmBxEA,EhB0EI,AUFF,IAAI,CVEG,AQ9CF,AG2Cb,ADCa,CMxEC,CZUD,CJgEK,AQ9CF,AG2CF,AdCE,CmBxEC,CZUD,AM8DE,CbAC,AaAA,CN9DnB,AIkBoB,CR8CG,AHFvB,AmBxEqB,ELuErB,ODCa,CVEK,AUFa,CVEG,CAAhB,CAAd,CgB1Ea,CAAY,ANwEhB,CAAwB,CF5CrB,CAAc,EE4CjB,CF5CG,AQ5BC,ANwEyB,EF5CP,AQ5BE,GR4BrB,AQ5BC,ANwE8B,CF5C/C,AE4CgD,CMxEN,EAAzB,EAA6B,CAA7B,CAAjB,CNwEa,IAA+C,CAA/C,GAAmD,CAApD,KAA0D,KAAK,CAA/D,CAAR;AVEA,AQ7CJ,AG2CA,AE9CA,AXwCR,AcjEQ,ANwEI,IF5CJ,AG2CA,AE9CA,EH+CI,CCDD,CAAC,AKvEE,CHyBF,CbgDkC,AQ7ChC,AKHD,AXwCb,AQOgB,CF5CD,GE4CK,CVC+B,AUD9B,CRPrB,AcjEsB,CLuEd,CXE8C,AERtD,CcjEyB,CHyBjB,AH+CkB,CF5ClB,AKHgB,AH+CG,CF5CD,CR6CiC,AgBzE9B,EHyBrB,CLGA,AKHqB,CLGE,IAAI,CE4Cd,CVCiC,AahD9C,AGzBiB,ANwEc,CVC+B,AgBzErC,ChByEsC,AahDjC,GbgDoC,AUDrD,CAAwB,CMxEpB,EHyBjB,AGzBiC,ChByEsC,AUD1D,CF5CU,AKHgB,AH+CG,CF5CV,AQ5Bf,EAAqB,CHyBtC,CGzBiB,ANwE8B,CVCD,AahDD,AH+CG,CVC5C,AgBzEsC,CAAzB,CAAjB,CHyBA,EAAmD,CLG5B,CE4CV,CF5CiC,CAAvB,AKHvB,ELGiD,AKHQ,AH+CG,CF3CxD,AE2CS,GG/Cb,AH+CgE,CAApD,CG/CmD,GAA/D,CH+CsE,CG/CF,IH+CO,CAA/D,CG/CZ,AH+CI,EG/CwE,MAA5E,EAAoF,MAApF,EAnDiC,CAqDjC;Ab+CI,AIhEJ,AImBK,AG2CL,AC7DA,Af6DA,AKPc,AchEd,ANwEC,ERRa,ESOd,AC7DA,EZ+DI,AQ7CC,CAAC,AG2CH,CAAC,AKvEE,CZSD,AImBG,AX2CH,CGEG,AY/DF,CAAC,AVsDO,CAAA,CEvDL,AP8DA,CGEG,AIhEF,AO8DV,AdAU,CGEG,AWFF,CAAX,AC7DA,AIVc,CZSD,AP8DA,CO9Db,AO8Dc,AdAd,CcAe,AC7DA,AVsDD,AchEG,ChByEC,AIhEF,AP8DA,CGEG,AIhEF,AImBG,AX2CH,AKPH,CMpCO,AG2CL,AC7DhB,CIVqB,CZSD,AP8DA,CO9DpB,CO8DA,CP9DuB,AFuDT,CEvDU,AFuDV,CLOW,CO9DzB,AImBQ,CAAsB,CR6CjB,AIhEe,AImBxB,CR6C2B,KAAlB,CAAwB,EgBzEpB,CAAc,ChByElB,CAA6B,CHFtB,CAAsB,EmBvEzB,ChByE8B,CAAC,AgBzET,EnBuEvC,CmBvEiB,CnBuEiC,AmBvElD,CnBuEmD,EAAnD,CGEa,CHF0C,GGEK,CAA/C,GAAmD,CAApD,KAA0D,KAAK,CAA/D,CAAR;AACA,AIhEA,AIkB6B,AG4CjC,AC7DA,Af6DI,AmBtEJ,ILsEA,AC7DA,AITA,EhBwEI,AQ9C6B,CAAC,AG4C/B,CAAC,CH5CgC,CR8C5B,AIhEE,AQCJ,Af6DI,Ce7DH,CITC,CAAC,ChBwEG,AIhEE,AO8Dd,AdAc,CGED,AQ9C6B,AG4C/B,CH5CgC,AG4C3C,CP9DiB,AQCjB,Af6DiB,CcAH,CAAC,CXEG,AWFJ,AC7DE,CZ+DG,AIhEE,CP8DC,CcAH,AC7DnB,AITA,CR0BoC,AIpBH,AINb,CR0BgC,AIfpD,CD2DA,EKtEA,CAAyB,GhBwEZ,CAAkB,AgBxEF,KhBwEhB,AIhEI,AP8DA,CGEoB,AIhEP,AP8DS,CAAtB,CAAb,EGES,CAA6B,CIhEN,CAAC,AYRZ,CAAS,EhBwEa,AIhET,CJgEU,CIhE/B,EAAyB,EAAzB,AYRQ,CZQrB,CYRwC,ChBwE/B,AgBxEY,EAAsB,CAC3C,ChBuEwD,CAA/C,GAAmD,CAApD,KAA0D,KAAK,CAA/D,CAAR;AACH,AIhEG,AIiBA,AG6CJ,AdAI,AgB9CJ,AXsCJ,Ac9DS,ANsEL,ICAA,CH9CiD,CJhB7C,AIgBmB,AQxBlB,CRwBL,AG8CG,AKtEG,CLsEF,AE9CE,AH8CA,CMtEE,CnBsEA,CKRZ,CWtCc,ChB8CC,CcAX,CE9Ca,AGxBC,CnBsEW,AaAX,CN9DC,CAAC,AP8DZ,AKRR,Ac9DqB,CHwBA,AXsCT,Ac9DJ,ANsEa,CRRrB,EEtDQ,AFsDe,CEtDE,AFsDzB,AQQyB,CAAC,CRRQ,EEtD1B,EFsDR,AQQqB,CAAW,CRRgB,GQQZ,CAAC,EG9CpB,CAAc,AXsC/B,AQQgC,CAAS,CRRsB,EWtC5B,CAAC,CH8CU,IAAL,CAAU,CAAV,CG9CV,CAAc,CAA5B,AH8CsC,EG9CP,GH8ChB,CG9CoB,CAAC,AH8CS,KAAK,GG9CnB,CAAc,AH8CA,CG9Cd,AH8CwB,CAAV,EG9CI,CH8CU,CG9C3D,EAAqD,AH8CtC,CAAX,CG9CJ,AH8Cb,CG9CA;ATdI,AIiBJ,AG4CA,AC3DA,ACaA,AXqCJ,Ac9DwB,ANuEpB,IF5CA,AG4CA,AE9CA,AH8CA,EMvEoB,CLuEjB,AKvEkB,ANuElB,CCAC,AC3DE,ACaF,AXqCR,AQSQ,CG9CC,AGzBkB,CZUb,AIiBJ,CAAC,CIfG,AF2DV,CRTJ,CEpDkB,CQED,AF2DF,CE3DX,AVmDA,CErDiB,AO6DjB,EE9CA,CAAgB,CTfK,AIiBrB,AG4CiB,CH5CC,ANoClB,CAAA,AQQmB,CG9CnB,CF8CmB,AE9CE,CLErB,AG4CA,ADAsB,CF5CC,ANoCvB,CAAA,CWtCyB,ELEE,CNoC3B,EAAM,CAAN,EAAS,CErDQ,AFqDjB,CErD8B,CFqDlB,AQQZ,EG9CqB,CTfa,ASeJ,CTfK,AIiBZ,ANoCvB,CMpCgC,CNoCd,CWtCG,EAAe,CAAf,CAArB,CTf8B,CAAc,AIiBrB,ANoCvB,CErD8B,CIiBY,ANoCf,CMpCJ,ANoCvB,CErDgD,AIiBhD,EJjBiB,EAAmC,AFqDvB,EErDZ,CAAb,CFoDR;AFWI,AI9DI,AIiBJ,AG4CA,AC3DA,Af0DI,AgB7CJ,AG1BI,ANwEJ,IF5CA,AG4CA,AC3DA,AF2DA,CMzE+C,CZY3C,CO6DD,AKvEC,ANuED,CVCG,AWDF,AE9CE,AH8CF,CE3DA,CJeE,AIfD,CJeE,AX2CE,CgB7CC,GhB6CG,AgB7CA,Cb+CC,AHFA,CO5DC,AO6Df,AC3DA,AF2DA,CN7DgB,CJ8DC,AHFA,AgB7CA,CDbF,Af0DX,AaCY,CF5ChB,CJjBI,AIiBc,AX2CE,CGEC,AI9DA,AP4DA,CGEC,AY5DtB,EJeA,AX2CwB,CO5DpB,AIiBmB,AE4CvB,EVCiB,AInEW,CJmEA,AI5DxB,AP0DwB,CW3CD,AX2CE,GGEG,CAAC,CHFT,CAAW,AgB7CtB,Cb+Ce,Aa/CD,Cb+CU,EHFb,CAAgB,AgB7CT,CAAC,Cb+CU,AQ7CnB,CAAS,GR6CK,AHFjC,CGE2C,CAAV,AHFW,CAAC,AgB7CtB,CAAc,Cb+CU,AHF/C,AgB7CS,ELEU,AX2C8B,AgB7CT,ELEA,CR6ChB,AQ7CL,CAAvB,AKFgD,Cb+CU,Aa/CT,Kb+Cc,Ga/CnB,Cb+Cc,Aa/CA,Cb+CU,Aa/CxB,Cb+Cc,Ea/CI,Cb+CU,Ca/C3D,Eb+Ce,Aa/CsC,Cb+CjD,CAAjB,Aa/Ca,CAAb;AbgDA,AQ7CA,AG4CA,AC1DA,AfyDQ,AgB7CR,AXqCA,Ac/DK,ANwEL,IVCA,AQ7CA,AG4CA,AE9CA,AXqCA,AQSA,EMxEK,ChByEF,AWDA,AKxEG,ANwEH,CVCC,AWDA,AC1DE,AfyDE,AgB7CJ,AH8CA,CG9CC,AXqCD,Ac/DI,Cd+DH,CMnCE,AG4CP,AdDW,CGEX,AQ7CQ,AG4CA,AdDI,CcCZ,EXCW,AWDA,AKxEG,CLwEd,AdDQ,AKRR,AQSA,CbDiB,AaCJ,CCAC,AKxEG,CLwEjB,AC1DiB,ACYjB,AXqCc,CWrCE,AG1BZ,CLwEa,AdDI,CW3CrB,AG4CA,AC1DoB,AfyDE,AKRtB,CFUmB,AQ7CA,AE4CA,CCAC,AE9CpB,AH8CoB,CG9CC,Cb+CC,AY3DE,CJcxB,AX2CiB,CW3CO,AG4CF,AdDM,AaCT,CG9CM,AH8CZ,GF5Ce,AG4CF,AdDT,AaCW,CCAD,AdDM,CAAhB,CcCjB,AdDQ,EaCK,GVCb,AUDoC,EG9Cf,CDZD,ACYU,CDZG,CJcT,CAAS,AE4CS,CE1DtB,ACYC,AH8CsB,EE1DL,ACYF,CAAf,CDZD,ACYpB,AH8C0C,CF5ClB,AE4CxB,CE1D0C,CJcD,AE4CS,CF5C1B,CAAxB,EIdoB,CF0DmC,CE1DN,EAA7B,CAApB,IF0DkD,CAAc,CAAhE,EAAmE,KAAK,QAAL,CAAc,CAAjF;AVEA,AI7DI,AO4DJ,AC1DA,AfyDK,AgB7CL,AG3BqB,AN0ErB,IVAA,AWDA,AC1DA,AF2DA,EM1EqB,ChB0ElB,AWDA,AKzEmB,AN0EnB,CVAC,AWDA,AE9CE,AH+CF,CE3DA,AIfoB,CZad,AQEL,ERFO,AScF,EF8CV,CP5De,AScF,AH+Cb,CN7DgB,CJ6DhB,Ea/CiB,Cb+CD,AI7DI,CAAC,AQErB,GAAmB,GZ2DnB,EI7DgB,CAAc,CAAd,GAAkB,CQElC,ECYa,CTdyB,AScX,CTdY,GScR,CAAC,ITdE,CAAc,CAAjC,EScY,CAAc,CTdU,ASctC,CTdT,CScwC,IAAI,CAAC,QAAL,CAAc,CAAd,GAAkB,EAAjD,EAAqD,EAArD,CAAb;AbgDA,AI7DI,AIgBJ,AG4CA,AC1DA,ACYA,AXoCH,AchEO,AN2EP,GAtDD,CVsDI,AQ7CA,AG4CA,AE9CA,CG9B+C,EhB6E5C,AWDA,AKzEC,ChB0EA,AWDA,AC1DE,ACYF,CLEA,AKFC,CTdK,AIgBL,EJhBO,GAAG,AO4Df,CXCA,AY3Dc,CZ2DD,CWjEmB,CPIb,AO8DnB,AC5DiB,ACYjB,CTdoB,AIgBpB,AKFgB,CLEA,ER6CG,AY3DE,CZ2DD,Aa/CpB,CLEA,AKFqB,CLEA,ER6CF,AI7DJ,CJ6DF,AI7DgB,AScJ,CTdV,EJ6Da,CI7DK,AQEhB,CAAQ,CRFrB,EJ6DS,CQ7Cb,ER6CoC,AQ7CD,EKFd,CAAS,EDZM,CZ2DM,AY3DL,CZ2DM,Aa/CtB,CLErB,CKFoC,CLES,AKFxB,Cb+CqB,Aa/C1C,Cb+CA,EAAkD,AY3DzB,CAAqB,CAArB,GZ2D8B,AY3DL,CJclD,CIdiB,CJcwC,CIdH,EAArC,EZ2DiC,AY3DQ,CZ2DM,AQ7ChE,CR6CA,AY3DiB,CJcgD,CR6CE,AY3DL,EAA7C,CAAjB,EZ2DwE,CQ7CxE,OR6CmE,CAAc,CAAjF;AAEA,AI9DI,AQEJ,AfwDI,AmBxEC,IhB4EL,AY5DA,EfwDI,AmBxEC,ChB4EF,AgB5EG,ChB4EF,CgB5EI,CZcE,EQEF,CRFK,AQEJ,EZ4DT,AgB5Ec,CZcE,AP0DF,CAAC,CmBxEE,EZcG,AYdhB,CnBwEA,CAAgB,CexDpB,CAAoB,IAApB,CAAyB,IAAI,CRFb,CAAY,EAAE,GAAG,EAAjB,EAAqB,EAArB,AQES,CAAS,CRFO,EAAzB,EAA6B,CAA7B,CAAZ,IQEqB,EAAsB,CAAtB,CAAzB;AZ6DH,AI9DO,AIeJ,AG8CA,AdJqB,AgB5CrB,AXoCJ,AchEyB,AN4EzB,ERZA,AQYA,CVlDA,CQII,AKFA,ETbI,AYfiB,CAAC,CnBwED,COzDd,AIeH,AG8CC,AEhDD,AXoCR,AchE4B,CZehB,AIeH,AKFA,AXoCT,ELQ6B,AaI7B,CCAa,ADAb,CCAc,AdJiB,GcId,CAAb,CTZJ,CEjDQ,AO6DY,AEhDhB,AXoCJ,CEjDuB,AO6DF,AEhDD,CHgDpB,CAAA,CCAwB,CP7DhB,ASaJ,CTbwB,AIexB,AKFqB,CLEC,CNkC1B,CSY6B,CP7DG,ASa5B,CLEA,ANkCJ,AQYA,CF9C+B,AKFA,EHgD/B,EGhDI,EAAiC,CLEjC,ENkCK,CSYe,AEhDpB,CTbwB,AO6De,CP7DN,AS/CA,AXgGrC,AQYS,CG9CL,CXkCkC,EEjDV,AM6D5B,CCAI,CP7DuC,AM6DnB,CN7DI,AO6DuB,CAAC,CP7DN,CO6D1C,CP7DwB,CAApB,AO6DgD;AP5DhD,AO6DA,AC5DJ,AfuDoB,AKPpB,AcjEI,AN6EJ,IE5DA,AVgDA,CcpE+C,CZmB3C,CPwDA,AKPD,AchEC,CdgEA,AQYA,CN7DG,AQCH,CRDI,AO6DE,AC5DL,EF4DG,GAAG,CCAK,ADAhB,CRZA,ESYmB,CP7Df,AQCJ,CRDmB,AQCH,GD4DQ,CP7DpB,AQCJ,CRDwB,AQCH,IRDO,IQC5B,GD4DmB,CAAmB,CAAnB,CAAf,GP7DoB,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAApB;AJ+DR,AI9DQ,AO6DA,AdLH,AKPD,AcjEK,AN4EL,EVEJ,EEbI,ESYI,AK7EC,ChB8ET,AEbO,AcjEG,ChB8EV,AEbQ,AQWU,CCCP,AK7EC,CZgBE,AO6DF,EDDU,CN5DL,CFiDb,CAAW,AcjEP,AN4EiB,CN5DL,AM4DhB,CVEJ,AUHwB,CVGxB,AUDI,CCAI,CP7DgB,AFiDJ,ESYK,CAAC,CTZX,CAAU,CFazB,AEbe,CSYe,EXC9B,AEb6B,GSYM,ATZ/B,EEjDgB,AFiDc,CEjDF,AFiDG,EEjDD,AO6DJ,CAAW,CXChC,CI9D4B,AFiDG,EEjDpB,CJ8DpB,AWDwB,CP7DiB,AFiDN,CFaX,AEbqB,CEjDzB,AO6D8B,ATZhB,EEjDW,CFiDI,CEjD7B,EAA6B,AFiD7C,CEjDgB,CAAZ,CO6DgB,GAAsC,SAAtD;AXEJ,AI9DI,AIaP,AGgDO,AC5DJ,ACYA,AXoCA,AclEgB,IdkEhB,EEjDI,AO6DA,AK9EY,CdkEb,AclEc,ChB+Eb,AY7DE,ACYA,AXoCF,CEjDG,AO6DA,AK9EY,CZiBX,AO6DA,EXCA,EY7DI,AVgDZ,CFaW,AEbA,CFaX,CY7De,ED4DX,CP7DA,AQCJ,AVgDgB,CEjDG,ASaA,GAAG,AXoCX,CEjDP,AFiDiB,CEjDG,AFiDb,EWpCe,CXoCD,CEjDG,EFiD5B,EAA8B,CAA9B,QEjDwB,CAAS,ASaX,CAAY,GTbV,ASaF,ETbiB,ASaA,CTbf,EAAkB,ASapB,ETbE,ASaoB,CTbxC,ASayC,OAAD,EAAU,OAAV,CAAtB,EAA0C,KAA1C,EAAiD,EAAjD,CAAtB;AbiDA,AI7DI,AO6DA,AC3DJ,AfqDA,AKNA,AcnEI,AN8EJ,IRXA,CcvE+C,CZsB3C,AO6DA,AKnFqB,CduEtB,AcvEH,ChBmFc,AY3DR,AV+CF,CEjDG,AO6DA,AdNF,AaKA,CN5DG,AO6DA,CTZR,CFYkB,AEZV,CSYJ,AdNK,AKNT,AQWS,CCCG,AdNF,AaKA,CVCW,AEZV,CFYX,AY3Dc,AV+Cd,CFWoB,AHLP,AaKA,CVEb,AHPA,AKNc,AQWd,CE1DiB,CRFb,AO6Dc,AdNF,AaKA,CN5DG,AO6DA,AdNF,AaKA,CCCb,CC3DiB,AV+CF,CSYG,AdNF,AaKA,CN5DhB,CAAoB,CFiDV,CAAU,CLMC,AKNX,AQWW,CN5DG,AO6DA,CAAC,CAAzB,ATZwB,ESYI,CAA5B,ATZJ,CQWA,CCCmC,AC3DlB,AV+CgB,CSY7B,AC3DyB,AV+C7B,AQWkC,CAAC,CCCG,ATZF,CQWpC,EN5DwB,AM4De,CN5DN,AO6DO,AC3DvB,AV+CuB,CLMpB,AKNqB,CU/CJ,AfqDK,CKN1C,CEjDwB,AO6DoB,CAAC,AC3D5B,CRFsB,CAAf,AO6DpB,AC3DsC,CfqD1C,COvD0C,AQEzB,CfqDiC,COvD1B,AQEsB,AfqDK,COvD/C,AQEa,CAAjB,AfqDA,EAAuD;AOrDnD,AIYZ,AGgDY,AC3DJ,AfqDI,AgB3CJ,AXqCA,AclEA,AN6EI,IGhDJ,AXqCA,AclEA,EL8EI,ADDA,CRXD,CU/CG,AV+CF,CMpCZ,AGgDe,AEjDH,CTXM,AO4DF,AEjDH,AHgDG,CbLC,CmBxED,CAAC,CL8EL,ATZJ,AQWY,CRXD,CEhDK,AQCF,AV+CF,GEhDO,AQCF,CCUjB,AHgDkB,CGhDF,AXqCC,AQWE,EN3DI,AQCF,AInBrB,CAAoB,CH6BpB,AXqCY,AQWW,CF/C/B,AX0CY,AgB3CiB,AXqCC,AQWE,CbLC,AKNd,AQWY,CM7EvB,AN6EkB,CM7EO,AN6Eb,CRXc,ELMI,CerDb,AV+CjB,AclE6B,AN6EE,CE1DN,CV+CM,CAAC,EQWI,CGhDpC,AHgDY,CE1DK,AF0Db,CN3De,AFgDkB,CEhDJ,AQCA,ERDd,CQCF,AV+Ce,CEhDK,AFgDK,AclEjB,CJmBa,AV+CP,AclEG,CnBwET,COtDN,AQCF,AfqD8B,CAAtB,AKNqB,CEhDJ,AQCA,AfqDtC,CerDa,CRDE,AQCnB,AfqDmD,AKNnD,CEhDI,IYlBqB,EAAsB,CAAtB,CAAzB,GnBwEI,EAA6D,UAA7D;AGOJ,AI5DI,AIxDZ,AGoHY,AC3DJ,AfqDC,AKND,AclEA,AN6EI,CFnHZ,CAAgC,ENwGxB,AclEA,EZkBI,AO4DA,ADDA,CRXD,CU/CG,AV+CF,CFYC,AWAE,CAAC,ADDA,EM7EA,ChB8EC,AgB9EA,ChB8EC,AUDE,ECCR,AC3DU,CZ2DD,AI5DE,AFgDf,CFYA,AI5DgB,CQCC,CZ2DD,AUDE,CVCD,AUDE,CN3Df,AIxDZ,CJwD6B,AIxD7B,AIyD6B,AInBrB,ChB8EoB,AgB9EA,CN6EG,CAAC,CAAC,CM7EzB,ChB8EyB,AI5DrB,AYlBqB,CN6EG,GM7EC,EN6EI,CVCjC,EAAkC,CAAC,EAAnC,AY3DiB,CAAc,AF0DR,CVCgB,AUDrB,CAAN,EM7Ea,CAAS,CJmBjB,AF0D6B,EE1DP,GAAtB,AF0DkC,CE1DnD,AF0DY,CM7Ea,AN6ErB,EM7EwC,CAAnB,CAAzB;AhB+EI,AWAH,AC1DD,ACSA,AXqCA,AclEA,AN6EC,IEzDD,AV8CA,AclEA,EhB8EI,CEZD,CWrCG,AXqCF,EFYI,EY1DA,AIpBA,CJoBC,AIpBA,ChB8EG,AajDA,AXqCZ,GWrCe,GbiDG,CAAC,AajDA,EDTnB,AIpBA,CJoBoB,AIpBA,ChB8EG,CAAC,CAAD,CAAL,AY1DlB,AIpBA,ChB8EY,AY1Da,AIpBA,IhB8EM,AY1DF,AIpBA,CH6Bd,CAAS,GbiDY,CAAxB,CAAR,CajD0B,CAAC,IDTN,AIpBA,CJoBS,AIpBA,GH6BV,CAAgB,CAAzB,EAA4B,CDTlB,AIpBA,CH6BV,CDT6B,AIpBA,CJoBnB,ACSsB,AG7BtB,CAAzB,CJoB+C,ACShC,CDRX,CCQ+C,GAApC,CAAf;AbkDI,AI5DA,AQEC,AfoDL,AgB3CA,AXqCA,IAAA,EFYI,AY1DC,CAAC,AV8CH,CWrCG,AXqCF,CU9CI,AfoDH,CGMG,AI5DA,CAAC,CFgDT,CLMS,CGMG,AHNF,AgB3CE,CTXC,AIWN,AITO,CRFV,CPsDS,AgB3CE,CTXC,AQEC,AfoDjB,CepDI,CZ0Dc,AHNF,CGMG,AHNF,AgB3CE,GhB2CC,CGMG,CAAC,CAAC,EHNA,CGMG,IajDb,CbiDkB,AajDT,MAAM,CbiDP,AajDQ,CbiDb,CAAN,CHNQ,CAAsB,EGMI,EajDtB,CAAgB,ChB2CxC,AgB3Ce,CbiDoC,CAAvC,AHNsC,AgB3CP,CbiDvC,AHN+C,CgB3CpC,ChB2Cf,CgB3C+C,ChB2CQ,CACnD,AgB5CW,EAAoC,GAApC,CAAf;AbkDC,AI5DO,AO4DR,AC3DoB,AfsDnB,AgB5CD,AXqCH,AcnEG,AN8EA,GRpBJ,CSqBI,AK/EA,CnB6CJ,CezBwB,AfwDpB,CcGG,AC3DkB,CD2DjB,AEjDE,AHgDA,CE1DiB,AIpBnB,CAAC,EZmBS,ESWF,AHgDA,CCCZ,EEjDe,AHgDA,GN3DO,AYnBtB,CH8BmB,AG9BH,AN8EG,EN3DO,CAAC,AM2DL,CM9EtB,CAAqB,EZmBU,AM2D/B,CN3DyB,GAAW,ESWrB,AG9Bf,CH8BwB,CG9BO,KZmBN,ASWK,CAAC,ETXiB,AYnBhD,EAAyC,IH8BjB,CAAgB,CAAzB,CTX0C,CAAC,ASWf,AG9B3C,CZmB2D,GAAC,CAAH,CAAjD,ASWyC,CTZjC,ASYkC,CTV1C,OSUmC,CAAgB,CAAhB,GAAoB,EAAhD,EAAoD,EAApD,EAAwD,GAAxD,CAAf;AFkDH,AC5DO,ACWJ,AHgDA,GC5EJ,CAhDJ,CA8HI,AC9DmD,EAE3C,CCUE,AHgDF,KGhDO,GAAG,EHgDA,EGhDI,CHgDD,KAAK,CAAC,KAAK,CGhDd,CAAS,KHgDA,EGhDO,CAAC,AHgDO,CAAhB,CAAtB,MGhDuB,CAAiB,CAA1B,EAA6B,GAA7B,EAAkC,EAAlC,EAAsC,GAAtC,EAA2C;AbkDzD,AI5DQ,AQAH,ACUsD,AXoC9D,AclEG,IAAA,EJoBK,ACUsD,CDVrD,CZ4DA,CY5DE,AIpBJ,CAAC,CH8B2D,CTVlD,CSUoD,CbkDtD,CY5DE,CRAI,CJ4DH,CY5DE,CRAI,CQAjB,CZ4De,EI5DM,CJ4DH,EgBhFtB,CAAsB,ChBgFtB,GgBhFA,CAA2B,KZoBN,CAAY,EAAZ,AYpBrB,EZoBqC,AYlDJ,CAgCjC,CZkBuC,GAAG,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,CAAb;AJ6DR,AI5DQ,AQDa,AfyDrB,AgB/CyD,AG3BzD,AN4EA,KGjDc,CDVO,ACUrB,CDVsB,CZ6DlB,AI5DI,CQDgB,AfyDnB,AaEA,GN1DO,CAAC,AM0DJ,CAAC,GAAG,CVEC,AUFd,EbFA,AaEgB,CVEC,AUFA,EN1DT,APwDW,COxDK,CM0DH,CVEC,CAAC,AHJA,COxDf,APwDgB,COxDK,CM0DH,CbFP,CGIS,CI5DK,APwDjC,IaEA,EVEuB,AUFY,CAAC,EVEE,AUFtC,CVEsB,CAAtB,AUFwC,EN1DX,CAAS,GAAT,EAAc,CAAd,EAAiB,EAAjB,CAArB;AACA,AO2DZ,AC7DQ,Af0DP,AgB/CG,AXoCJ,AQaQ,ECCR,ATdA,CLvBA,Ee1BmD,CF8D3C,CE3DA,CRCI,ASSF,CXoCV,CAAA,EE7CgB,AO2DhB,CP3DiB,AO2DjB,AElDe,GAAG,AHiDA,CAAC,CAAD,CRblB,AQaQ,CGjDc,AXoCtB,EScA,ADDwB,CN1DZ,AO2DZ,ADDyB,CN1DG,IAAhB,AF6CZ,CE7CiC,AM0DF,ECC/B,ATdA,CQamC,CN1DE,ASSnB,CFkDlB,AElD2B,GHiDa,CAAhB,GGjDU,AXoCzB,CWpC0B,CHiDY,CCCtC,ADDD,CRbR,CE7CiC,CAAS,AF6ClB,CScxB,EAAwB,AElDG,CAAiB,CAA1B,EAA6B,CTTd,EAAmB,ASSlC,CTTe,CSSmB,CTTG,CACvC,ASQE,EAAsC,GAAtC,EAA2C;AbmDzD,AI3Da,AO2Db,AC7DK,ACUsD,AXqC3D,AQaC,KAZmB,CEhDf,ACUsD,AHmD3D,CE7DM,CD6DF,CXAC,AY7DG,CREK,CAAC,ASQkD,AXqCzD,CAAC,CFcC,AI3DO,ASQkD,CbmDxD,AWAA,CC7DI,CV+CF,CFcC,AI3DO,AO2DP,ATdA,CFcb,AI3DqB,AQFJ,AV+CL,CScZ,ATdQ,CFcQ,AY7DZ,CZ6Da,EEdE,EFcE,CI3DL,CAAc,AF6CP,CE7CP,AF6CQ,CAAD,CFcG,AEdnB,CE7C2B,AF6ClC,CE7CY,KJ2DZ,EAAmC,CAAC,EAApC,EAAwC;AACpC,AI5DiC,AQFhB,Af2DzB,AgBjD6D,AXsC5D,AcjEG,EnB4EJ,CKbA,EWpCkB,CboDV,AY9DiB,ACUrB,CDVsB,CIjBhB,CJiBkB,CREa,CAAC,EAAE,APyD5C,CAAA,EGGkB,CAAC,AI5D6B,AYnB7B,ChB+ED,AI5D+B,CJ4DzC,CgB/Ec,EhB+EE,CAAC,AHHzB,CAAA,AmB5E0B,EZmBkB,CAAc,CAAd,CJ4Db,EI5D+B,CJ4D3B,KAAK,CAAhB,AgB/EF,CnB4EtB,AmB5EgC,GhB+Ec,AHH9C,AmB5EsB,ChB+Ed,CgB/E6B,GAAf,EAAoB,EAApB,CnB4EN,CmB5E8B,EAAxB,EAA4B,EAA5B,CAAlB,CnB4EJ,EACI,YADJ,EAEI,UAFJ,EAE6B;AGExB,AI7DW,AO4DZ,AC9DI,Af8DJ,AmB9EA,IAAA,ChBmEoB,AYtD2B,CZmE/C,CY/DI,Cf6DA,CO7D+C,AO6D9C,EP3DO,EO2DH,AdAA,AmB9EA,CL8EC,AK9EA,EnB8EE,CcAC,CAAb,EAAgB,CAAC,AdAA,GcAG,AK9EpB,CAAqB,IL8EI,AK9EzB,CAA0B,CnB8Ed,CAAgB,EmB9EE,EL8E9B,EAAkC,CAAC,AdAvB,CAAwB,CcApC,EAAuC,IK9Eb,CAAS,CnB8EvB,CAAZ,CADyB,CACuB,OmB9EtB,EAAsB,CAAtB,EAAyB,CAC/C;AZkBS,AO4DT,AC9DC,ACUL,AXqCH,Ac/DQ,AN6EL,IGnDA,EFoDI,AC9DC,AIhBA,CJgBC,AIhBA,EJgBE,ACUJ,AG1BI,CZkBK,ASQR,CTRS,AM2DP,CCCG,CP5DM,AO4DL,EC9DP,EREgB,AO4DhB,CP5DiB,AO4DL,AK9EC,CL8EA,AK9EC,CH0BlB,CAAgB,AHmDhB,ECCqB,EEpDrB,CTRgB,ASQK,CTRS,AYlBtB,CZkBQ,AO4DU,AK9EC,CAAvB,EZkB8B,CSQlC,CTRY,AO4DS,CAAW,AEpDH,KFoDzB,CEpDJ,EAAqC,MAArC,EAA6C,KAA7C,EAAoD,KAApD,EAvEiC,CAyEjC;ATVsC,AO6DrC,AC/De,Af8DhB,AKdR,AchEsC,AN8EjC,GAfD,GE/CoB,AIhBc,CJgBb,AIhBc,CnB8E3B,Ce9De,Af8Dd,AKdb,AchEyC,CZkBK,CAAC,EAAE,GF8CjD,CE9CqD,CAAC,AYlBJ,CAAC,EnB8E1B,CAAC,IO5DuB,CAAc,AP4DtC,AmB9EgB,CZkBQ,AP4DzC,AmB9EoD,CAAnB,CnB8EP,CO5DiC,CYlBH;AhBgFxD,AI9DY,AQFR,Af+DA,AKjCZ,Ac9CY,Cd8CZ,CAAsB,GUlCiC,AIbI,CJa1B,AfmErB,AKjCZ,CUlCQ,AVkCR,Ac7CY,EZe+C,EJgE5C,AI7DK,OP4DI,CAAC,EGCjB,GHDgB,CAAZ,GAAsB,IAAtB,CADsB,CACM;AGEnC,AI9DgB,AO6Db,AC9DA,Af8DI,AgBnDJ,AG5BK,AN+ET,EAAA,CVdA,CYhDI,ACWA,EG5BK,CAAC,EH4BF,AG5BI,CZkBK,ASUR,CTVS,AO6DP,CC9DC,AIjBJ,AN+ER,CN7DoB,AQDP,AF8Db,IN7DwB,AO6DpB,CP7DqB,IM6DzB,CE9DI,AF8DJ,CE9DwB,ERCJ,ASUhB,CTV8B,ASUR,CTVN,AQDhB,CAAyB,ERCS,ASUlC,CAA2B,CTVf,AQDiB,EF8DjC,GAAA,CGnDI,EAAoC,KDXX,CAAS,CCWlC,EAA6C,AHmDjD,IGnDI,EAAmD,EDX1B,EAAsB,ACW/C,CDXyB,CAAzB;ARCsC,AO8DzC,AC9DG,Af8DI,AmBhFS,ANgFb,GCNJ,CCxDI,EIlBa,CAAC,EAAE,CZkBsB,CAAC,CQA/B,CRAiC,AQAhC,KIlBgB,CAAC,EZkBuB,CAAC,CQAlD,CAAoB,GIlBJ,CJkBhB,AIlBmC,CJkBV,AIlBT,CZkByB,CAAkB,CAAlB,AYlBF,CJkBV,ERAkC,WQAtC,CAAS,QAAT,EAAmB,CAAnB,CAAzB;AZgEJ,AIhEgB,AQCZ,AInBI,ANiFJ,EVCJ,EY/DI,CIrBmD,EhBoFvD,AgBjFQ,ChBiFR,CInEuD,AMkE9C,EN9DO,CQAJ,CAAC,CF8DT,CAAW,EVCf,CAAA,CUDI,GAAkB,CE9DlB,CAAoB,GF8DG,CE9DvB,CAAyB,CZ+D7B,GAAA,AY/DiC,EF8DX,CAAc,KAAK,IVCzC,CY/D6B,CAAS,IF8DF,CAAgB,GE9DvB,AF8DO,CAAoB,CE9DR,CAAnB,CAAzB,OF8DoD,IAAA,EAAI;AVExD,AIhEa,AO+DjB,AdDQ,AgBpDP,AXoCL,AchEa,ANgFuD,ECChE,ETjBJ,EchEa,CAAC,EAAE,CZkBK,AP8DL,AKhBhB,CE9CsB,CO+DlB,AKjFQ,CZkBY,AO+DpB,ADDiE,IAAI,GbA/C,AaAkD,CN9D5C,CAAC,AO+D7B,CAAA,AdDyB,CaAmD,CbApE,AaAqE,GAAL,EN9DpD,AM8DiD,CN9D/B,CAAtB,CM8DqE,ECCrF,GAAA,ADDgE,YCChE;AXEI,AIjEqC,AQCrC,AV6CR,AchEqB,ANgF0E,IE7DvF,CF6DgC,CMhFnB,ANgFK,CMhFJ,ANgFd,EVGK,AYhED,AInBY,CZkBqB,AQChC,CRDiC,EAAE,CJiExC,CAAW,IAAX,CYhEA,CRDgD,AQChC,CZgEE,AIjE+B,GQCjD,CAAqB,CZgEE,GIjEiB,CAAkB,CAAlB,EQCxC,CZgEkB,AIjE4C,CJiE9B,AYhED,KZgEM,GYhErC,EAAyC,KZgET,CAAgB,EYhEhD,CZgEgC,CAAoB,UAAA,IAAA,EAAI;AAAI,AIjEhD,AP+DR,AgBpDZ,AXmCA,AchEY,ANiFP,GAHD,EMjFuD,CAAzB,CAA1B,EZiBmD,ASe3D,CTfqC,AFkDrC,CLiBiB,CO9DE,CJgEkD,EHFhD,COnEgB,APmEf,AKjBtB,CFmByE,AIrEzD,CFkDhB,CLiByB,CGEmD,AHFhE,EAAgB,CAAC,CGEmD,CAAC,CHFjD,EGE4C,EAAH,AatDzE,GbsDyF,EHFhD,CAAC,EGE0B,QHFpC,CAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AGE6B,AI9D/E,AO6DR,AC9DA,Af8DQ,AgBlIhB,AXgHqB,Ac9Db,CHlDR,CAAoC,AXgHf,EU5Cb,AIlBA,ChBiFgC,CAAd,CAAlB,CWDI,CAAA,AC9DA,AIlBA,CJkBC,AIlBA,CLgFD,ATlBS,CE3CC,AP6DA,AKlBD,ESkBT,EP7Dc,AP6DA,EKlBL,CE3CQ,AO6DZ,AdAY,AmBhFrB,Cd8Da,EWhHrB,AGkDyB,CZmBQ,ASrEjC,GDoEQ,AV4Ca,CU5CS,AV4CT,CLkBiB,CcA1B,AdA2B,CcAX,CAAhB,AC9DJ,AIlBA,CLgFI,AC9DuB,KRCN,CAAY,AO6DX,CdAD,CO7Dc,AQDnC,Af8D0C,CAArB,CcAjB,AC9F6B,Af8FzB,CO7D8B,AQCtC,ERDqB,CO6DC,CP7DoB,CO6DpB,CP7DsB,GAAG,CO6DzB,CP7DD,EAA8B,EAA9B,AO6DC,CAAlB,CP7DmD,CAAlC,CAAb,AO6Dc,KAAA,CAAlB,GAAkB,EAAA,CAAE,GAAF,EAAtB,EAA+B;AXElC,AI9DW,AO6DJ,AC5DJ,AInBA,AN8ER,GVDI,KI3DY,AYlBF,CN8Ed,ECCiB,CP7DG,CAAC,AYlBF,GL+EP,AK/EU,CL+EC,EDDvB,CM9E0B,EL+Ed,CP7DI,CAAgB,CO6DD,CAAC,EP7DhB,CAAqB,EO6DA,EP7DI,CYlBnB,CAAU,CL+EA,CAAW,CK/ErB,EAAe,EL+EL,CK/EV,EL+E6B,AK/ET,CZkBL,AO6DN,CP7De,EYlBxB,CZkBe,AO6DmB,CK/ER,CZkBG,CAAd,CYlBf,CZkBgC,AO6DO,CK/ER,CZkBhB,CAArB,AYlBM,CAAd,CA1CiC,CA2CjC,CL8EI;AP5DI,AO6DP,AC5DD,Af2DQ,AKlBZ,Ac1DI,AN/DR,CAAA,EAAA,EC0IQ,GP3DQ,GO6DD,ATnBX,CE1CgB,AP4DA,CO5DC,ESQN,ChBoDC,CKlBZ,CLkBsB,AKlBV,CAAZ,EAAuB,CAAvB,CE1CY,CAAgB,AF0CM,IE1CtB,AF0CZ,CE1CiC,CF0Ce,GE1CX,IF0CrC,EAA+D,OE1C9B,CAAS,QAAT,EAAmB,CAAnB,EAAsB,CACvC;AJ6DpB,AI7DqB,AO6DT,AdDQ,AKnBhB,AczDI,QdyDJ,CFoBJ,CI7DqB,CAAC,AO6DL,EP7DO,AFyCpB,CFoBJ,AHD0B,EcCd,AdDgB,AKlBpB,CE1CoB,AO6DL,CP7DM,CP4DE,GcCnB,ATnBJ,CLkB2B,AKlB3B,CLkB4B,CcCL,CP7DP,AO6DQ,CP7DM,AO6D1B,ATnBJ,CE1CgB,AF0ChB,GE1CkC,CAAtB,AF0CZ,EAAM,CLkBM,AKlBZ,EAAS,CAAT,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,KAA6B,IADjC;AFzHJ,AIgF6C,AO8DpC,CX9IT,EAAA,OIgF6C,CAAC,EAAE,EM4DjC,EN5DqC,CAAC,QAAL,CAAc,CAAd,GAAkB;AAA9C,AO+Df,AC9DG,Af4DY,AKlBZ,Ac1DA,GLwEJ,CTdI,IU1CM,AIhBF,CZc+C,AF4C/C,CAAC,CE1CO,GP4DI,CAAC,CKlBjB,CU1Ce,Af4DH,EAAS,AKlBP,CU1CI,EV0ClB,Cc1DmB,CJgBG,EIhBA,EAAtB,UJgBkB,CAAU,GAAV,EAAe,GAAf,EAAoB,IAAE,IAAF,GAAS,CAA7B,EAAgC,EAAhC,EAAoC,EAApC,CAAlB;ARAa,AQCb,Af4DgB,AmB5EhB,IJgBA,AIhBA,KAAI,CZeS,AYfR,CZeS,CP6DE,CO7DA,AQCP,CAAC,CZ6DH,EI9Da,CAAC,AYfrB,GAAgB,CnB4EU,CAAC,Ce5D3B,AIhBA,CJgBqB,CRDL,CAAc,AP6Dd,CO7DA,AP6DgB,Ce5DhC,CAA0B,CRDQ,EAAtB,AP6DI,Ce5Dc,Cf2DT,CACmB,We5Dd,CAAS,WAAT,EAAsB,CAAtB,EAAyB,CAC/C;ARFkC,AO+D9C,AC7Da,Af4DQ,AKnBhB,AczDG,IAAA,EJgBK,CAAC,ED6Dd,AC7DgB,AIhBJ,CZckC,AYdjC,CZckC,AP4D3B,EO5D6B,IAAI,AP8D1B,CO9D2B,AQE7B,CD6DzB,AC7D0B,CIhBlB,GAAkB,EAAlB,CZcyC,CAAc,AQE/C,CRFiC,AQEd,CAAvB,ERFuD;AAA/C,AO/EpB,ACiFsC,Af6Dd,Cc9IxB,EAAA,GCiFsC,CAAC,ERJoB,AQIlB,ERDrB,MP8DS,Ce7DqB,CAAC,QAAV,CAAmB,CAAnB,GAAuB,Af6DxC,CAAqB,IAAI,CAAC,WAA1B,EAAuC,YAAvC,EAAqD,UAArD,EADG,CAIH;AOjEH,AQCT,AfiEY,AKvBpB,AczDI,EdyDJ,GU3CuD,EAE/C,CVyCR,CAAA,AczDS,CZcQ,CAAC,EAAE,AYdP,CAAC,GZcU,AYdP,CZcQ,AF2CzB,AczDI,CdyDJ,CczDoB,CAAC,GAAG,EZcJ,CAAc,AF2ClC,CE3CoB,AYdM,EdyD1B,CE3CsC,CYdd,CZcR,EYde,CAA3B,EAA8B,CAAC,CdyD1B,CczDL,EdyDJ,AczDuC,EdyDD;AE3CI,AQEjC,AfiEW,AKvBhB,AczDI,MJeC,CAAC,CV0CA,CU1CE,AV0CD,CE5C+B,AYb5B,CZa6B,CF4C7B,CE5C+B,AYb5B,EL6EN,CK7ES,CdyDD,CU1CE,CAAC,CIfE,CZa6B,AF4CvC,CE5CwC,AF4C9B,CAApB,IU1CQ,CAAmB,CAAvB,CRFqC,CAAkB,CAAlB,GAAsB,GYb/C,CAAc,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,UAAL,GAAgB,CAA9C,EAAiD,GAAjD,EAAsD,EAAtD,CAAZ;AZaQ,AQEkB,AV2C9B,AczDI,IdyDJ,EU3C8B,AId1B,CJc2B,AV2C5B,CAAC,CEhD+C,AQKlB,ERDrB,MF4CZ,IczDmB,CAAC,IAAhB,CAAqB,GAArB;AZaS,AQCT,AfkEY,AKtBhB,IAAA,CU9CmD,CAAzB,CAA1B,AV8CG,CAAC,EE7CS,CAAC,EAAE,CF6ChB,CAAW,CLsBW,AKtBV,GAAG,EE7CS,CAAC,AF6CzB,CLsB6B,CKtBT,CAAC,CLsBW,EKtBR,CAAC,CE7CT,CAAkB,APmEG,COnEzB,AF6CZ,eLsBgC,CAAsB,OAAtB,CAA8B,EAA9B,CAAhB;AOnEqB,AQGrC,AV2CA,Ac1DI,IJeJ,AV2CA,Ec1DI,Cd0DD,CAAC,CU3CA,CRHiC,AQGhC,CRHiC,AYZ9B,CAAC,CZY+B,MQGxC,ERHgD,CAAC,AQGhC,EV2CjB,CAAqB,CAAC,Ec1DlB,Cd0DqB,Ac1DC,CZYc,CAAkB,AQG1D,CRHwC,AF8CxC,EAA8B,CE9CgC,AF8C/B,Cc1D3B,CAA8B,Cd0DA,Ec1D9B,Cd0DJ,Cc7DmC,Cd6DI,Ac1DC,Cd0DxC,EAA0C,CAAC,GAAG,GAA9C;AE9CY,AQKZ,Af+DgB,AKrBhB,IAAA,GAAG,CU1CG,AV0CF,CEnD+C,CAAtB,EAKlB,IALkB,APwET,COxEZ,CQSQ,GAAG,Ef+DQ,CKrB3B,CU1CuB,AV0CF,CAAC,CLqBS,CAAf,CKrBS,CLqBS,AKrBR,GAA1B,EAA+B,CAAC,GAAG,GAAnC,EU1CmB,AV0CqB,CU1CN,AV0CO,GU1CtB,AV0CyB,CAAC,CU1CN,EV0CvC,CU1CmB,CV0C+B,CU1CN,AV0CO,GAAG,CU1CnC,AV0CoC,EU1CL,CV0ClD,EU1CmB,EAAoC,EAApC,CAAnB,CA5CiC,CA6CjC;ARHQ,AQKR,Af6DoB,AKrBpB,IAAA,GAAG,CAAC,IE7CU,GAAG,GAAG,IAAI,EF6CxB,CAAqB,CAAC,GAAG,CAAzB,EAA4B,CAAC,EE7CT,CAAW,AF6CC,CAAC,CE7CA,EF6CjC,CE7CoC,CF6CE,CE7ClB,AF6CmB,EE7CC,CF6CE,CE7CA,EF6C1C,CE7C6C,CF6CE,CE7C3B,AF6C4B,EE7CC,CF6CE,CE7C/B,AF6CgC,EE7CC,CAAjC,AF6CpB,CE7CQ;AACA,APkEY,AKrBpB,Ac5DI,Id4DJ,Ec5DI,Cd4DD,CE7CK,AF6CJ,GE7CO,AYfH,CZeI,AYfH,Kd4DT,KE7CQ,AYfJ,CZemB,AYfH,IZeZ,AYfJ,CZewB,AYfH,GAArB,CZe4B,aAAJ,CAAS,GAAT,EAAc,CAAd,EAAiB,EAAjB,CAApB;AACA,AQIR,Af8DoB,AKrBpB,Ac5DC,Id4DD,CcnHiC,CAyDjC,Cd0DG,CE7CK,AQIJ,AVyCA,GE7CO,CAAC,EPkEQ,AKrBpB,QE7CQ,CAAe,CPkEO,Ce9DT,Af8DU,EOlEvB,CAAoB,AQIJ,Cf8DJ,Ce9DpB,Af8DoC,EOlEJ,QPkEc,CAAC,IOlEnB,CAAS,EPkES,CAAV,COlER,APkE4B,EOlEb,CAAf,CPkEQ,COlEU,APkEe,EOlEjC,CAApB,CPkEyD,CAAC,QAA9B,CAAhB;AOhEZ,AQGR,Af8DiB,AKrBjB,IUzCA,AVyCA,GAAG,CE5CK,AF4CJ,CUzCA,CAAC,EVyCL,CLiBgB,IO7DC,CAAC,CAAD,APiEM,COjEf,GAAe,CQGvB,ERHQ,CQGc,GAAtB;ARFQ,AQGR,Af8DoB,AKrBvB,GAVD,CU/BI,IRHQ,CQGJ,CAAC,IRHS,APiEM,COjEL,SPiEe,COjEtB,APiEuB,COjEL,AQG1B,GAAwB,Af8DJ,COjEZ,APiE4B,COjEL,AQG/B,Cf8DsC,CAAC,EOjEJ,GPiEC,CAAS,IAAT,CAAc,IOjEnB,APiEuB,COjEd,APiEe,IOjExB,EAAe,CAAf,CPiEK,COjEa,APiE7B,EOjEW,CAAvB;APkES,AmBjFjB,QAAM,MAAM,GAAG;AZgBP,AQGR,Af+Da,AKvBhB,Ac3DmB,MAAA,EZgBR,CQGH,EInBgB,EZgBT,AQGH,AInBc,CZgBV,AQGH,GAAG,CAAb,EAAgB,CAAC,GRHT,AQGY,CRHI,GQGF,CRHd,CAAqB,EQGT,CRHZ,EAA0B,AQGP,CAA3B,EAA8B,CRHtB,AQGuB,ERHS,AQGxC,EAAmC,ERH3B;AACH,AQGD,Af+DK,AmBnFM,KAAf,EZXI,EP0EI,Ce3CE,GRHC,AQGE,Ef+DE,Ce/DC,IAAI,kBAAJ,CAAc,KAAI,CAAC,cAAL,GAAsB,KAAI,CAAC,gBAAL,GAAsB,CAA1D,EAA6D,GAA7D,EAAkE,EAAlE,CAAZ;ARFI,AQGJ,Af+DQ,AKxBhB,Ac3DI,Ed2DJ,IUvCQ,ERHI,AF0CZ,Ac3DU,Cd2DV,QE1CqB,CAAC,AF0CtB,CE1CqB,AF0CrB,Ac3DqB,CZiBT,EYjBY,CZiBG,AQGF,CAAC,ERHd,CF0CZ,CUvCQ,CAAuB,CVuC/B,EUvCQ,QVuCC,IAAT,EAAwB;AEzCZ,APkEI,AKxBZ,Ac5DqB,MAAA,EZkBb,EPkEI,CKxBL,Ac5DmB,Cd4DlB,Cc5DoB,CZkBd,CAAC,CF0CH,CAAC,CAAD,CAAJ,CLwBc,CAAC,EKxBJ,EE1CX,APkEI,COlEc,APkEE,CKxBL,CAAC,CAAD,CE1Cf,AF0CD,CE1CwB,APkEnB,AKxBZ,IE1CmC,aAAJ,CAAS,GAAT,EAAc,CAAd,EAAiB,EAAjB,CAAvB;AACH,AQED,AfgEK,AKxBZ,Ac7DuB,Gd2DxB,Ec3DI,CJqBI,KAAI,CAAC,gBAAL,CAAsB,OAAtB,CAA8B,GAA9B,EAH+B,CAGK;AfiEnC,AmBrFL,OnBsD0B,CAgCtB,AmBtFE,IAAI,GAAG;AZoBT,AFwCP,Ac5DiB,MZoBV,AYpBU,KZoBN,AYpBW,CZoBV,CYpBY,SZoBjB,CAAgB,IAAhB,CAAqB,GAArB,EAA0B,GAA1B,EAA+B,MAA/B;AACH,AQAG,AVwCZ,Ac7DqB,KAAb,CJqBI,GVwCZ,EUxCgB,CAAC,GVwCjB,OUxCY,CAAgB,IAAhB,CAAqB,GAArB;AACH,AfiEG,AK7CZ,AczCQ,CdyCR,CAAqB,GU5EoB,CA0DjC,Af+DI,AK7CZ,CAAA,CczCc,OnBsFO,CAAC,CmBtFC,GAAG,CnBsFd,CAAgB,IAAhB,GAAuB,SAAS,CAAC,QAAV,CAAmB,UAAnB,CAAvB;AOhEJ,APiEC,AmBvFkB,MAAA,EZsBb,GYtBkB,EAAE,KZsBV,GAAG,IAAI,kBAAJ,CAAc,EAAd,EAAkB,GAAlB,EAAuB,EAAvB,CAAnB;AACA,APiEH,AmBxFqB,GnBiDtB,CO1BI,CYvBA,CA7DiC,CA+DjC,OZqBU,CAAC,UAAX,CAAsB,IAAtB,CAA2B,IAAI,aAAJ,CAAS,SAAS,CAAC,CAAD,CAAlB,EAAuB,CAAvB,EAA0B,EAA1B,CAA3B;AACA,AQAA,IRAA,IQAM,MAAM,CRAD,CAAC,CQAG,GRAf,CAAiB,UAAjB;AQAgB,AfiExB,AK3BA,Ac3DQ,Id2DR,EUtCwB,GfiExB,AmBtFa,EJqBgB,AVsC7B,EUtC+B,AIrBd,CAAC,GAAG,CAAb,EnBsFR,AmBtFwB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;AZuB/B,AQFe,AftGvB,AK4IA,Ac1DY,CnBlFZ,EAAA,EOwGQ,AQFA,EREA,GAAA,AYtBU,CAAC,GAAG,CZsBV,AYtBA,CZsBC,UAAL,EAAgB,IAAhB,CAAoB,KAApB,CAAoB,EAApB,EAAoB,aAAA,CAAA,aAAA,CAAA,CAAC,UAAD,CAAA,EAAgB,WAAhB,CAAA,EAAgC,WAAhC,CAApB;AQDA,AVqCR,AczDY,QJoBE,EVqCd,AczDkB,GAAG,GdyDrB,AczDwB,EdyDxB,CUrCyB,GAAG,SIpBW,CAAC,CAAC,GAAG,IAAL,CAA3B,CAF2B,CAG3B;AZsBJ,AQHqB,AfgE5B,AK3BqB,EAAA,IUrCO,ERGf,GQHoB,AVqCZ,CAAA,CUrCc,GRGd,GAAG,AFkCH,EAAA,EElCO,IFkCP,CAAA,WElCG,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,WAApB,CAAjB;AACA,AQJoB,AIlBhB,KJkBJ,GRIM,EYtBI,EAAE,GnBoFL,AmBpFQ,CZsBD,EYtBI,CZsBD,AYtBE,IZsBE,IYtBN,CAAa,CAAb,GAAiB,EAAjB,GAAsB,CAAC,CZsBrB,CAAY,EAAZ,AYtByB,EZsBT,EAAhB,AYtB6B,EZsBT,CYtBY,CAAX,CAAlC,QZsBa,CAAjB;AACA,AQJA,AVqCJ,AcvDQ,MAAA,EZsBE,AQJA,GVqCV,AcvDa,CJkBC,AIlBA,GJkBG,GVqCjB,CAAY,CAAZ,CEjCuB,CFiCA,AcvDf,CduDR,AcvDyB,CZsBC,CFiCQ,EcvD1B,CZsBsB,AYtBA,CduD9B,EAAgD,CcvDd,MduDlC,EAA+D,IEjCrC,CAAY,AYtBR,CAAS,EZsBb,CYtBI,CZsBa,CYtBC,CAAd,CZsBJ,CYtBqB,CZsBC,AYrBpC,WZqBc,EAAmC,KAAnC,EAA0C,EAA1C,CAAtB;AQJc,AVqClB,ActDa,MJiBK,EVqClB,ActDa,CAAC,EJiBS,AIjBP,EJiBS,AVqCzB,GACI,AcvDiB,CAAC,KduDlB,CAAA,EcvDY,CAAe,CduD3B,AcvDY,CduDZ,EcvD+B,EduD/B,EAAM,CAAN,AcvDoC,CAAC,CduD5B,CAAT,EAAY,IAAZ,EAAkB,EcvDa,CAAmB,CAAnB,EAAsB,CduDrD,AcvDQ,EduDmB,CAA3B,KAA6B,IADjC;AE/BI,AQNa,AIjB2C,IZuBxD,CQNA,GIjBwD,CZuBpD,AYvBqD,CZuBpD,CYvBsD,MAAM,CAAC,EZuBlE,CAAgB,AYvBmD,IZuBnE,CAAqB,QAArB,EAA+B,QAA/B,EAAyC,aAAzC;AQLA,AVsCA,AcxDQ,IdwDR,GczD2C,CJmBrC,CVsCF,AcvDI,CduDH,MAAL,CUtCe,EVsCD,CUtCI,EVsClB;AE/BA,AQPmB,AIjBV,KZwBT,CQPmB,CROnB,CYxBS,CAAC,CZwBV,CQPwB,AIjBZ,EJiBc,EROtB,CAAC,AYxBY,CAAC,GAAC,CAAX,WZwBR,EAAsB,IAAtB,CAA0B,KAA1B,CAA0B,EAA1B,EAA8B,WAA9B;AQPkB,AVuCrB,AcxDyB,KJiBtB,GIjBsB,CAAC,EAAE,MAAM,CAAC,GAAC;AJkBjC,AIlBQ,OAFmC,CJoBrC,CIjBE,GJiBE,GAAG;AROhB,AQPiB,AVuClB,AcxDa,EdwDb,IUvCkB,EIjBL,CdwDb,AcxDc,CdwDd,CUvCuB,AIjBP,EJiBS,GIjBJ,CAAC,EdwDtB,CAAA,AcxDuB,CAAX,OdwDZ,GAAA,UAAS,GAAT,EAAsC;AUvCrB,AVwCb,AczDsB,KJiBtB,GVwCM,AczDgB,CdyDf,AczDgB,EAAE,CdyDf,KAAK,IAAL,CAAU,CAApB,CADkC,CAElC;AEjCR,AQPQ,AIlBQ,OAHmC,CJqBrC,CROd,AYxBgB,QJiBO,GAAG,KRO1B;AA9GA,AQuG2B,AVyCnB,Ac1DS,CZtFjB,CAA+B,EFgJvB,EUzCmB,CVyChB,CAAC,Ac1DK,CAAC,EJiBc,AIjBZ,EJiBc,CIjBX,CAAC,Ed0DhB,KEhJR,CAAA,AYsFoB,CAA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AS,CdoDpC,EAA2B,CAA3B,IcpD2B,CdoDE,CcpDiB,CAAnB,EAAsB,CACzC;AJeC,AVqCZ,AcpDY,QJeA,AIfA,CJeC,AIfA,EJeE,AIfA,KJeK,CAAC,AIfA,CAAC,EJeA,CAAX,KIfI,CAAgB,CAAhB,GAAoB,EAAxB;AJec,AIfc,QJed,AIfc,CJeb,AIfc,EJeZ,AIfc,EJeZ,GAAG,CAAC,AIfc,CAAC,EJed,MIfO,CAAgB;AJe/C,AVuCZ,ActDY,EdsDZ,GAAA,CAAA,CUzCoD,AIdC,EJiBzC,AIfA,MdqDZ,CAAA,QAAA,GAAA,UAAS,GAAT,EAAsC;AUtCzB,AVuCT,ActDS,QJeA,AVuCH,ActDG,CJeC,AVuCH,ActDG,EJeE,AIfA,CdsDF,IUvCO,CAAC,AVuCH,ActDG,CAAC,EJeA,CAAX,AVuCE,CAAU,CAApB,CADkC,CAElC,CcvDY,CAAgB,CAAhB,GAAoB,EAAxB;AJec,AIfc,QJed,AIfc,CJeb,AIfc,EJeZ,AIfc,MAAM,CAAC,QAAP,CAAgB,CAAhB,GAAoB;AJenD,AVyCR,AcxDQ,IdwDR,GU5CgD,AV4C7C,Ac1D8C,Cd0D7C,CUxCI,AIfA,QduDR;AUxCS,AVyCT,AcxDS,IdwDT,GAAG,CUzCM,AVyCL,AcxDK,CJeC,AIfA,EJeE,AIfA,GJeG,AVyCf,CUzCgB,AVyCL,CAAX,CcxDkB,CdwDJ,CAAC,EcxDK,CdwDF,AcxDV,CJeI,AVyCO,CUzCM,CAAjB,CVyCR;AUzC4B,AV0C5B,AczDuB,IdyDvB,GAAG,CU1CyB,AV0CxB,AczDmB,CJeM,AIfL,EJeO,AIfL,GdyD1B,CAAW,CAAX,CczDgC,CdyDlB,AczDmB,CdyDjC,OczD0B,CAAgB,CAAhB,GAAoB,EAApB,GAAyB;AJe3C,AV2CR,Ac1DQ,Id0DR,GU/CgD,AV+C7C,Ac7D8C,CJclB,AV+C3B,Ac7DuB,EJmBpB,AIfA,IdyDP,GANkC,CAOlC,Cc9D2B,CAAvB,EARiC,CAajC;AJcI,QAAA,KAAK,EAAE;AAAR,AV4CP,AczDI,IdyDJ,GUjD+B,AViD5B,CUjDC,AViDA,EczDI,CAAC,GAAG,GdyDZ,CczDc,IAAV,EAAgB;AJcnB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C0B,AInC1B,IJmCQ,CAAuB,IAAI,AInCnC,CAAA,YJmC+B,CAAS,GInCxC,EJmC+B,CInC/B,CJmC+C,CAAhB,EAAmB,CACtC,KIpCK,IAAjB,EAA+B,KAA/B,EAA8C,KAA9C,EAA6D,IAA7D,EAAyE;AJoC5D,AInCT,QJmCS,AInCH,CJmCI,EAAE,AInCH,GAAG,GJmCM,CAAC,CInCF,OJmCL,AInCZ,CJmC4B,CAAhB,GAAoB,CAAxB;AAA2B,AIlCnC,QJkCmC,AIlC7B,CJkC8B,CIlC5B,CJkC8B,EIlC1B,IJkCgC,CAAC,AIlC5B,QJkCqB,AIlC1B,CJkC0C,CAAhB,CIlCV,EJkC8B,EAApB,AIlCN,GJkC+B,AIlC9B,CJkC+B,GAAC,CIlC3B,UAA3B,GAAyC,EAApD;AJkCQ,AIjCR,OJgC8C,CIhCxC,CJkCE,CIlCA,GAAI,KAAK,QAAL,GAAgB,KAAK,GAAC,KAAK,UAA5B,GAA0C,EAArD;AJkCS,AIjCT,QJiCS,AIjCH,CJiCI,AIjCH,EJiCK,CIjCF,GAAV,EJiCkB,CAAC,GAAC,CAAZ;AAAe,AIhCvB,IAAA,GAAG,CJgCoB,AIhCnB,CJgCoB,EAAE,CIhC1B,KJgCgC,CAAC,QAAP,CAAgB,CAAhB,GAAoB,EAApB,GAAyB,CAAC,GAAC;AAA7C,AI/BR,IAAA,GJ6B8C,AI7B3C,CAAC,CJgCI,QIhCR,GAAgB,QAAhB;AJgCS,AI/BT,IAAA,GAAG,CJ+BM,AI/BL,CJ+BM,EAAE,MAAM,CAAC,EI/BnB,CJ+BoB,CAAZ,CI/BW,QAAnB;AJ+BuB,AI9BvB,IAAA,GAAG,CJ8BoB,AI9BnB,CJ8BoB,EAAE,EAAE,GAAG,CAAC,AI9BhC,GJ8BiC,AI9BjB,MAAhB;AJ8BQ,AI7BR,IAAA,GJ0B8C,AI1B3C,CAAC,CJ8BI,UI9BR,GAAkB,KAAlB;AJ8BS,AI7BT,IAAA,GAAG,CJ6BM,AI7BL,CJ6BM,EAAE,MAAM,AI7BlB,GJ6BqB,AI7BL,CAAhB,CJ6BY,GAAc,CAAC,GAAC,CAApB;AAAuB,AI5B/B,IAAA,GAAG,CJ4B4B,AI5B3B,CJ4B4B,EAAE,EAAE,GAAG,CAAC,AI5BxC,GJ4ByC;AAAjC,AI3BR,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","file":"main.c39d6dcf.js","sourceRoot":"../src","sourcesContent":["// Exploration.ts\n//\n// This might be something a little more interesting\n\nimport Component, {StateObject} from './Component';\n\nclass Exploration {\n    public canvas: HTMLCanvasElement;\n    public context: CanvasRenderingContext2D;\n    public components: Array<Component>;\n    // The idea is that all components update their state recursively starting here\n    public outputComponents: Array<Component>;\n\n    public animated: boolean = false; // assume not unless proven otherwise\n\n    public paused: boolean = false;\n    public updateTime: number = 1000;\n    public lastUpdated: number = Date.now();\n    public animationFrame: any;\n\n    // Can possibly have an afterRender property\n    public afterRender: (() => void) | null | undefined;\n\n    constructor(canvas: HTMLCanvasElement, width: number = 400, height: number = 400) {\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d')!;\n        this.components = [];\n        this.outputComponents = [];\n\n        // sizing\n        canvas.width = width;\n        canvas.height = height;\n\n        // TS-safe way of putting a random debug name\n        let id = Math.floor(Math.random() * 1e6);\n        Object.defineProperty(window, \"exploration\" + id, {\n            value: this,\n        });\n        console.log(id, this);\n    }\n\n    // todo: addComponent() maybe?\n\n    render() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        for (let i = 0; i < this.components.length; i++) {\n            this.context.save();\n            // render wires first\n            const comp = this.components[i];\n            for (let j = 0; j < comp.inputWires.length; j++) {\n                const position = {\n                    x: comp.position.x + comp.inputSockets[j].x,\n                    y: comp.position.y + comp.inputSockets[j].y,\n                };\n                comp.inputWires[j]?.render(this.context, position);\n            }\n            this.components[i].render(this.context);\n            this.context.restore();\n        }\n\n        if (typeof this.afterRender === \"function\") {\n            this.afterRender();\n        }\n    }\n\n    onClick(canvasX: number, canvasY: number) {\n        for (let i = 0; i < this.components.length; i++) {\n            const component = this.components[i];\n            const offsetX = canvasX - component.position.x;\n            const offsetY = canvasY - component.position.y;\n            if (Math.abs(offsetX) < component.size.x/2 && Math.abs(offsetY) < component.size.y/2) {\n                component.onClick(offsetX, offsetY);\n            }\n        }\n\n        // Right now I have nothing better than re-updating the whole tree\n        this.update();\n    }\n\n    pause() {\n        this.paused = true;\n        cancelAnimationFrame(this.animationFrame);\n    }\n\n    resume() {\n        this.paused = false;\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    updateLoop() {\n        // Not paused or turned off, and been long enough since last update\n        if (!this.paused && this.updateTime > 0 && Date.now() - this.lastUpdated > this.updateTime) {\n            this.update();\n        }\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    update() {\n        // call beforeUpdate if needed\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            if (typeof comp.beforeUpdate === \"function\") {\n                comp.beforeUpdate();\n            }\n        }\n\n        // Recursively loop backwards through the tree\n        // stores a hash of component indices because we have to check the same component multiple times\n        // We hash anything that is listed as an output component\n\n        const visitedNodes: {[i: number]: boolean} = {};\n        const savedState = [];\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            const comp = this.outputComponents[i];\n            let old: boolean[] = [];\n            for (let j = 0; j < comp.state.bits.length; j++) {\n                old.push(comp.state.bits[j]);\n            }\n            savedState.push({bits: old});\n        }\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            this.updateComponent(this.outputComponents[i], visitedNodes, savedState);\n        }\n\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            //console.log(\"After Update: \", this.outputComponents[i].position, savedState[i].bits, this.outputComponents[i].state.bits)\n        }\n\n        //console.warn(\"UPDATE FINISHED\");\n\n        this.lastUpdated = Date.now();\n    }\n\n    updateComponent(component: Component,\n        visitedNodes: {[i: number]: boolean},\n        savedState: StateObject[]) {\n        let index = this.components.indexOf(component); // if this gets too slow I can add IDs\n        if (!visitedNodes[index]) {\n            visitedNodes[index] = true; // prevents infinite loops, although cyclic explorations are invalid anyway\n            // has not been visited, so we need to evaluate it\n            //console.log(\"visiting \" + String(index), component);\n            let parentBits = [];\n            for (let i = 0; i < component.inputWires.length; i++) {\n                const wire = component.inputWires[i];\n                if (wire) {\n                    const to = wire.toComponent;\n                    if (!to) {\n                        parentBits.push(false); // null = 0\n                    } else {\n                        this.updateComponent(wire.toComponent, visitedNodes, savedState);\n\n\n                        // all we need is this one bit\n                        // (note: null or missing wires give a 0)\n                        // did we save it?\n                        const ocIndex = this.outputComponents.indexOf(to);\n                        if (ocIndex >= 0) {\n                            //console.log(\"Using saved state\", ocIndex, savedState[ocIndex].bits);\n                            // Use the stored state instead of updating immediately\n                            parentBits.push(savedState[ocIndex].bits[wire.toOutput]);\n                        } else {\n                            parentBits.push(to.state.bits[wire.toOutput]);\n                        }\n                    }\n                } else {\n                    // no wire = 0\n                    parentBits.push(false);\n                }\n            }\n            // Update the component's state.\n            component.state.bits = component.evaluate(parentBits);\n        }\n    }\n};\n\nexport default Exploration;\n","// InputBit.ts\n// Can be clicked to change state\n\nimport Component from './Component';\n\nclass InputBit implements Component {\n    state: {bits: boolean[], active: boolean};\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: [];\n    inputWires: [];\n    outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    constructor(x: number, y: number, value: boolean = false, size: number = 20) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            active: value,\n            bits: [value],\n        };\n\n        this.inputSockets = []; // it is input, it needs no input from elsewhere\n        this.inputWires = [];\n        this.outputSockets = [\n            {x: 0, y: 0}\n        ];\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        if (this.state.active !== this.state.bits[0]) {\n            // panic\n            throw new Error(\"[InputBit.render] State does not match bit array\");\n        }\n        ctx.fillStyle = (this.state.active ? \"#33ff33\" : \"#990000\");\n        ctx.strokeStyle = \"2px solid black\";\n        ctx.beginPath();\n        ctx.arc(this.position.x, this.position.y, this.size.x / 2, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n    };\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        console.log(\"[InputBit] clicked\");\n        this.state.active = !this.state.active;\n        this.state.bits[0] = this.state.active;\n        // bits will be updated when everything is\n    };\n\n    evaluate(_: boolean[]): boolean[] {\n        return [this.state.active];\n    }\n}\n\nexport default InputBit;\n","// OutputBit.ts\n// Need a good way to distinguish from InputBits\n\nimport Component from './Component';\nimport Wire from './Wire';\n\nclass OutputBit implements Component {\n    state: { bits: boolean[] };\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: { x: number; y: number; }[];\n    outputSockets: { x: number; y: number; }[];\n    inputWires: Wire[];\n    beforeUpdate: undefined;\n\n    constructor(x: number, y: number, size: number = 20) {\n        this.position = { x: x, y: y };\n        this.size = { x: size, y: size };\n        this.state = { bits: [false] };\n\n        this.inputSockets = [{x: 0, y: 0}];\n        // this might be convenient\n        this.outputSockets = [{x: 0, y: 0}];\n        this.inputWires = [];\n    }\n    render(ctx: CanvasRenderingContext2D): void {\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(left, top, this.size.x, this.size.y);\n        ctx.fillStyle = (this.state.bits[0] ? \"#33ff33\" : \"#990000\");\n        ctx.fillRect(\n            left + this.size.x * 0.1,\n            top + this.size.y * 0.1,\n            this.size.x * 0.8,\n            this.size.y * 0.8\n        );\n    };\n    onClick(offsetX: number, offsetY: number): void {\n        return;\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        //console.log(bits);\n        //console.log(\"evaluating\", this.position);\n        return bits;\n    };\n}\n\nexport default OutputBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Adder implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        // carry input\n        this.inputSockets.push({\n            x: this.size.x * 3/8,\n            y: 0,\n        });\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            /*ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x, this.position.y + socket.y - 15);*/\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = \"#333333\";\n            ctx.strokeStyle = (this.state.bits[i] ? '#33ff33' : '#990000');\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += (wire1.toComponent.state.bits[wire1.toOutput] ? 1 : 0) * (1 << i);\n            num2 += (wire2.toComponent.state.bits[wire2.toOutput] ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(String(num1) + \" + \" + String(num2), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        const answer = num1 + num2;\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) > 0;\n        }\n        //console.log(answerBits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        this.state.bits = this.evaluate(this.inputWires.map(wire => (wire ? wire.get() : false)));\n    }\n}\n\nexport default Adder;\n","// Wire.ts\n\nimport Component from \"./Component\"\n\ntype WireOptions = {color?: string};\n\n// not sure a wire really is a component but it uses them\nclass Wire {\n    // I use \"from\" and \"to\" because \"input\" and \"output\" are ambiguous\n    toComponent: Component;\n    toOutput: number;\n\n    color: string;\n\n    // in case you want the wire to bend\n    waypoints: Array<{x: number, y: number, node?: boolean}> = [];\n\n    constructor(\n        to: Component,\n        toOutput: number,\n        waypoints: {x: number, y: number, node?: boolean}[] = [],\n        options: WireOptions = {}\n    ) {\n        this.toComponent = to;\n        this.toOutput = toOutput;\n        this.waypoints = waypoints;\n\n        this.color = options.color ?? \"#333\";\n    }\n\n    get(): boolean {\n        // empty wire is zero\n        if (!this.toComponent) return false;\n        // coerce undefined to false\n        return this.toComponent.state.bits[this.toOutput] || false;\n    }\n\n    addWaypoint(x: number, y: number) {\n        this.waypoints.push({x: x, y: y});\n    }\n\n    render(ctx: CanvasRenderingContext2D, from: {x: number, y: number}) {\n        if (!this.toComponent) return;\n        ctx.save();\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(from.x, from.y);\n        for (let i = 0; i < this.waypoints.length; i++) {\n            ctx.lineTo(this.waypoints[i].x, this.waypoints[i].y);\n        }\n        const endOffset = this.toComponent.outputSockets[this.toOutput];\n        ctx.lineTo(endOffset.x + this.toComponent.position.x, endOffset.y + this.toComponent.position.y);\n        ctx.stroke();\n\n        ctx.lineWidth = 6;\n        for (let i = 0; i < this.waypoints.length; i++) {\n            if (this.waypoints[i].node) {\n                ctx.beginPath();\n                ctx.arc(this.waypoints[i].x, this.waypoints[i].y, 1, 0, 2*Math.PI);\n                ctx.stroke();\n            }\n        }\n        ctx.restore();\n    }\n}\n\nexport default Wire;\n","// Gates.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nabstract class Gate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public rotation: number;\n    public symbol: string = \"\";\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number, rotation: number, bits: number) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        this.rotation = rotation * Math.PI / 180;\n\n        const cosine = Math.cos(this.rotation);\n        const sine = Math.sin(this.rotation);\n        // transform [±0.3, -0.5]\n        if (bits == 2) {\n            this.inputSockets = [\n                {\n                    x: size * (-0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine - 0.2*sine),\n                },\n                {\n                    x: size * (0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine + 0.2*sine)\n                }\n            ];\n        } else {\n            this.inputSockets = [{\n                x: size * 0.5*sine,\n                y: size * -0.5*cosine,\n            }]\n        }\n\n        this.outputSockets = [\n            {\n                x: size * -0.4*sine,\n                y: size * 0.4*cosine,\n            }\n        ];\n\n        this.inputWires = [];\n    }\n    beforeUpdate: undefined;\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    abstract drawGate(ctx: CanvasRenderingContext2D): void;\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.strokeStyle = \"black\";\n        ctx.lineWidth = 2;\n        ctx.translate(this.position.x, this.position.y);\n        ctx.rotate(this.rotation);\n        // draw the wires coming in\n        ctx.beginPath();\n        if (this.inputSockets.length === 2) {\n            ctx.moveTo(this.size.x * -0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * -0.2, 0);\n            ctx.moveTo(this.size.x * 0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * 0.2, 0);\n            ctx.stroke();\n        }\n\n        this.drawGate(ctx);\n\n        ctx.rotate(-this.rotation);\n        ctx.font = Math.round(this.size.y * 0.6) + \"px monospace\";\n        ctx.fillStyle = \"#333\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(this.symbol, 0, 0);\n\n        ctx.restore();\n    }\n\n    abstract evaluate(bits: boolean[]): boolean[];\n}\n\nclass AndGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n        this.symbol = \"&\";\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.lineTo(this.size.x * 0.4, 0);\n        ctx.arc(0, 0, this.size.x * 0.4, 0, Math.PI);\n        ctx.lineTo(-this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] && bits[1]];\n    };\n}\n\nclass OrGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n        this.symbol = \"O\";\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0, s * -0.2, s * 0.4, s * -0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] || bits[1]];\n    };\n}\n\nclass XorGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n        this.symbol = \"X\";\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        // do the or's path...\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0, s * -0.15, s * 0.4, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n        // and the extra thing\n        ctx.beginPath();\n        ctx.moveTo(s * -0.4, s * -0.5);\n        ctx.quadraticCurveTo(s * 0, s * -0.3, s * 0.4, s * -0.5);\n        ctx.stroke();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] !== bits[1]];\n    };\n}\n\nclass Not extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 1);\n    }\n\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.y;\n        // wire in\n        ctx.beginPath();\n        ctx.moveTo(0, s * -0.5);\n        ctx.lineTo(0, 0);\n        ctx.stroke();\n        // triangle for the not\n        ctx.beginPath();\n        ctx.moveTo(0, s * 0.2);\n        ctx.lineTo(s * -0.25, s * -0.35);\n        ctx.lineTo(s * 0.25, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n\n        ctx.beginPath();\n        ctx.arc(0, s * 0.3, s * 0.1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.fill();\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        Gate.prototype.render.call(this, ctx);\n    };\n    onClick(_: number, __: number) {};\n    evaluate(bits: boolean[]): boolean[] {\n        return [!bits[0]];\n    };\n}\n\nexport {AndGate, OrGate, XorGate, Not};\n","// Display.ts\n//\n// Given a set of bits, displays its value as a signed or unsigned integer.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Display implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public signed: boolean;\n    public components: Component[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    // note that I'm thinking about using this for InputBits, OutputBits, and RegisterBits\n    // and those only have one state to get\n    constructor(x: number, y: number, components: Component[], signed: boolean = false, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size * 2,\n            y: size\n        };\n        this.signed = signed;\n        this.components = components;\n\n        this.state = {\n            // unused\n            bits: [],\n        };\n        // unused, it doesn't use wires because they make visual clutter\n        this.inputSockets = [];\n        this.outputSockets = [];\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,               top);\n        ctx.lineTo(left + this.size.x, top);\n        ctx.lineTo(left + this.size.x, top + this.size.y);\n        ctx.lineTo(left,               top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // get the state\n        let totalValue = 0;\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            const value = (comp.state.bits[0] ? 1 : 0) << i;\n            // use 2's complement if signed on the last bit\n            totalValue += (this.signed && i == this.components.length-1) ? -value : value;\n        }\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.font = Math.round(this.size.y*4/5) + \"px monospace\";\n        ctx.fillStyle = \"#000\";\n        ctx.fillText(String(totalValue), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        return [];\n    }\n}\n\nexport default Display;\n","// AdderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport {AndGate, OrGate, XorGate} from './Gates';\nimport Display from './Display';\n\nclass AdderExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 640, 400);\n\n        const adder = new Adder(520, 200, 4);\n        this.components.push(adder);\n\n        for (let i = 0; i < 4; i++) {\n            const bit = new InputBit(adder.position.x - 100 + i*25, 30);\n            adder.inputWires.unshift(new Wire(bit, 0, [\n                {x: bit.position.x + 12.5, y: 120 - i*20},\n                {x: bit.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit);\n\n            const bit2 = new InputBit(adder.position.x + 100 - i*25, 30);\n            adder.inputWires.push(new Wire(bit2, 0, [\n                {x: bit2.position.x - 12.5, y: 120 - i*20},\n                {x: bit2.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit2);\n        }\n\n        for (let i = 0; i < 5; i++) {\n            const output = new OutputBit(adder.position.x + 37.5 - i*25, 300);\n            output.inputWires.push(new Wire(adder, i, []));\n            this.components.push(output);\n            this.outputComponents.push(output);\n        }\n\n        // colors are nice\n        const blue = {color: \"rgba(96,96,160,1)\"};\n\n        const fakeCarry = new InputBit(370, 200, false, 20);\n        this.components.push(fakeCarry);\n\n        let rightInputA = [];\n        let rightInputB = [];\n        let rightOutput = [];\n        let carryOuts = [];\n        for (let i = 0; i < 4; i++) {\n            const bitA = new InputBit(290 - i*70, 30);\n            rightInputA.push(bitA);\n\n            const bitB = new InputBit(bitA.position.x + 40, 90);\n            rightInputB.push(bitB);\n\n            // full adder\n            const x1 = (bitA.position.x + bitB.position.x)/2;\n            const y1 = bitB.position.y + 60;\n            const and = new AndGate(x1 - 18, y1, 24, 0);\n            and.inputWires.push(new Wire(bitA, 0, []));\n            and.inputWires.push(new Wire(bitB, 0, []));\n            const xor = new XorGate(x1 + 18, y1, 24, 0);\n            xor.inputWires.push(new Wire(bitA, 0, []));\n            xor.inputWires.push(new Wire(bitB, 0, []));\n\n            const outBit = new OutputBit(x1, 300, 20);\n            rightOutput.push(outBit);\n\n            if (i >= 0) {\n                const previous = (i == 0) ? fakeCarry : carryOuts[i-1];\n                // need a second phase of the adder\n                const and2 = new AndGate(x1, y1 + 50, 24, 0);\n                and2.inputWires.push(new Wire(xor, 0, []));\n                and2.inputWires.push(new Wire(previous, 0, [\n                    {x: and2.position.x + 5, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: previous.position.y + 15},\n                    {x: previous.position.x, y: previous.position.y + 15},\n                ], blue));\n\n                const xor2 = new XorGate(x1 + 20, y1 + 80, 24, 0);\n                xor2.inputWires.push(new Wire(xor, 0, []));\n                xor2.inputWires.push(new Wire(previous, 0, [\n                    {x: xor2.position.x + 5, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: previous.position.y + 15},\n                    {x: previous.position.x, y: previous.position.y + 15},\n                ], blue));\n\n                const or2 = new OrGate(x1 - 15, y1 + 80, 24, 0);\n                or2.inputWires.push(new Wire(and, 0, []));\n                or2.inputWires.push(new Wire(and2, 0, []));\n\n                carryOuts[i] = or2;\n                outBit.inputWires.push(new Wire(xor2, 0, []));\n                this.components.push(or2, and2, xor2);\n            } else {\n                carryOuts[i] = and;\n                outBit.inputWires.push(new Wire(xor, 0, []));\n            }\n\n            this.components.push(and, xor, outBit);\n        }\n\n        const finalCarry = new OutputBit(30, 250, 20);\n        finalCarry.inputWires.push(new Wire(carryOuts[3], 0, []));\n        rightOutput.push(finalCarry);\n\n        this.components.push(finalCarry, ...rightInputA, ...rightInputB);\n\n        const displayA = new Display(35, 30, rightInputA);\n        const displayB = new Display(35, 90, rightInputB);\n        const displayResult = new Display(200, 350, rightOutput, false, 40);\n\n        this.components.push(displayA, displayB, displayResult);\n\n        this.outputComponents.push(...rightOutput);\n    }\n}\n\nexport default AdderExploration;\n","// Text.ts\n//\n// Simple text display\n\nimport Component from './Component';\n\ninterface TextOptions {\n    color?: string | (() => string);\n}\n\nclass Text implements Component {\n    state = {bits: []};\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets = [];\n    outputSockets = [];\n    inputWires = [];\n    onClick = () => {};\n    evaluate = () => [];\n    beforeUpdate = undefined;\n\n    text: string | (() => string);\n    options: TextOptions;\n\n    constructor(x: number, y: number, size: number, text: string | (() => string), options: TextOptions = {}) {\n        this.position = {x: x, y: y};\n        this.size = {x: 0, y: size};\n        this.text = text;\n        this.options = options;\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n        const message = (typeof this.text === \"function\" ? this.text() : this.text);\n        ctx.font = `${this.size.y}px monospace`;\n        // if function, call it; if string, use it; if undefined, default to #333\n        ctx.fillStyle = (typeof this.options.color === \"function\" ? this.options.color() : this.options.color || \"#333\");\n        // positioning\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(message, this.position.x, this.position.y);\n        ctx.restore();\n    }\n}\n\nexport default Text;\n","// BinaryExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\n\nclass BinaryExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 480, 240);\n\n        const NUM_BITS = 6;\n        let bitArray = [];\n        for (let i = 0; i < NUM_BITS; i++) {\n            const bit = new InputBit(440 - 80*i, 80, false, 30);\n            bitArray.push(bit);\n\n            const text = new Text(bit.position.x, bit.position.y / 2, 30, String(2**i));\n            this.components.push(text);\n        }\n\n        this.components.push(...bitArray);\n        this.outputComponents.push(...bitArray);\n\n        const display = new Display(240, 160, bitArray, false, 48);\n        this.components.push(display);\n        this.outputComponents.push(display);\n    }\n}\n\nexport default BinaryExploration;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass ChoiceGate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: (Wire | null)[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size*2,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n        const offset = size * 0.5;\n        this.inputSockets = [\n            {x: -this.size.x * 1/3, y: 0},\n            {x: -offset, y: -this.size.y/2},\n            {x: +offset, y: -this.size.y/2}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(this.size.x*1.0, 0);\n        ctx.lineTo(this.size.x*0.67, this.size.y);\n        ctx.lineTo(this.size.x*0.33, this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // red input\n        const sx = this.size.x;\n        ctx.fillStyle = \"rgb(0, 204, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.25, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n        ctx.fillStyle = \"rgb(153, 0, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.75, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] ? bits[1] : bits[2]];\n    }\n}\n\nexport default ChoiceGate;\n","// ChoiceExploration\n//\n// Exploration that shows how a multiplexer works.\n// I called it a \"choice gate\" because \"multiplexer\" and \"multiplier\" look too similar.\n\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport ChoiceGate from './ChoiceGate';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\n\nclass ChoiceExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n\n        const inputChoice = new InputBit(50, 90, false, 30);\n        const inputElse = new InputBit(100, 90, false, 30);\n        const inputIf = new InputBit(150, 90, false, 30);\n        this.components.push(inputChoice, inputIf, inputElse);\n\n        const inverter = new Not(115, 150, 30, 0);\n        this.components.push(inverter);\n        inverter.inputWires.push(new Wire(inputChoice, 0, [\n            {x: 115, y: 125},\n            {x: 50, y: 125},\n        ]));\n\n        // recursive components are a bit weird\n        const andIf = new AndGate(125, 200, 50, 0);\n        const andElse = new AndGate(75, 200, 50, 0);\n        const or = new OrGate(100, 250, 50, 0);\n\n        andIf.inputWires = [\n            new Wire(inverter, 0, []),\n            new Wire(inputIf, 0, [\n                {x: 135, y: 170},\n                {x: 150, y: 170},\n            ]),\n        ];\n        andElse.inputWires = [\n            new Wire(inputChoice, 0, [\n                {x: 65, y: 170},\n                {x: 50, y: 170},\n            ]),\n            new Wire(inputElse, 0, [\n                {x: 85, y: 170},\n                {x: 100, y: 170},\n            ]),\n        ];\n        or.inputWires = [\n            new Wire(andElse, 0, []),\n            new Wire(andIf, 0, []),\n        ];\n        this.components.push(andIf, andElse, or);\n\n\n        const output = new OutputBit(100, 300);\n        output.inputWires.push(new Wire(or, 0))\n        this.components.push(output);\n        this.outputComponents.push(output);\n\n        // the simplified version\n        const inputChoice2 = new InputBit(240, 120, false, 30);\n        const inputIf2 = new InputBit(280, 120, false, 30);\n        const inputElse2 = new InputBit(320, 120, false, 30);\n        const choice = new ChoiceGate(300, 200, 40);\n        const output2 = new OutputBit(300, 250);\n        choice.inputWires.push(new Wire(inputChoice2, 0, [\n            {x: inputChoice2.position.x, y: choice.position.y},\n        ]));\n        choice.inputWires.push(new Wire(inputIf2, 0));\n        choice.inputWires.push(new Wire(inputElse2, 0));\n        output2.inputWires.push(new Wire(choice, 0));\n\n        this.components.push(inputChoice2, inputIf2, inputElse2, choice, output2);\n        this.outputComponents.push(output2);\n    }\n\n}\n\nexport default ChoiceExploration;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass RegisterBit implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        // [0] is the off switch and [1] is the on switch\n        const offset = size * 0.44;\n        this.inputSockets = [\n            {x: -offset, y: -offset},\n            {x:  offset, y: -offset}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = this.state.bits[0] ? \"#33ff33\" : \"#990000\";\n        ctx.beginPath();\n        ctx.moveTo(this.size.x*0.5, 0);\n        ctx.lineTo(this.size.x*1.0, this.size.y*0.5);\n        ctx.lineTo(this.size.x*0.5, this.size.y);\n        ctx.lineTo(this.size.x*0.0, this.size.y*0.5);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // red input\n        ctx.fillStyle = \"#ccffff\";\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.25, this.size.y * 0.25, this.size.x * 0.25, 135*Math.PI/180, 315*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();\n        /*ctx.fillStyle = \"#33ff33\";\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.75, this.size.y * 0.25, this.size.x * 0.25, -135*Math.PI/180, 45*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();*/\n        if (this.inputWires[0] && this.inputWires[0].get()) {\n            ctx.beginPath();\n            ctx.moveTo(this.size.x * 0.75, this.size.y * 0.25);\n            ctx.lineTo(this.size.x * 1.0, 0);\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return bits[0] ? [bits[1]] : this.state.bits;\n    }\n}\n\nexport default RegisterBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Subtractor implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits + 1);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x*0.46, top);\n        ctx.lineTo(left + this.size.x*0.5,  top + this.size.x*0.05);\n        ctx.lineTo(left + this.size.x*0.54, top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x*0.95, this.position.y + socket.y + 10);\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = \"#333333\";\n            ctx.strokeStyle = (this.state.bits[i] ? '#33ff33' : '#990000');\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += (wire1.toComponent.state.bits[wire1.toOutput] ? 1 : 0) * (1 << i);\n            num2 += (wire2.toComponent.state.bits[wire2.toOutput] ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(String(num1) + \" - \" + String(num2), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        const answer = num1 - num2;\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) != 0;\n        }\n        //console.log(answerBits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        this.state.bits = this.evaluate(this.inputWires.map(wire => (wire ? wire.get() : false)));\n    }\n}\n\nexport default Subtractor;\n","// Clock.ts\n//\n// These clocks can have an arbitrary period.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass ChoiceGate implements Component {\n    public state: {bits: boolean[], clock: number};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    //\n    constructor(x: number, y: number, bits: number, width: number = 100, height: number = 50) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n        // because .fill() isn't supported?!\n        const bitArray: boolean[] = Array(bits).map(_ => false);\n        this.state = {\n            bits: bitArray,\n            clock: -1,\n        };\n        this.numBits = bits;\n        // \"power supply\" or more accurately a way to reset the clock\n        this.inputSockets = [\n            {x: 0, y: -this.size.y/2 - 1},\n        ];\n\n        this.outputSockets = [];\n        const spacing = width / bits;\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: (i - bits/2 + 1/2) * spacing,\n                y: this.size.y/2,\n            });\n        }\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        let r = Math.min(this.size.y * 0.2, this.size.x * 0.1);\n        const w = this.size.x, h = this.size.y;\n        ctx.moveTo(w*0.5, 0);\n        ctx.arcTo(w*1.0, 0, w*1.0, h*0.5, r);\n        ctx.arcTo(w*1.0, h*1.0, w*0.5, h*1.0, r);\n        ctx.arcTo(0, h*1.0, 0, h*0.5, r);\n        ctx.arcTo(0, 0, w*0.5, 0, r);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // power\n        ctx.translate(w/2, 0); // move origin to top-middle\n        ctx.beginPath();\n        ctx.moveTo(2, -5);\n        ctx.lineTo(2, -1);\n        ctx.lineTo(-2, -1);\n        ctx.lineTo(-2, -5);\n        ctx.stroke();\n\n        // clock\n        ctx.fillStyle = \"#e0e0e4\";\n        r = Math.min(w/3, h/3);\n        ctx.translate(0, h/2); // move origin to center\n        ctx.beginPath();\n        ctx.arc(0, 0, r, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n\n        // ticks\n        ctx.save();\n        const angle = 2*Math.PI / this.numBits;\n        for (let i = 0; i < this.numBits; i++) {\n            ctx.beginPath();\n            ctx.moveTo(0, -r);\n            ctx.lineTo(0, -r * 0.8 + 1);\n            ctx.stroke();\n\n            ctx.rotate(angle);\n        }\n        ctx.restore();\n\n        // hand\n        ctx.save();\n        ctx.rotate(this.state.clock * angle);\n        ctx.lineWidth *= 3;\n        ctx.lineCap = \"round\";\n        ctx.beginPath();\n        ctx.moveTo(0, r*0.25);\n        ctx.lineTo(0, -r * 0.8);\n        ctx.stroke();\n        ctx.lineWidth *= 5/3;\n        ctx.beginPath();\n        ctx.arc(0, 0, 1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.restore();\n\n        // outputs\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            const socket = this.outputSockets[i];\n            ctx.fillStyle = (i == this.state.clock) ? \"#33ff33\" : \"#990000\";\n            ctx.beginPath();\n            ctx.arc(socket.x, socket.y, 5, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // Evaluation: the clock's state is set on\n    evaluate(bits: boolean[]): boolean[] {\n        let result = [];\n        for (let i = 0; i < this.numBits; i++) {\n            result.push(i == this.state.clock);\n        }\n        return result;\n    }\n\n    beforeUpdate() {\n        if (this.inputWires[0]?.get()) {\n            this.state.clock = (this.state.clock + 1) % this.numBits;\n        } else {\n            this.state.clock = -1;\n        }\n    }\n}\n\nexport default ChoiceGate;\n","// DividerExploration.ts\n\n/*\n\nsteps:\n1. Start with dividend (numerator) in RIGHT half of remainder register\n2. Shift the remainder left\n3. Send the LEFT half in for subtraction\n4. If the result is negative, write it, else keep the remainder as is\n5. Put the opposite of the sign bit on the new 1 position\n6. Go back to step 2, although when the larger clock strikes, record the results (I expect it to be 2*6+3 or 3*6+5 cycles).\n\nnext steps:\n- carry from the subtractor needs to enter the choice gates\n- on purple, we get the subtraction results, and if the sign bit is off, we insert it into the register\n- also on purple, that sign bit needs to shift the LEFT\n\nI think I need to totally reconfigure the remainder part\n\nRemainder register:\n- If power button is off, set to zero (6-12) or numerator (0-5)\n- If power button is on:\n    - on purple we may receive a subtraction, but this only applies to bits 6-12\n    - on green we need to shift left, setting a carry bit. (This will require an additional register.)\n\n\n\n*/\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Subtractor from './Subtractor';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\n\nclass DividerExploration extends Exploration {\n    countdown: Clock;\n    remainderRight: number;\n    remainderSpacing: number;\n    startButton: InputBit;\n    numBits: number;\n\n    animated: boolean = true;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 800;\n        canvas.height = 600;\n\n        // A lot of the same stuff happens compared to Multiplier...\n\n        const BITS = 6;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(695, 40, false, 50);\n        this.startButton = startButton;\n        const startNot = new Not(startButton.position.x - 50, 40, 30, 90);\n        startNot.inputWires.push(new Wire(startButton, 0));\n        this.components.push(startNot);\n\n        const clockX = 690;\n\n        const clockAnd = new AndGate(clockX, 100, 25, 0);\n        const clockNot = new Not(clockX, 150, 25, 0);\n        const clockBit = new OutputBit(clockX, 200);\n\n        clockAnd.inputWires.push(new Wire(clockNot, 0, [\n            {x: clockX - 5, y: 75},\n            {x: clockX - 20, y: 75},\n            {x: clockX - 20, y: 175},\n            {x: clockX, y: 175}\n        ]));\n        clockAnd.inputWires.push(new Wire(startButton, 0));\n        clockBit.inputWires.push(new Wire(clockNot, 0));\n        clockNot.inputWires.push(new Wire(clockAnd, 0));\n        this.components.push(clockAnd, clockNot, clockBit);\n        this.outputComponents.push(clockBit);\n\n        // ironic that I called the above a \"clock\"\n        // when the clock strikes 2*BITS + 4 it will end the operation\n        // but I add one more to avoid confusion\n        const countdown = new Clock(750, 230, 2*BITS + 4, 80, 50);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: countdown.position.x, y: 40},\n        ]));\n        this.countdown = countdown;\n\n        const subtractor = new Subtractor(210, 180, BITS, 260, 80);\n        //this.outputComponents.push(subtractor);\n\n        // Also not really a register.\n        let remainderRegister = [];\n        this.remainderRight = 680;\n        this.remainderSpacing = 52;\n        for (let i = 0; i < 2*BITS+1; i++) {\n            const reg = new OutputBit(this.remainderRight - this.remainderSpacing*i, 460, 20);\n            remainderRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.25)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n        const blue = {color: \"rgba(32, 64, 128, 0.8)\"};\n        const blueFaded = {color: \"rgba(32, 64, 128, 0.4)\"};\n        //const yellow = {color: \"rgba(160, 160, 0)\"};\n\n        // Input Numbers (N/D). D = divisor, N = dividend\n        let inputN = [];\n        let inputD = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(340 - i*25, 40);\n            this.components.push(input);\n            inputN.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(340 - i*25, 110);\n            this.components.push(input);\n            inputD.push(input);\n        }\n\n        // Wires from the registers to the subtractor.\n        for (let i = 0; i < BITS; i++) {\n            const d = 3;\n            const bit = remainderRegister[i + BITS];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            const y2 = subtractor.position.y - 70;\n            subtractor.inputWires.push(new Wire(bit, 0, [\n                {x: subtractor.position.x + subtractor.inputSockets[i].x - 30 + d*i, y: y2 + d*i},\n                {x: 10 + d*i, y: y2 + d*i},\n                {x: 10 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\"}));\n        }\n        // The other subtractor registers (to the divisor)\n        for (let i = 0; i < BITS; i++) {\n            subtractor.inputWires.push(new Wire(inputD[i], 0));\n        }\n\n        // Choice Gates coming out of the subtractor (writes if subtracted).\n        let subtractorChoiceGates = [];\n        for (let i = 0; i < BITS; i++) {\n            //const x = subtractor.position.x + subtractor.outputSockets[i].x;\n            const y = subtractor.position.y + subtractor.outputSockets[0].y; // put them all on the same line\n            // space them a bit\n            const choice = new ChoiceGate(remainderRegister[i+BITS].position.x, y + 50, 10);\n            // choice depends on whether or not the carry bit is positive or negative\n            choice.inputWires.push(new Wire(subtractor, BITS, [\n                {x: choice.position.x - 15, y: choice.position.y},\n                {x: choice.position.x - 15, y: choice.position.y - 20},\n                {x: subtractor.position.x - subtractor.size.x/2, y: choice.position.y - 20},\n                {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y},\n            ], {color: \"#888\"}));\n            // if negative, we just re-use the remainder register\n            const regBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(regBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: choice.position.x + 20, y: choice.position.y - 10},\n                {x: choice.position.x + 20, y: regBit.position.y},\n            ], purple));\n            // otherwise we use the subtraction\n            choice.inputWires.push(new Wire(subtractor, i, [\n                {x: choice.position.x + 5, y: choice.position.y - 30},\n            ]));\n            subtractorChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Remainder Register\n        // includes many wires\n        // also includes register for holding the quotient input\n        const fullRow = [];\n        for (let i = 0; i <= 2*BITS; i++) {\n            const regBit = remainderRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            // This is the middle (full) row\n            const choice = new ChoiceGate(regBit.position.x + (i < BITS ? 5 : -1), regBit.position.y - 100, 14);\n            // Selection Wire (from clock's NOT)\n            choice.inputWires.push(new Wire(clockAnd, 0, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 40},\n                {x: 580 - 2*i, y: choice.position.y - 50 - 1*i},\n            ], purpleFaded));\n            // Purple action\n            if (i >= BITS && i < 2*BITS) {\n                // Upper Half of the Register: Conditionally connect to the subtractor.\n                choice.inputWires.push(new Wire(subtractorChoiceGates[i - BITS], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: choice.position.x - 7, y: choice.position.y - 25},\n                    {x: regBit.position.x - 19, y: choice.position.y - 25},\n                    {x: regBit.position.x - 19, y: regBit.position.y},\n                ], purple));\n            }\n            // Shifting\n            if (i > 0) {\n                choice.inputWires.push(new Wire(remainderRegister[i-1], 0, [\n                    {x: choice.position.x + 7, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: regBit.position.y + 0},\n                ], teal));\n            } else {\n                const holdWrite = new OutputBit(choice.position.x + 30, choice.position.y - 25, 20);\n                const notY = subtractorChoiceGates[0].position.y - 20;\n                const not = new Not(500, notY, 30, -90);\n                not.inputWires.push(new Wire(subtractor, BITS, [\n                    {x: subtractor.position.x - subtractor.size.x/2, y: notY},\n                    {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y}\n                ], {color: \"#888\"}));\n                // set on green\n                //holdWrite.inputWires.push(new Wire(clockNot, 0, [], teal));\n                // value is negated result of subtraction\n                holdWrite.inputWires.push(new Wire(not, 0, [], teal));\n                // maybe?\n                //choice.inputWires[1] = new Wire(holdWrite, 0, [], purple);\n                choice.inputWires.push(new Wire(holdWrite, 0, [], teal));\n                this.components.push(not, holdWrite);\n                this.outputComponents.push(holdWrite);\n            }\n\n            this.components.push(choice);\n            fullRow.push(choice);\n        }\n\n        // Computing the Quotient\n\n        // The second input register that is actually a register.\n        /*let divisorRegister: RegisterBit[] = [];\n        let divisorRegisterChoice = [];\n        for (let i = 0; i < BITS; i++) {\n            const reg = new RegisterBit(inputD[i].position.x - 4, 150, 20);\n            subtractor.inputWires.push(new Wire(reg, 0));\n            divisorRegister.push(reg);\n            this.components.push(reg);\n            this.outputComponents.push(reg);\n        }\n        // Wiring Divisor (denominator) to the Registers\n        for (let i = 0; i < BITS; i++) {\n            const reg = divisorRegister[i];\n            const or = new OrGate(reg.position.x - 9, reg.position.y - 25, 20, 0);\n            const choice = new ChoiceGate(reg.position.x + 9, reg.position.y - 55, 12);\n            reg.inputWires.push(new Wire(or, 0), new Wire(choice, 0));\n\n            const wirePath = [\n                {x: reg.position.x - 13, y: choice.position.y},\n                {x: reg.position.x - 13, y: startNot.position.y},\n            ];\n            or.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n            or.inputWires.push(new Wire(clockNot, 0, [\n                {x: or.position.x + 10, y: or.position.y - 18 - i/2},\n                {x: clockNot.position.x - 40, y: or.position.y - 18 - i},\n            ], tealFaded));\n\n            // choice gate is [0] ? [1] : [2]\n            // the selection comes first\n            choice.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n\n            // If the clock is off, the registers need to use the input bits\n            choice.inputWires.push(new Wire(inputD[i], 0));\n            // Else, move up\n            choice.inputWires.push(new Wire(divisorRegister[i+1] || null, 0, [\n                {x: reg.position.x + 15, y: choice.position.y - 15},\n                {x: reg.position.x - 22, y: choice.position.y - 15},\n                {x: reg.position.x - 22, y: reg.position.y + 10},\n            ]));\n\n            this.components.push(or, choice);\n        }*/\n\n        // Wiring Dividend to seed the remainder register\n        // (blue wires)\n        let dividendChoice: ChoiceGate[] = [];\n        for (let i = 0; i < BITS; i++) {\n            const regBit = remainderRegister[i];\n            const inBit = inputN[i];\n\n            // This is the one close to the lowest 6 registers\n            const choice = new ChoiceGate(regBit.position.x + 3, regBit.position.y - 50, 12);\n            // Wire coming from the start button\n            choice.inputWires.push(new Wire(startButton, 0, [\n                {x: choice.position.x - 15, y: choice.position.y},\n                {x: choice.position.x - 15, y: choice.position.y + 15},\n                {x: 770, y: choice.position.y + 15},\n                {x: 770, y: countdown.position.y + 40},\n                {x: clockX - 30, y: countdown.position.y + 40},\n                {x: clockX - 30, y: startButton.position.y + (startButton.position.x - clockX + 30)},\n            ], blue));\n\n            // If power is on, make it come from the teal/purple stuff\n            choice.inputWires.push(new Wire(fullRow[i], 0));\n\n            // Otherwise, set it to the input\n            const d = 3;\n            const y1 = countdown.position.y + 50;\n            const y2 = inBit.position.y + 30;\n            choice.inputWires.push(new Wire(inBit, 0, [\n                {x: choice.position.x + 6, y: choice.position.y - 10 - d*i},\n                {x: 760 - d*i, y: choice.position.y - 10 - d*i},\n                {x: 760 - d*i, y: y1 + d*i},\n                {x: clockX - 40 - d*i, y: y1 + d*i},\n                {x: clockX - 40 - d*i, y: y2 + d*i},\n                {x: inBit.position.x, y: y2 + d*i},\n            ], blueFaded));\n\n            this.components.push(choice);\n            dividendChoice.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Clearing the \"remainder\" (heh heh) of the register\n        // (blue wires)\n        for (let i = 0; i <= BITS; i++) {\n            const regBit = remainderRegister[i + BITS];\n            const and = new AndGate(regBit.position.x, regBit.position.y - 50, 24, 0);\n            // similar to above, use the full row if the power is on\n            and.inputWires.push(new Wire(fullRow[i+BITS], 0));\n            and.inputWires.push(new Wire(startButton, 0, [\n                {x: and.position.x + 5, y: and.position.y - 20},\n                {x: and.position.x + 13, y: and.position.y - 20},\n                {x: and.position.x + 13, y: and.position.y + 15},\n                {x: 770, y: and.position.y + 15},\n                {x: 770, y: countdown.position.y + 40},\n                {x: clockX - 30, y: countdown.position.y + 40},\n                {x: clockX - 30, y: startButton.position.y + (startButton.position.x - clockX + 30)},\n            ], blue));\n\n            this.components.push(and);\n            regBit.inputWires.push(new Wire(and, 0));\n        }\n\n        // Control Wire from the final register bit to the subtractor's output\n        /*const regLSB = divisorRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = subtractorChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 282, y: choice.position.y - 20},\n                {x: 282, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"rgb(127, 127, 127)\"}));\n            choice.inputWires.unshift(null);\n\n            // Else wire\n            const outBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: outBit.position.y - 19},\n            ], purpleFaded));\n        }*/\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i < 2*BITS; i++) {\n            const offset = (i < BITS ? 5 : -10);\n            const from = remainderRegister[i + (i >= BITS ? 1 : 0)];\n            const bit = new RegisterBit(from.position.x + offset, 580, 25);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 14th clock cycle\n            bit.inputWires.push(new Wire(countdown, 14, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: 790, y: bit.position.y - 30},\n                {x: 790, y: countdown.position.y + 40},\n                {x: countdown.position.x + countdown.outputSockets[14].x, y: countdown.position.y + 40},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const diagonal = 15;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayN = new Display(inputN[0].position.x + 50, inputN[0].position.y, inputN, false, 30);\n        const displayD = new Display(inputD[0].position.x + 50, inputD[0].position.y, inputD, false, 30);\n        const displayQ = new Display(557, 540, finalAnswer.slice(0, BITS), false, 30);\n        const displayR = new Display(200, 540, finalAnswer.slice(BITS, 2*BITS), false, 30);\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(subtractor, countdown, startButton, displayN, displayD, displayQ, displayR);\n    }\n\n    drawRemainderGuide(left: number, right: number, color: string, text: string) {\n        const ctx = this.context;\n        const x1 = (this.remainderRight - left*this.remainderSpacing) - 15;\n        const x2 = (this.remainderRight - right*this.remainderSpacing) + 15;\n        const y = 480;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"none\";\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x1 + 10, y + 10);\n        ctx.lineTo(x2 - 10, y + 10);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.33)\";\n        ctx.fillStyle = color;\n        ctx.font = \"30px monospace\";\n        ctx.strokeText(text, (x1 + x2)/2, y + 25);\n        ctx.fillText(text, (x1 + x2)/2, y + 25);\n    }\n\n    afterRender = () => {\n        // display the quotient\n        const ctx = this.context;\n        ctx.save();\n\n        // get the clock cycle\n        const cycle = this.countdown.state.clock;\n        if (cycle >= 0 && cycle < 2*this.numBits+3) {\n            const n = (cycle+1) >> 1;\n            this.drawRemainderGuide(n + 5, n + 0, \"#33c\", \"Remainder\");\n\n            if (n > 1) {\n                this.drawRemainderGuide(n-2, Math.max(n-7, 0), \"#990\", \"Quotient\");\n            }\n        }\n\n        ctx.restore();\n\n        // not sure where to put this\n        if (cycle == 2 * this.numBits + 3) {\n            this.startButton.state.active = false;\n            this.startButton.state.bits = [false];\n        }\n    }\n}\n\nexport default DividerExploration;\n","// FullAdderGates.ts\n//\n// Still just one bit each. That is, three total (A,B,carry).\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\nimport { AndGate, OrGate, XorGate } from './Gates';\n\nclass FullAdderExploration1 extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 400, 400);\n\n        const inputA = new InputBit(80, 50, false, 30);\n        const inputB = new InputBit(200, 50, false, 30);\n        const inputC = new InputBit(300, 200, false, 30);\n        const output1 = new OutputBit(200, 340, 30);\n        const output2 = new OutputBit(100, 340, 30);\n\n        const and1 = new AndGate(inputA.position.x + 10, 140, 50, 0);\n        and1.inputWires.push(new Wire(inputA, 0));\n        and1.inputWires.push(new Wire(inputB, 0, [\n            {x: and1.position.x + 10, y: and1.position.y - 40},\n        ]));\n\n        const xor1 = new XorGate(inputB.position.x - 10, 140, 50, 0);\n        xor1.inputWires.push(new Wire(inputA, 0, [\n            {x: xor1.position.x - 10, y: and1.position.y - 40},\n        ]));\n        xor1.inputWires.push(new Wire(inputB, 0));\n\n        const xor2 = new XorGate(200, 280, 50, 0);\n        xor2.inputWires.push(new Wire(xor1, 0));\n        xor2.inputWires.push(new Wire(inputC, 0, [\n            {x: xor2.position.x + 10, y: inputC.position.y, node: true},\n        ]));\n\n        output1.inputWires.push(new Wire(xor2, 0));\n\n        const and2 = new AndGate(output2.position.x + 30, 230, 50, 0);\n        and2.inputWires.push(new Wire(xor1, 0, [\n            {x: and2.position.x - 10, y: 180},\n            {x: xor1.position.x, y: 180, node: true},\n        ]));\n        and2.inputWires.push(new Wire(inputC, 0, [\n            {x: and2.position.x + 10, y: inputC.position.y},\n        ]));\n\n        // or gate for the \"2\" output\n        const or2 = new OrGate(output2.position.x, output2.position.y - 44, 50, 0);\n        or2.inputWires.push(new Wire(and1, 0, [\n            {x: or2.position.x - 10, y: and1.position.y + 30},\n            {x: and1.position.x, y: and1.position.y + 30},\n        ]));\n        or2.inputWires.push(new Wire(and2, 0, [\n            // add 12 because of the output bit\n            {x: or2.position.x + 10, y: (and2.position.y + or2.position.y + 12)/2},\n            {x: and2.position.x, y: (and2.position.y + or2.position.y + 12)/2}\n        ]));\n        output2.inputWires.push(new Wire(or2, 0));\n\n        this.components.push(output1, output2, and1, xor1, and2, xor2, or2, inputA, inputB, inputC);\n\n        // for ease of visualization\n        const aid1 = new OutputBit(xor1.position.x, xor1.position.y + 27, 12);\n        aid1.inputWires.push(new Wire(xor1, 0));\n        const aid2 = new OutputBit(and1.position.x, and1.position.y + 27, 12);\n        aid2.inputWires.push(new Wire(and1, 0));\n        const aid3 = new OutputBit(and2.position.x, and2.position.y + 27, 12);\n        aid3.inputWires.push(new Wire(and2, 0));\n        this.components.push(aid1, aid2, aid3);\n\n        // Number Display\n        const displayResult = new Display(320, 340, [output1, output2], false, 42);\n        this.components.push(displayResult);\n\n        const labelA = new Text(inputA.position.x, 20, 30, \"A\");\n        const labelB = new Text(inputB.position.x, 20, 30, \"B\");\n        const labelC = new Text(inputC.position.x, inputC.position.y - 40, 30, \"C\");\n        const text1 = new Text(output1.position.x, 375, 30, \"1\", { color: '#333' });\n        const text2 = new Text(output2.position.x, 375, 30, \"2\", { color: '#333' });\n        this.components.push(labelA, labelB, labelC, text1, text2);\n\n        // Updating\n        this.outputComponents.push(output1, output2, aid1, aid2);\n    }\n}\n\nexport default FullAdderExploration1;\n","// GateExploration\n//\n// Basic exploration of AND, OR, XOR, and NOT gates\n\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\n\nclass GateExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 480, 240);\n\n        const types = [AndGate, OrGate, XorGate];\n        for (let i = 0; i < 3; i++) {\n            const bit1 = new InputBit(i*120 + 60, 40, false, 30);\n            const bit2 = new InputBit(i*120 + 120, 40, false, 30);\n            const gate = new types[i](i*120 + 90, 120, 60, 0);\n            gate.inputWires.push(new Wire(bit1, 0, [\n                {x: gate.position.x - 12, y: gate.position.y - 40},\n                {x: bit1.position.x, y: gate.position.y - 40},\n            ]));\n            gate.inputWires.push(new Wire(bit2, 0, [\n                {x: gate.position.x + 12, y: gate.position.y - 40},\n                {x: bit2.position.x, y: gate.position.y - 40},\n            ]));\n            const out = new OutputBit(i*120 + 90, 200, 30);\n            out.inputWires.push(new Wire(gate, 0));\n            this.components.push(gate, bit1, bit2, out);\n            this.outputComponents.push(out);\n        }\n\n        const notInput = new InputBit(420, 40, false, 30);\n        const notGate = new Not(420, 120, 60, 0);\n        notGate.inputWires.push(new Wire(notInput, 0));\n        const notOutput = new OutputBit(420, 200, 30);\n        notOutput.inputWires.push(new Wire(notGate, 0));\n        this.components.push(notGate, notInput, notOutput);\n        this.outputComponents.push(notOutput);\n    }\n\n}\n\nexport default GateExploration;\n","// HalfAdderCheat.ts\n//\n// The finished product with no accompanying circuit.\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\n\nclass HalfAdderCheat extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 300, 300);\n\n        const inputA = new InputBit(100, 40, false, 30);\n        const inputB = new InputBit(200, 40, false, 30);\n        const output1 = new OutputBit(150, 240, 30);\n        const output2 = new OutputBit(75, 240, 30);\n        const adder = new Adder(150, 150, 1, 200, 100);\n        this.components.push(adder, inputA, inputB, output1, output2);\n        adder.inputWires.push(new Wire(inputA, 0));\n        adder.inputWires.push(new Wire(inputB, 0));\n        output1.inputWires.push(new Wire(adder, 0));\n        output2.inputWires.push(new Wire(adder, 1));\n\n        const displayResult = new Display(240, 250, [output1, output2], false, 40);\n        this.components.push(displayResult);\n        this.outputComponents.push(output1, output2);\n\n        const text1 = new Text(150, 275, 24, \"1\", { color: '#333' });\n        const text2 = new Text(75, 275, 24, \"2\", { color: '#333' });\n        this.components.push(text1, text2);\n    }\n}\n\nexport default HalfAdderCheat;\n","// MultiplierExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, OrGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\n\nclass MultiplierExploration extends Exploration {\n    countdown: Clock;\n    regSpacing: number;\n    regRight: number;\n    productRegister: OutputBit[];\n    numBits: number;\n    startButton: InputBit;\n\n    animated: boolean = true;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 800;\n        canvas.height = 600;\n\n        const BITS = 6;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(760, 40, false, 50);\n        this.startButton = startButton;\n        const startNot = new Not(680, 40, 30, 90);\n        startNot.inputWires.push(new Wire(startButton, 0));\n        this.components.push(startNot);\n\n        const clockX = 755;\n\n        const clockAnd = new AndGate(clockX, 100, 25, 0);\n        const clockNot = new Not(clockX, 150, 25, 0);\n        const clockBit = new OutputBit(clockX, 200);\n\n        clockAnd.inputWires.push(new Wire(clockNot, 0, [\n            {x: clockX - 5, y: 75},\n            {x: clockX - 20, y: 75},\n            {x: clockX - 20, y: 175},\n            {x: clockX, y: 175}\n        ]));\n        clockAnd.inputWires.push(new Wire(startButton, 0));\n        clockBit.inputWires.push(new Wire(clockNot, 0));\n        clockNot.inputWires.push(new Wire(clockAnd, 0));\n        this.components.push(clockAnd, clockNot, clockBit);\n        this.outputComponents.push(clockBit);\n\n        // ironic that I called the above a \"clock\"\n        // when the clock strikes 2*BITS + 1 it will end the operation\n        const countdown = new Clock(730, 260, 14, 80, 50);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: 705, y: countdown.position.y - 40},\n            {x: 705, y: 40},\n        ]));\n        this.countdown = countdown;\n\n        const adder = new Adder(180, 190, BITS, 270, 90);\n        //this.outputComponents.push(adder);\n\n        // The \"Register\" that really isn't.\n        // The Add and Shift steps should be successfully separated...\n        let productRegister = [];\n        this.regRight = 730;\n        this.regSpacing = 55;\n        for (let i = 0; i < 2*BITS+1; i++) {\n            const reg = new OutputBit(this.regRight - this.regSpacing*i, 430, 20);\n            productRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.4)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n\n        // Wires from the registers to the adder.\n        for (let i = 0; i < BITS; i++) {\n            const d = 3;\n            const bit = productRegister[i + BITS];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            adder.inputWires.push(new Wire(bit, 0, [\n                {x: adder.position.x + adder.inputSockets[i].x, y: 110 + d*i},\n                {x: 10 + d*i, y: 110 + d*i},\n                {x: 10 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\"}));\n        }\n\n        // And Gates coming out of the adder (for the clock).\n        let adderChoiceGates = [];\n        for (let i = 0; i <= BITS; i++) {\n            // and gate\n            //const x = adder.position.x + adder.outputSockets[i].x;\n            const y = adder.position.y + adder.outputSockets[0].y; // put them all on the same line\n            // space them a bit\n            const choice = new ChoiceGate(productRegister[i+BITS].position.x + 7, y + 50, 10);\n            // this will be input 0 temporarily but we will unshift later\n            choice.inputWires.push(new Wire(adder, i));\n            adderChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Multiplication Register\n        for (let i = 0; i < 2*BITS + 1; i++) {\n            const regBit = productRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            const choice = new ChoiceGate(regBit.position.x, regBit.position.y - 60, 14);\n            // Selection Wire (from clock's NOT)\n            choice.inputWires.push(new Wire(clockNot, 0, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 24},\n                {x: 630 - 2*i, y: choice.position.y - 60 - i},\n            ], tealFaded));\n            // Shifting\n            if (i < 2*BITS) {\n                choice.inputWires.push(new Wire(productRegister[i+1], 0, [\n                    {x: regBit.position.x - 7, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: regBit.position.y},\n                ], teal));\n            } else {\n                choice.inputWires.push(null);\n            }\n            if (i >= BITS) {\n                // Upper Half of the Register: Conditionally connect to the adder.\n                choice.inputWires.push(new Wire(adderChoiceGates[i - BITS], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: regBit.position.x + 7, y: choice.position.y - 20},\n                    {x: regBit.position.x + 20, y: choice.position.y - 20},\n                    {x: regBit.position.x + 20, y: regBit.position.y},\n                ], purple));\n            }\n\n            this.components.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Input Numbers (A and B).\n        let inputA = [];\n        let inputB = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(320 - i*30, 60, false, 25);\n            this.components.push(input);\n            adder.inputWires.push(new Wire(input, 0));\n            inputA.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(630 - i*50, 60, false, 25);\n            this.components.push(input);\n            inputB.push(input);\n        }\n\n        // The second input register that is actually a register.\n        let multiplierRegister: RegisterBit[] = [];\n        let multiplierRegisterChoice = [];\n        for (let i = 0; i < BITS; i++) {\n            const reg = new RegisterBit(inputB[i].position.x - 4, 170, 20);\n            multiplierRegister.push(reg);\n            this.components.push(reg);\n            this.outputComponents.push(reg);\n        }\n        // Wiring to the Registers\n        for (let i = 0; i < BITS; i++) {\n            const reg = multiplierRegister[i];\n            const or = new OrGate(reg.position.x - 9, reg.position.y - 25, 20, 0);\n            const choice = new ChoiceGate(reg.position.x + 9, reg.position.y - 60, 12);\n            reg.inputWires.push(new Wire(or, 0), new Wire(choice, 0));\n\n            const wirePath = [\n                {x: reg.position.x - 13, y: choice.position.y, node: true},\n                {x: reg.position.x - 13, y: startNot.position.y, node: (i < BITS-1)},\n            ];\n            or.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n            or.inputWires.push(new Wire(clockNot, 0, [\n                {x: or.position.x + 10, y: or.position.y - 18 - i/2},\n                {x: clockNot.position.x - 40, y: or.position.y - 18 - i},\n            ], tealFaded));\n\n            // choice gate is [0] ? [1] : [2]\n            // the selection comes first\n            choice.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n\n            // If the clock is off, the registers need to use the input bits\n            choice.inputWires.push(new Wire(inputB[i], 0));\n            // Otherwise hold\n            choice.inputWires.push(new Wire(multiplierRegister[i+1] || null, 0, [\n                {x: reg.position.x + 15, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y + 10},\n            ]));\n\n            this.components.push(or, choice);\n        }\n\n        // Control Wire from the final register bit to the adder's output\n        const regLSB = multiplierRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = adderChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 400, y: choice.position.y - 20},\n                {x: 400, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"rgb(127, 127, 127)\"}));\n\n            // Else wire\n            const outBit = productRegister[i + BITS];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 4, y: choice.position.y - 10},\n                {x: choice.position.x + 11, y: choice.position.y - 10},\n                {x: outBit.position.x + 18, y: 305 + 2*i},\n                {x: outBit.position.x + 18, y: outBit.position.y - 18},\n            ], purpleFaded));\n        }\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i <= 2*BITS; i++) {\n            const offset = 5;\n            const bit = new RegisterBit(productRegister[i].position.x + offset, 530, 30);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 12th clock cycle\n            bit.inputWires.push(new Wire(countdown, 12, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: 780, y: bit.position.y - 30},\n                {x: 780, y: countdown.position.y + 40},\n                {x: countdown.position.x + countdown.outputSockets[12].x, y: countdown.position.y + 40},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const from = productRegister[i];\n            const diagonal = 16;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayA = new Display(245, 25, inputA, false, 30);\n        const displayB = new Display(510, 20, inputB, false, 30);\n        const displayEnd = new Display(400, 575, finalAnswer, false, 48);\n        displayEnd.size.x = 2*displayEnd.size.y;\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(adder, countdown, startButton, displayA, displayB, displayEnd);\n        this.productRegister = productRegister;\n    }\n\n    drawProductGuide(left: number, right: number, color: string, text: string) {\n        const ctx = this.context;\n        const x1 = (this.regRight - left*this.regSpacing) - 15;\n        const x2 = (this.regRight - right*this.regSpacing) + 15;\n        const y = 460;\n        ctx.save();\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"none\";\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x1 + 10, y + 10);\n        ctx.lineTo(x2 - 10, y + 10);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.75)\";\n        ctx.lineWidth = 2;\n        ctx.fillStyle = color;\n        ctx.font = \"30px monospace\";\n        ctx.strokeText(text, (x1 + x2)/2, y + 25);\n        ctx.fillText(text, (x1 + x2)/2, y + 25);\n        ctx.restore();\n    }\n\n    afterRender = () => {\n        const ctx = this.context;\n\n        const cycle = this.countdown.state.clock;\n        if (cycle >= 0) {\n            const n = (cycle + 1) >> 1;\n            if (n <= 5) {\n                ctx.fillStyle = \"rgba(255,255,255,0.75)\";\n                const west = (this.regRight - this.regSpacing * (5-n)) - 20;\n                const north = 340, south = 480;\n                const east = (this.regRight) + 22;\n                ctx.beginPath();\n                ctx.moveTo(west, north);\n                ctx.lineTo(east, north);\n                ctx.lineTo(east, south);\n                ctx.lineTo(west, south);\n                ctx.fill();\n            }\n\n            // product value\n            let productValue = 0;\n            for (let i = 0; i < this.numBits + n; i++) {\n                const bit = this.productRegister[i + (6-n)];\n                productValue += Number(bit.state.bits[0]) * (1 << i);\n            }\n\n            this.drawProductGuide(2 * this.numBits, this.numBits - n, \"#33c\", `Product (${productValue})`);\n        }\n\n        if (cycle == 2*this.numBits + 1) {\n            this.startButton.state.active = false;\n            this.startButton.state.bits = [false];\n        }\n    }\n}\n\nexport default MultiplierExploration;\n","\nimport Exploration from './Exploration';\n\n// Alphabetized because... idunno\nimport AdderExploration from './AdderExploration';\nimport BinaryExploration from './BinaryExploration';\nimport ChoiceExploration from './ChoiceExploration';\nimport ClockExploration from './ClockExploration';\nimport DividerExploration from './DividerExploration';\nimport FullAdderExploration1 from './FullAdderGates';\nimport GateExploration from './GateExploration';\nimport HalfAdderCheat from './HalfAdderCheat';\nimport MultiplierExploration from './MultiplierExploration';\nimport RegisterExploration from './RegisterExploration';\nimport SubtractorExploration from './SubtractorExploration';\n\nfunction createCanvas(): HTMLCanvasElement {\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    return canvas;\n}\n\n// in milliseconds\nconst UPDATE_TIMES = [4000, 2500, 1600, 1000, 630, 400, 250]\n\nfunction createExploration(id: string, type: typeof Exploration): Exploration | undefined {\n    const element = document.getElementById(id);\n    if (!element) {\n        console.warn(\"Document element \" + id + \" not found.\");\n        return;\n    }\n\n    element.className += \" row\";\n\n    const canvasWrapper = document.createElement(\"div\");\n    canvasWrapper.className = \"canvas-wrapper col-auto\";\n    const canvas = createCanvas();\n    canvasWrapper.appendChild(canvas);\n    element.appendChild(canvasWrapper);\n\n    const exploration = new type(canvas);\n    exploration.update();\n    canvas.addEventListener(\"click\", function(event) {\n        exploration.onClick(event.offsetX, event.offsetY);\n    });\n\n    // For animated explorations, have speed controls\n    if (exploration.animated) {\n        const controls = document.createElement(\"div\");\n        controls.className = \"controls col-auto\";\n        controls.innerHTML = `\n            <h4>Speed</h4>\n            <p style=\"margin-top: 0\">\n                Slow\n                <input id=\"speed-${id}\" name=\"speed\" type=\"range\" min=\"0\" max=\"${UPDATE_TIMES.length - 1}\" />\n                Fast\n            </p>\n            <div class=\"buttons\">\n                <button id=\"pause-${id}\">Pause</button>\n                <button id=\"resume-${id}\">Play</button>\n                <button id=\"step-${id}\">Step</button>\n            </div>\n        `;\n        // get those buttons\n        controls.querySelector(\"#speed-\" + id)!.addEventListener(\"change\", function(event) {\n            exploration.updateTime = UPDATE_TIMES[Number((event.target as HTMLInputElement).value)];\n        });\n        element.appendChild(controls);\n\n        const pauseButton = (controls.querySelector(\"#pause-\" + id) as HTMLButtonElement);\n        pauseButton.addEventListener(\"click\", function() {\n            exploration.pause();\n            pauseButton.disabled = true;\n            resumeButton.disabled = false;\n        });\n        pauseButton.disabled = true;\n        const resumeButton = controls.querySelector(\"#resume-\" + id) as HTMLButtonElement;\n        resumeButton.addEventListener(\"click\", function() {\n            exploration.resume();\n            pauseButton.disabled = false;\n            resumeButton.disabled = true;\n        });\n        controls.querySelector(\"#step-\" + id)!.addEventListener(\"click\", exploration.update.bind(exploration));\n\n        //exploration.resume();\n    }\n\n    return exploration;\n}\n\n\n// Explorations\nlet ALL_EXPLORATIONS: (Exploration | undefined)[] = [];\nALL_EXPLORATIONS.push(\n    createExploration('binary-basic', BinaryExploration),\n    createExploration('adder', AdderExploration),\n    createExploration('gates', GateExploration),\n//ALL_EXPLORATIONS.push(createExploration('subtractor', SubtractorExploration));\n    createExploration('choice', ChoiceExploration),\n    createExploration('half-adder-cheat', HalfAdderCheat),\n    createExploration('gates-again', GateExploration),\n    createExploration('full-adder1', FullAdderExploration1)\n);\n//ALL_EXPLORATIONS.push(createExploration('clock', ClockExploration));\n\nALL_EXPLORATIONS.push(createExploration('multiplier-full', MultiplierExploration));\nALL_EXPLORATIONS.push(createExploration('divider-full', DividerExploration));\n//ALL_EXPLORATIONS.push(createExploration('3', RegisterExploration));\n\nfunction renderLoop() {\n    // TODO: Put this in exploration\n    for (let i = 0; i < ALL_EXPLORATIONS.length; i++) {\n        const exploration = ALL_EXPLORATIONS[i];\n        if (exploration) {\n            exploration.render();\n        }\n    }\n    requestAnimationFrame(renderLoop);\n}\nrenderLoop();\n\n// some other stuff\nfunction fillInteractiveTable(table: HTMLTableElement) {\n    if (table === null) return;\n    const html = `<input type=\"number\" min=\"0\" max=\"1\" size=\"3\" />`;\n    const fillIn = table.tBodies[0].getElementsByTagName(\"tr\");\n    for (let i = 0; i < fillIn.length; i++) {\n        const out1 = document.createElement(\"td\");\n        out1.innerHTML = html;\n        const out2 = document.createElement(\"td\");\n        out2.innerHTML = html;\n        fillIn[i].appendChild(out1);\n        fillIn[i].appendChild(out2);\n    }\n}\nfillInteractiveTable(document.getElementById(\"fill-in\"));\n"]}