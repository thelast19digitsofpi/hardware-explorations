{"version":3,"sources":["Exploration.ts","InputBit.ts","OutputBit.ts","Adder.ts","Wire.ts","Gates.ts","Display.ts","AdderExploration.ts","ChoiceGate.ts","ChoiceExploration.ts","RegisterBit.ts","Subtractor.ts","Clock.ts","DividerExploration.ts","MultiplierExploration.ts","main.ts"],"names":[],"mappings":";;AeGA;;AACA;;AAEA;AZNA,AIEA,AEGA,ADLA,AIAA,ANAA,AO6BA,Ab7BA,AKAA,AJAA,AaEA,AZFA,AQAA,ACAA,APAA;ADKA,AKJA,AIAA,ANAA,ANAA,ACAA,ACAA,AQAA,ACIA,APCA,AWCA,IZFA,AQAA,KRAA,KQAA;ARAA,AIFA,AEGA,ADJA,AIAA,ANAA,AO4BA,Ab5BA,ACGA,AaFA,AZGA,AQJA,ACGA,APEA,IHFA,ACCA,AECA,IAAA,IHFA,CCCA;ACDA,AKFA,AIIA,ANAA,ANDA,ACDA,ACCA,AQHA,ACEA,APEA,IQAA,ANAA,ANDA,OMCA,CHFA,AQAA,ECEA,CZDA;AGQI,AIVJ,AEGA,ADCA,AIDA,ANAA,AOwBA,AbzBA,ACDA,AaDA,AZEA,AQEA,ACMI,APPJ,IICA,AEAA,QTHA,ACCA,AECA,EICA,CEAA;APOI,AKPJ,AIDA,ANAA,ANDA,ACQI,ACCA,AQPJ,ACOI,APEA,AWfJ,WZaI,AFDA,ACCA,ASAA,APEA,CQVJ,ANAA,ANDA,GIWI,CDFA,ACGI,CDHQ,CAAZ,ACEA,CHHA,CECuB,AFDX,ACCZ,AEII,CDJJ,AFDA,ACCY,ASAZ,CTAA,ASAY,CRAsB,AFDX,AUCvB,CVDA,ACCuB,CAAvB,ASAuB,CVDW,AUClC,CRAA,ADAkC,CSAA,APElC,CDFgD,CCK5C,CHNJ,ACCA,CSAA,CVD0D,ACCP,CCAnD,AQAgD,ERAyB,CFDzE,EAA2E,AUC3E,APEA,EOFyE,APMrE,CDNJ,EAAiG,GQAjG,CPEA,COFiG,CPMpE;ADNmB,AIVpD,AEGA,ADAA,AIQI,ANEA,AOcJ,AbTI,ACTkC,AaTtC,AZUsC,AQPtC,ACOoD,APK5C,AWTR,QZIoD,AFDd,ACCA,ASAc,APK5C,CWTC,EfYL,CQfJ,ANOsC,AQPtC,CPOoD,AFDd,AUCc,ITAd,AEK9B,CDL4C,AFDd,AUCc,GIJpD,CfYI,AERkC,AEK9B,CDL4C,AHQpC,ACTsB,ACCA,ASAc,CRAA,AFDd,AUCc,AIJ/B,CbIiB,CCAc,AFDd,AUCc,CPK5C,CAAA,CJGJ,CIHI,CJGiC;AGRW,AKEhD,AIAA,ANEA,ANNO,ACC2B,ACCA,AQElC,ACFgD,APK5C,AWRJ,MZGgD,AFDd,ACCA,ASAc,APK5C,AWRE,GfCC,CEE2B,CCAc,ASEhD,AXHkC,AUCc,CIHpC,CbGsB,CCA8B,AFD9B,AUC8B,CTA9B,AEK9B,AWR8B,EfC3B,CGE6D,AQAA,APKhE,CHN8B,CDDP,AIOvB,CDLiE,ASErE,ADFqE,CCEzD,CTFoC,ASEhD,ADFgD,AIHN,CAAC,CHKpB,AZJhB,CYIP,AZMqC,CAVH,CYIA,IAAlC,EAAgD,GGLd,CAAuB,CHKzD,EAAqE,KGLnC,CHKlC,AGLA,EHKwF;ATFjB,AIT3E,AEGA,ADSI,AIDgD,ANGhD,AOaJ,AZnB4D,AaR5D,AZSuD,AQGnD,ACHuE,APK3B,AWP5C,QHIgD,CGJzC,EPKP,AEAA,EEDgD,EGJhD,GHIgD,GJChD,CAAY,AEAZ,CFAA,AIDgD,AFCpC,CEDoC,AFChD,CFAuB,CAAvB,AIDgD,AFCzB,CAAvB,CFAkC,CEAA,GFAlC,CEAA,CFAmD,CEAA;AFAjB,AIDc,ANIhD,ANNO,AUG2B,AKJrC,EAED,IHCoD,EJCd,AEAA,CVH3B,EYEyC,ANIhD,CEHkC,AEAA,EEDc,CZFzC,EQG2B,AIDc,AFCd,CJGlC,ANNyB,CMMb,CAAZ,EEHkC,AFGX,AIHW,CFAA,AFGlC,ANNO,AUG2B,EFAA,AFGA,AIHA,UJGlC,EAA2D,MAA3D,EAAoF,IAApF,EAAqG;AHN5B,AIR7E,AEGA,ADQsC,AIDiC,ANIR,AOa/D,AblBW,ACFmD,AaP9D,AZSQ,AQE8B,ACHuC,APMrE,MIH8B,AEAA,EPHuC,AGMd,ALPD,AUCe,APMrE,CJLG,AEAE,CMEyB,AEAA,ETJwB,COIxB,AEAA,CPHuC,AGMd,AKNc,CHGvC,AEAA,ANG9B,EHPsD,ACEtD,ECDqE,AGMd,ANLpD,AWDkE,CTCrD,AEKhB,EJLwB,ACF8B,CAAA,CECe,AGMd,AKNc,CRAA,AGMd,ALPD,AUCe,APMrE,CJLG,AIKH,CDNqE,AGMd,AKNc,CPMrE;ADNqE,AKGtB,AFGQ,ANJpD,ACHmD,ACEpC,AQE6B,ACHsB,APMrE,MDNqE,AGMd,ALPD,ACEpC,ASDmD,APMrE,CFLmB,EFChB,AEDkB,CDFiC,ACEtC,ECDqD,AGMd,AKNc,CVDf,AGOtD,EDNsF,AGM/B,ALPD,AUCgC,CPMtF,EAAA,EDN2F,AGMpC,ANJpD,AWFwF,GRAC,AHEnE,AWFmE,CRAvB,AQAA,GXExC,CAAC,GAAL,EAAtB;AGF0F,AIPrG,AKSyE,ANIa,AOctF,AbXQ,ACVuE,AaN/E,AZQgC,ASDqE,APMpE,AWJjC,IAAM,EbD0B,CAAC,CUCwC,CZO5D,AERsB,KUCsC,CZOjE,CePU,EfOI,CYPmD,AGApD,CAAC,IHAmD,AZOjE,AePa,CHAoD,CGA7C,CHA6C,GGApD,EAAa,IAAb,EAAmB,IAAnB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,CAArB;APEQ,AIFiE,AZQjE,AETgB,AQGhB,KRHA,CUCiE,GJE5D,ARMA,AUNA,GEF4D,GAAA,CZQjE,CQNA,AIFiE,AFEjE,EVMe,CQNC,AEAA,KVMK,CAAC,UAAP,CAAkB,IAAlB,CAAf;AGTA,AMhBR,ADoBY,AIHgF,ANIJ,AOexF,AbVQ,ACXA,AaNR,AZQQ,AQGI,ACJJ,AIGR,MPCY,AEAA,CFAC,AEAA,CJC2E,CHL3E,AKIE,ARMF,ACXA,ACEA,AQGE,ACJF,AIGJ,CPAe,AEAA,CNES,CEAuD,AFPpF,CFGI,GAAY,CCDZ,AGKgF,ALNhF,AUCA,EXUA,CGVgB,AFDA,AUCA,ELKgE,ANK9D,CML8D,CNKhF,CMLgF,CSFxF,CAA2B,EAA3B,EAAuC,IAAvC,EAA+D;AZFnD,AMhBZ,ADoBY,AFA4E,ANMhF,ACXI,ACCU,AQIV,ACJA,AIGR,MZHQ,AKIA,AFA4E,ALL5E,ACCU,AQIV,ACJA,AIGF,CZHG,AKIA,APLA,ACCU,AQIV,ACJA,ERAE,AKIA,ARMF,ACXE,ACCU,AQIV,ACJA,CRDS,AGKgE,ALNhE,AUCA,GLKgE,AJJpE,AaGH,ETCuE,CSDpE,QAAQ,CfOpB,AePqB,GfOG,EAAxB,CAJiC,CAMjC,OeTY,CAAwB,EAAxB,CAAhB;AZFQ,AIlBZ,AEEA,ADiBwB,AIDhB,ANGiG,AOgBzG,AZpBY,AaPZ,AZO+B,AQEP,ACDZ,KHCJ,AEAA,CPDI,AFDA,ACAmB,ASCnB,CRAC,AFDA,ACAmB,ASCnB,ERAE,ASAF,AXDE,ACAmB,ASCnB,QCAP,GAAgB;ATFA,AMbxB,ADqBQ,AILI,AZWJ,ACfgB,ACEJ,AQOZ,ACRgB,APDpB,AWMA,IfSI,CGdA,AFDA,ACEA,ASDA,CCGI,AGEJ,CHFK,AGEJ,EPGI,AILE,AFKF,ANTT,CQGoB,AZYV,CAAC,EQNP,AEAA,CKHJ,EPGgB,ARMZ,AUNY,AKHF,EXNd,CJemB,EIfwB,EAA3C,EJeyB,CAAC,MAAP,GAAgB,GAA/B,CAPiC,CASjC;AGXA,AKII,AILA,ANEJ,AOgBR,AZnBQ,AaRR,AZOQ,AQOI,ACJJ,APEA,AWDA,MPGI,AILA,AFKA,CFAC,AILA,AFKA,EPJA,AKIE,AILA,ANEF,ALHA,ACDA,AQOE,ACJF,APEA,CWDC,GZDN,AKIW,APNX,ASKY,ACHZ,CTHA,AaIU,EZDE,AKIA,APNA,AUEA,CHGA,AFFZ,AJJa,EaIP,CTAU,AFChB,AWDgB,GXCG,EAAnB,iBWDsC,EAAtB,GAA2B,aAArC,CAAN;AZAI,AKIA,AIRY,ANKZ,ANUJ,ACbI,ACFW,AQQX,ACJA,APEJ,AWDH,KHLG,CTII,AKIA,AFHA,ALHA,ACFW,AQQX,ACJA,CRAC,AKIA,AFHA,ALHA,ASMA,ACJA,CXWD,CGXG,AKIA,AFHA,ALHA,ASMA,ACJA,APEF,CEFW,ANWV,AEfa,EAAE,CFeZ,ACdG,ACDU,CCGV,AQAA,GXYC,AITb,CJSc,AEfO,EEML,GJSP,CAAW,IAAI,AITxB,CJSyB,MAAL,KAAgB,GAA3B,CAAT;AGVI,AKCQ,AIDZ,ANCI,ANUJ,ACbI,ACHS,AQMD,ACDR,APEJ,IJSA,CQVA,ANNA,AQMA,CPDI,AGCA,ALHA,AUEA,CRAC,AGCA,ALHA,AUEA,ERAE,ASAF,ANCE,ALHA,AUEA,APEF,CJSC,CAAC,EYXP,GAAY,EREZ,GAAiB,IJSjB,CAAsB,IITtB,EJSA,EAA8B,gBAAgB,EAA9C,EAAkD;AGbtC,AKQZ,AILI,ANFY,ANaZ,AChBQ,ACCZ,AQSA,ACRY,APMZ,AWFJ,EAAA,GZJI,AGCA,ALHA,AUEA,CCGI,AZWA,CYXC,EJKA,AILE,AVJF,AQSA,ANFA,AWFF,CAAC,CfUK,EAAE,CQNX,AINY,AFMZ,ANFA,GIEa,AEAA,ANFH,CAAA,CWFd,CXEc,CFPV,EEOa,AWFI,CbLG,CAAC,IaKzB,CXEwB,CAAC,KAAX,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,EAAhB,GAAoB,MAA9B;ADDA,AKII,AILA,ANEJ,AO3BR,AbkC0D,ACVlD,AaxBR,AZoB8B,AQUlB,ACJJ,APEH,AWDD,KfOI,CQJI,AILA,AVLkB,AQUlB,AKHF,CHFG,AVLkB,ECMlB,ASDE,ANEF,ALHA,ACJoB,ASMpB,CHIG,ANVa,AQUb,EFAE,AEAA,CFAC,AFHX,AIGW,CPJX,AFFA,AUEA,ELCY,CHDC,AFFA,AUEA,CHIH,AEAA,CKHK,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAtB;AZAQ,AKES,AIND,ANKR,ANSJ,ACZI,ACLwB,AQSf,ACFT,AICR,EAAA,EfSI,CQRA,AINA,AFMA,CPFI,ASVgF,ANWhF,ALHA,ACLwB,AQFmB,ACS3C,CCAJ,ANCK,AJRwB,AQa7B,EJLO,AJRwB,CCOvB,AQAA,CXUD,CGVG,AHUF,ACZE,AUEA,CLCC,CLHC,CDYZ,AeTS,CTAK,ANSF,AeTF,CTDE,CNUZ,CCba,CDaG,IAAhB,CeTJ,GAA0B,yBAA1B;AZFiB,AKMb,AFHI,ANSP,ACZO,ACNiB,ASMR,APIjB,AWDA,EXCA,CJxBJ,CAkCI,CGdI,ADNoB,ASMpB,CLGI,ALHA,ACNJ,AEUJ,AWDM,CTAG,AJd0C,AEenD,CIEU,ANXN,CIQO,CLHC,EAAE,AcGF,CdHG,COMC,COHD,CXCf,CIEmB,AJFnB,CHJc,EGId,CIEuB,EJFvB,CIE0B,GAAtB,AOHuB,EAA3B,MXCA;ADAI,AKGA,AILA,ANDY,ALHC,ASUb,ACJA,APCA,AWDJ,EAAA,GTHI,ALHA,GWIM,AFMA,CPJD,AKGA,AGHA,KDIO,CKJH,CZAT,ASFc,ADEd,AIAU,CLIK,EPJA,ASFa,ADEb,EHGf,AECmB,EPJnB,AQAA,CHGoB,AILa,AFMX,CFAlB,AIN8B,EGEtC,CLII,AKJsB,CHFW,CAAL,CAAY,GAAZ,AGEhC,CHFgD,UAAA,CAAA,EAAC;ATI7C,AKEK,AIN4C,ANGjD,ALFA,ACPA,AQaA,ACHA,APAA,AWDJ,EAAA,IPGS,CAAC,CJFF,CDAC,AKEG,AFHH,ALFA,ACPA,AQaA,ACHA,APAA,AWDF,CPGM,AOHL,GHH6C,CRIvC,CIEI,AFHd,GMHiD,ANGnC,CEGL,CAAU,CLFnB,AKEQ,APLR,ASMA,ACHA,AIDJ,CbTI,AaSgB,EZCI,AKEG,AFHvB,ALFoB,ASMA,ACHA,CHEZ,ANZa,AQcjB,ANJJ,CDAA,AFHA,ACPsB,ASUtB,CRjB6F,AFDtB,AUCsB,APiBtE,CDCvB,AKCyB,APLD,AUIxB,CHCI,KJF0B,CWDlC,IXC2B,CAF3B,CAGI;AIC4B,AIN0B,ANItD,ANUJ,AKrCJ,AHiB+B,AQclB,AKHT,EfSA,EKrCJ,COuBoC,CJMA,AIN5B,AVNuB,AQclB,AKHH,CPC2B,ANZL,AQclB,CL/Bd,CG6BuC,AFF1B,AJVqB,AQclB,CRdc,AQcb,GVMb,CAAA,EUNQ,CKHS,ETDb,CSCgB,ETDE,CNUtB,CAAA,AeTwB,IAAJ,CAAS,CfS7B,EMVI,CNUJ,EeToB,CAApB,SfSA;AGRI,AKAI,AILJ,ANKA,AD7BR,AJyBQ,ACR6B,AQcZ,ACFjB,APAA,AWAJ,EAAA,GPDwB,CNXS,AQcZ,CFDb,ANb0B,AQcZ,CPFZ,AQAA,CCLD,ANKA,ALJA,ACR2B,AQcZ,CAAC,CNFd,EWAA,CHLP,ANKA,ASAQ,CZAK,AQAA,CPAD,CQLC,ANKA,CHAG,AQAA,CVJhB,CcIJ,EdJsB,CEIG,AQAA,CVJrB,GEIyB,AQAA,APAlB,CAAiB,GDAK,AQAA,EPAtB,CAAuB,CDAT,AQAI,CRAzB,EQAoC,APA7B,COAc,APAc,COAnC,IPAwC,QAAjC,KAA8C,KAArD;AICK,AILD,ANKA,AD9BZ,AJ0BQ,ACTsB,AQclB,ANDP,AWAD,EAAA,CXLA,EFRyB,AQaD,CFAf,AILD,AVRJ,CMaM,AEEF,CKFF,CPAM,APJH,AcIF,CPAM,AILD,EAAE,APzBlB,IG8BY,IINS,EXEb,GAAqB,AcIzB,CdHQ,AcGgB,OAAxB,EAAiC,UAAS,KAAT,EAAc;AZA3C,AKAiB,AIJb,ANKA,ANOJ,AK7BJ,AJkBS,ACTL,AQcK,ACFL,AICA,IAAA,EPDiB,AIJb,ANKA,ALJC,ASKA,CFFa,APHZ,ASKA,EPFD,AKAe,ARQf,ACXG,ACTH,AQcI,ACFJ,CHAgB,AFCb,ALJJ,CWDK,CNKC,CHDD,ASJE,ADIF,CRAC,ASJE,ADIF,CHAgB,AEEtB,AKDO,CfOX,AePY,CZDC,AHQA,AWRA,CRAb,AQAA,CHAqB,ANZrB,CCYgB,AKAe,AGAf,CRAC,AKAG,AGAH,CTZC,CaalB,CZDoB,AKAa,ANZjC,ASYoB,AICA,EfOpB,CAAuB,CGRvB,AHQA,AWRA,CICyB,CZDC,AHQA,AWRA,AICA,CZDC,AHQ3B,AWR2B,ERA3B,AHQ6B,AWR7B,ERA+B,AQAA,EIC/B,CfOkC,CePC,KfON,AePW,CfOC,AePA,KfOzC,EAAgD,AePhD,KfOqD,MAAL,CAAY,MAA5D;AGPI,AKDA,AINS,ANKA,ADnBjB,AJiBe,ACRd,AQaoB,ACDb,APCR,AWAC,EXAD,CWFA,EPFwB,AIJpB,ANKA,ASfuD,CTE0C,ALWtF,ASKM,ANArB,AWEA,CPHQ,AFEJ,ALNY,ASKM,ANAtB,EHLkB,ASKM,CAAC,CPDZ,AErBb,AMqBa,INrBb,CAAY,ADsBZ,CCtBA,ADsBA,ECtBuB,CAAvB,EAAkC,CFqB1B,AQAA,CRAkB,AQAA,ENrB1B,EFqBQ,AErBwC,AMqBxC,APCR,CDD+B,AQAA,EPC/B,KCtBA,EAAkE,GDsBtD,CCtBZ,ADsBA,ECtB8E,ADsBvD,CAAvB,EAAgC;ADApB,AKDH,AIHL,AZWA,AK5BA,AJgBI,ASKA,ACAI,APCR,KHPqB,ASID,CFCf,APLL,ASIA,CFCM,CLCE,AQAA,CRAC,AKDD,AIHH,AZWA,AK5BA,AMqBI,APCJ,CIFI,CLCE,AQAA,CRAC,AQAA,CXOH,CAAC,EQRN,AIHJ,CZWa,AK5Bb,CL4BA,AINA,CDDW,ASJI,ADIJ,APCI,CJMC,AK5BA,CL4BC,EGPM,ASJvB,ADIuB,APCvB,CDDwB,ASpB4D,AZ2BhE,AWPI,APCJ,CQJpB,ETG2B,AQAA,EXOF,CGPd,AQAA,IRAuB,AQAA,KRAK,AHOnB,AWPmB,CXOH,EGPI,AQAA,CRDb,AQAA,GXQ3B,EAA4C,CAAC,EAA7C,EAAiD;AGNzC,AKFS,AFGjB,ANMI,AK5BA,AJiBP,ACTD,AQeI,ACFQ,APAa,AWEzB,EbfA,IMWqB,AHnBb,ADqBiB,AWErB,CPJkB,AHnBb,ADqBiB,CDAd,AQAA,CRAC,AKFW,AFGf,ADtBE,AKuBF,ACFI,APAe,CIFH,AHpBL,ADsBI,CDAT,AHOF,AEpBb,ASae,CRAC,ADbhB,ASagB,GHFc,ELET,AQAA,AIEN,CfKP,AeLQ,CPJS,ARSJ,CQTc,CLEnB,AKFQ,AFGpB,AJdJ,ASagB,CRAU,ADb1B,AQeI,ACFsB,CRAX,AHOP,AWPO,CHFsB,AFGb,CICC,CPFG,AGCxB,ANKiD,AUH7C,ACHoB,AIE5B,CfMQ,CErBR,Aae0B,Gbf1B,UAAO,GAAP,EAAoC;ACWL,AKAvB,AIDJ,ANKA,ADtBI,AHQJ,AQeK,ACLsB,APEA,AWG3B,KPRoB,CAApB,AHfI,AKuBC,ANHsB,CDFvB,AElBC,AKuBC,ACLF,APEwB,CFZtB,AaeA,CHND,ANKA,ADtBE,AKuBC,ANHsB,CMG1B,ERfM,GAAG,CaeC,GAAG,CbfC,CUSlB,CNKA,EMLoB,CAChB,ANIiB,EAArB,ASCyB,CbfZ,Aaea,CbfC,CAAd,GAAkB,KAAK,GaenB,Cbfc,AaeS,CbfC,CAAV,GAAY,Aae1B,CbfjB,AaeA;AZDI,AKDJ,AIHK,ANKL,ANMI,AK/BY,AJoBpB,ACTI,AQcW,ACDP,APFgB,AWIpB,EdNJ,EcMI,CV1BA,ADsBA,CQFK,AFKM,CELL,AFKM,CRdN,CMYD,AIHG,ANKH,AIAS,CELV,AZWM,ACXd,CEIa,AFJb,ACTa,ASaA,CIED,CLDU,AKCT,CfKK,AEpBF,EQcO,CVMF,EMNjB,AJdiB,CDSrB,CAAA,COGI,AFEkB,ANMI,AeLtB,CZFI,AQAA,CRAkB,AGCtB,AKDsB,CHDD,AOGA,CPFjB,CPJR,ACTgB,CAAc,CAAd,CDShB,CEIQ,AQAA,CRA0B,AHOb,AEpBa,ASaA,CXOG,CAAhB,CAAb,EEpB+B,GDShC,CCT2B,CAAU,CDS5C,ACTkC,Cae9B,CdNgC,CCTU,CAA1C;ACcQ,AKDH,AIJM,ANMd,ADrBG,AJgBA,ACTA,AQaI,ACAI,APFX,AWIG,GXNJ,CFTI,AaeA,CLHqB,CFAhB,AIJM,AFIX,CFAM,AIJM,AVRT,CCaK,AFJJ,ACTA,ASaI,CRAC,AKDD,AIJM,APfT,AMoBI,CHDL,AIJW,CTKJ,AQAA,CIEH,CVtBR,AJgBS,AcMA,EHPW,CPfR,CHOZ,CCakB,AFJd,AUIc,CCLH,AXCA,CWDU,AVRT,CUQF,CTKQ,AQAA,AIEtB,CZFuB,AQAA,CCLI,CAAb,AXCV,AcMiB,CZFK,AQAA,CTb1B,CUQ+B,CTKb,AQAA,CRAP,AFJe,AUIf,GRAsB,AQAA,EVJF,GEIO,AQAA,EVJZ,CEIa,AFJF,AUIE,CRDT,AQAA,GVHJ,CAAgB,CAAhB,CAA1B,EAA8C,2GcUnB,EAJN,GAIQ,mDAJR,IAIoD,YAAY,CAAC,MAAb,GAAsB,CAJ1E,IAI2E,yHAJ3E,GAQO,EARP,GAQS,yDART,GASQ,EATR,GASU,sDATV,GAUM,EAVN,GAUQ,gDAV7B,CAHsB,CAgBtB;AZdQ,AKFG,AIJP,AZYA,AK1BA,AJgBA,ACTJ,AQeA,ACFQ,ITbR,CUMoB,CJKT,AILX,APbI,CGkBQ,AHlBP,AHOF,CCaK,ADbJ,ASaI,CRAC,AKFK,AHlBP,AKsBF,ACFI,ERAE,AHMF,AWNE,CRAC,AQAA,CHFM,AHnBN,EL2BC,CQRM,ARQL,AEnBd,CCaiB,ADbJ,ASaI,EXMA,AUJjB,CVII,CGNQ,ADbZ,ASaY,CRAU,AHMF,AUJF,ACFI,CRAX,AHMU,AEnBF,ASaR,CDEX,EPFwB,AHMA,AEnBxB,ASawB,ETbA,EFmBI,CAAC,EEnBA,IAAL,CAAU,CAAlC,EFmBwB,AEnBa,CFmBG,IEnBE,EFmBtC,EAA4C,AEnBX,CFmBY,AEnBF,CAA/C,CFmBI,EAAiD;AGRvB,AKA1B,AIDJ,ANKJ,ANKY,AK1BJ,AJgBA,ACTJ,AQeH,ACLiC,APClC,AWgBI,ETbJ,AFHA,EFXI,Aa2BA,CPlBqB,CAArB,AHhBI,ADkBR,CDDQ,AEjBC,AHOF,ASUC,APCR,CFXQ,CUSC,ANKT,ADrBW,CCqBX,ENKkB,ACVJ,AckBF,CAAC,GdlBK,AGElB,CFXI,AEWJ,EEGA,CAAA,ANK0B,AEnBL,CDSP,CWAV,AXAoB,CDUK,AIR7B,EQFyB,AVTC,CEW1B,AWgBI,CHlBA,ANKJ,ASa2B,GTb3B,AJdqB,CAAW,IAAX,CAAgB,AEW9B,CFXc,EEWrB,AWgBuC,CTb/B,CJdkC,AEWJ,AWgBlC,EAAwC,EXhB5C,EAAkE,CEGlE,EAA0B,AJdL,GAAiC,KIctD,CSaI,CTbsC,ASamB,Eb3BzD,Ma2BA,EAAmE,EdlBzD,CAAN,OckBwE,KAAT,EAAc;AZbhF,AKDD,AIHA,ANKA,ANKY,AK7BA,AJmBX,ACTD,ASaC,APFD,AWgBI,Ib3BJ,CGVA,CUqCI,Cb3BD,CUSG,AVTF,AEWA,CICC,AJDA,CJQO,CAAC,EAAE,CIRL,CQFG,CVTb,CFmBmB,AElBf,Aa0BW,CHlBC,AZUI,AeQJ,CPfhB,ENXQ,CMWU,CIHG,CJGrB,ANXW,CEUX,CQFwB,AZUT,CAAc,AIRN,CJQR,AeQX,Cb1BY,CUQhB,CZUiC,AeQJ,Eb1BlB,CAAU,CFkBgB,AElB1B,CFkB2B,EElBb,GADzB,EAEI,AayBqC,CAAC,EbzBnC,EFiB0B,CAAkB,AEjBzC,CFiBuB,AeQe,CAAE,CfRI,CAD7B,CEhBV,EayBwC,CAAC,CbzB9C,CAAU,CAAV,GAAc,AayB0B,CAAkC,Eb3BpF,EAGI,CawB4C,CAAP,CAArC,EbxBK,IAAL,CAAU,CAAV,GAAc,GAHlB,EAII,KAAK,IAAL,CAAU,CAAV,GAAc,GAJlB;AMaH,AFEA,ANKe,AKzBZ,AHWH,AQUD,ANJI,AWgBC,ELZL,CJHA,AJnBA,CEkBI,CWcA,EXdG,CAAC,CCjBC,CLyBO,CAAC,CIRb,CJQe,AUJnB,CLrBI,AKqBJ,GVIuB,AKzBN,CLyBO,KUJxB,CAAA,EVImB,CAAc,CAAd,GAAkB,AUJrC,GAAA,CVIyC,CAAC,QUJlC,IVI6B,CAAkB,CAAlB,EAAqB,AUJ1D,EAA0B,QAA1B,EAA0C;APDtC,ASLA,AZQyB,AKtBrB,AJcJ,ASOA,ACFA,APFA,AWgBA,IdnBA,AGGA,AWgBA,EVjCI,CJcD,AGGA,CHHC,AGGA,CDEC,ASLA,AZQG,AWHH,CNnBG,CUiCD,CVjCG,AUiCF,CHnBC,APdE,COcD,GAAG,AXAb,CWAA,APdU,CDiBV,CQHgB,AXAC,CWAA,CTKjB,AQAA,APFkB,CWgBlB,CHnBoB,AGmBA,CZdC,AFLC,AUKD,ERArB,AQAA,APFuB,CQHvB,EAA0B,AXAT,CWAU,AXAC,CGG5B,AWgBA,CHnBA,EAA+B,EXAd,GAAoB,SAApB,GAAgC,SAAjD;AOKJ,AIJQ,ANIP,ANOW,AK3BK,AJgBb,ACLH,AQYA,ANJG,AWiBA,EPhBJ,CECA,CTLI,AGGA,CCnBA,EJgBG,AGGA,CHHC,AGGA,AWiBE,CfTE,EYXC,AZWD,CQPZ,CAAA,CROY,GIRR,CJQY,CAAC,ACXb,CGGgB,CAAhB,AWiBiB,CPhBrB,APJsB,COItB,CIJQ,AGoBiB,CHpBE,IAAnB,AZWI,CQPZ,AIJgC,AZWJ,CAAhB,CAAA,AeSqB,CPhBjC,AOgBkC,KfTJ,CCX1B,GDWQ,CQPJ,GROsB,AeSL,CAAuB,CfTlB,GQP9B,EAA0B,AROI,KAAA,CAAlB,AeSgD,EPhB5D,AOgByB,CfTK,AeS1B,CPhBsC,IROZ,CAAlB,GAAkB,EAAA,CAAE,MAAF,CAAS,KAAK,OAAd,EAAuB,QAAvB,CAAlB;AGNR,AKAA,AIJQ,AZWH,AKxBL,AJaA,AUIA,APDA,AWiBA,IdpBA,AGGA,AWiBA,GdpBG,AGGA,CQHK,AXAJ,AGGA,CDCC,ASJI,APbJ,AMiBA,ECJM,CAAC,CTIH,ASJI,ADIJ,CRAC,AQAA,ECJM,CTIH,AEjBb,AJaA,AUIa,APDb,AWiBW,CZhBX,AQAA,AIgBY,EZhBI,ASJI,APbJ,AMiBA,CRAC,AQAA,ECJI,CTID,ASJR,ADIQ,GCJK,CTIzB,AEjBwB,AMiBxB,ERA0B,AQAA,CRAC,ASJA,APbA,AMiBA,CCJhB,CTIX,AQAA,CIgBA,CZhB+B,AEjBA,AMiBA,AIgBF,CHpBG,APbA,EAAhB,GAAqB,CUiCrC,CHrB4B,CPZ5B,AUiCsC,YAAA;AZflC,AMpCZ,ADoCK,AIJW,ANIZ,ADhBI,AJYA,ACNJ,AQWC,ACDO,APDJ,AWiBI,EThBR,AJVA,CMQA,CClCJ,ARgCQ,AGGA,EWiBI,CdpBD,AGGA,CQHK,APZF,AJYF,AGGA,CQHK,ANIb,CAAA,CHAa,ASJE,AXAX,ACNJ,ASUa,CVJD,ACNZ,EGNgB,ADeZ,CAAW,CQHK,CPZD,AJYF,AcoBE,CAAC,CThBpB,AFDmB,CQHJ,ANIf,AFDoB,CKnCxB,AGgC6B,APZF,AHMvB,AESI,CQHW,APZS,AHMxB,CESuB,AWiBf,CZhBA,AQAA,CRAmB,ASJA,APZR,AJYP,AUIe,CLA3B,ADhB4B,AJYF,CAAtB,AGGuB,CAAC,CDCpB,AGAR,ALJ6B,ACN7B,ASUQ,APDJ,CDC4B,AQAA,CNhBC,CHMjC,EDMkC,KKI3B,ADhBY,CAAf,ECgBJ,ALJ6B,ACNrB,CDMmC,CKIP,ALJhC,EAA0C,GCN9C,EDMmD,ACN1B,IDMqB,CAAU,CAAV,CCN9C,EDM4D,ACNpB,CDMpC,EAA2D,CAA3D,EAA8D,IAAI,CAAC,EAAL,GAAU,CAAxE;AEKQ,AMrChB,AG8BoC,ANO5B,ANMI,AKtBJ,AJYA,ACNA,ASUQ,AIgBJ,IThBJ,ALJA,EcoBI,CHvBA,ANOD,ALJA,CEIK,AGAJ,ADhBE,AJYF,AUII,CRAC,AQAA,ERAE,AHMF,AWNE,CRAC,AGAZ,ADhBU,AJYV,AUIY,GNhBC,IFgBF,AEhBM,AMgBN,AIgBI,CVhCG,AUgCF,CfVZ,CAAgB,CGNG,AHMnB,AKtBS,AMgBU,CRAC,AEhBF,AMgBE,CXMD,EGNI,AQAA,CRAC,AQAA,AIgBxB,CVhCuB,ELsBvB,AeUuB,CZhBK,AHMF,AWNE,GRAC,AQAA,AIgB7B,CZhBuB,AQAA,CXMQ,AKtBtB,CAAb,CAlB0E,CFkCtC,AEfpC,AMeoC,CRAzB,AQAA,CRDiB,AQAA,EXOxB;AGLI,AMtChB,ADoCK,AIFI,ANKD,ANKI,ACVJ,ACNH,AQWD,ACDY,APFR,AWkBI,ELfR,CRbA,CDQI,EcoBI,CdpBD,CEIK,AGCF,ALLF,AUII,CRAC,AQAA,APFJ,CKpCb,CNsCmB,AHMF,AWNE,CLCD,CIAd,ANHa,CHFT,ASKJ,ANHc,CEGG,CHDG,AMtCxB,AEsCwB,CPFH,CKpCrB,AT4CY,AIRJ,CJQiB,CGNN,AGCO,AKDP,APFK,AWkBA,CZhBK,AQAA,APFJ,AWkBA,CZhBN,AQAA,CDCf,CAAA,ANHwB,CDEG,AQAA,CXMnB,EMLS,CAAc,AFHF,AWkBrB,CTfS,AIAjB,EKegC,CTfG,AIAnC,IKeQ,CTfgC,AFHhB,CAAe,GEGJ,CAAU,AIAtC,CJA4B,CFH/B,CMGJ,CJA+C,AFHA,CEG3C,AIAgC,ANHY,EAA5C,EAAgD;ADApB,AMpCJ,AHwCxB,ANKC,AKtBD,AJYH,ASKG,ACJ4B,APCxB,AWkBH,ENvDuB,CRwB5B,CSgBI,CKWA,CXdI,CDDA,AOID,ACJC,CLIE,ADjBF,AKiBA,CNHG,CAAC,CKrCgB,AHwCf,CGxCe,AJuBhB,AKiBR,EJAY,EDjBA,ADcR,CCdJ,ADce,EEGE,ADjBF,GDcK,KEGR,CAAc,CGxCF,AHwCZ,EGxCY,ALqCT,CEGe,AFHA,CAAf,EAAkB,CAA7B,CKrCoB,AHwCW,CGxCX,ALqCY,GEGN,CAAU,CAAV,AFHW,GEGC,CAA1C,CAJgC,CAKhC,GFJoC,CAAe,CAAf,EAAkB,CAAlD;ADGH,AKFL,AIFI,AC9CR,ARkCY,AHIP,AQcG,ACFC,APFA,AWkBD,EPlBJ,EOkBI,CZrD6F,AQAA,CRsC7F,AQAA,EDCM,CEND,EPZI,CGcb,AEIc,CFJd,EEIiB,EKcF,CAAC,CHpBZ,CFMkB,EFJtB,AIFsB,CJEtB,AHdQ,COYJ,EPZwB,AUgCxB,CV/BQ,CKiBK,CFJjB,AEI+B,AKcJ,CLdV,EFJjB,CEImC,AKc/B,KLdoC,IFJjC,AEI4B,CAAU,CAAV,CFJnC,EAAoC,AEIW,CAA3C;ADzCJ,ADsCI,AIFH,ANKG,ANKA,AKrBY,AJSf,AalCL,AJ0CQ,AKcA,IPlBA,AFGA,AQzCR,GNsCW,AFGA,CEHC,AFGA,ANKA,AKrBQ,AKiBN,AKcA,CV/BO,EIzBjB,AJyBmB,AKiBN,CFJT,EEIY,CVID,AKrBQ,ECgBnB,EDhBuB,AKiBN,CJDD,ANKA,AKrBQ,EU+BN,CV/BK,ESzB/B,ACwD6B,CV/BO,CKiBhB,CD1ChB,AC0C8B,CD1ClB,AHyCR,AICY,EVIR,CKrBmB,AKiBO,CKcD,CAAC,CNxDlC,AJyByC,CLqBL,CS9CC,AC0CE,ILjBM,AKiBX,CAAU,CAAV,ELjBX,CLqBnB,AKtBQ,AKkBkC,CAA1C,AKcqB,CfVuB,AeUA,aAAa,EAApC,CAArB;ANxDJ,ADwCI,AFEA,ANKI,AKrBQ,AS1BpB,AZ4BI,AQeI,ANLA,AWmBA,Eb7BJ,EIcI,AICA,AKcA,GTfG,AICA,CD3CP,ADwCU,AFEF,ADhBQ,AKiBR,ANLE,CCZO,ELqBJ,AKrBM,AHEnB,CMYc,ANZd,CO5BA,EDwCiB,AHdM,CIzBnB,CHyCA,AICA,ANLe,CMKD,AKcF,CV/BW,AU+BV,CPjBK,AHdM,ADYN,CFVtB,CO3BI,AT8CI,AEnBR,AQeI,CD1CA,AJyBuB,CKiBH,CNLG,CCZK,CIzB5B,AC0CA,CD1CA,ADuCa,CAAc,AEFK,CFEnB,ANZjB,AQgBI,ED3CA,AJyBuB,CGcQ,ANZnC,CO3BU,CJyB+B,AU+BrC,CXnBkB,AWmBY,CXnBK,CIEC,ECvCpC,CJyByC,CGcV,CAAU,ANZpC,Aa6BL,CPjB+B,CCvClB,AJyBM,AU+BoB,EPjBI,ANZ/C,CMYI,CCxCJ,AP4BwB,CEUF,CAA+B,KAAK,CWmBf,OXnBrB,CAAlB;ADGA,AKAA,AIHJ,ANKI,ANKC,AKxBO,AJYZ,AapCJ,AZ6BQ,ASYA,APFA,AWmBI,EHpBR,AXFA,EKOI,AFJA,EWmBI,CTfD,ADpBqB,ADgBrB,CIEG,AFEF,AFJA,CDEC,AEbG,AMaH,CVLT,AapCJ,CNyCiB,APLb,CWEA,CAAA,CJGgB,AFEZ,AFJA,CEIW,AFJA,CUvCnB,CC0DuB,CD1DvB,AC0DwB,CPjBC,AFEjB,CLPJ,CKOmC,ALPnC,CEKI,ASHJ,ADGI,CRAmB,ASHvB,ADGuB,CLEnB,AFJoB,AWmBhB,CXnBiB,CAAV,CDEX,AKAY,AGAZ,CRAwB,AKAE,APL9B,AUK4B,CHAZ,AJFa,CQD7B,CXFA,COKkC,CIHlC,CRCkC,GIEK,IAAL,APL1B,COKoC,CAAV,AIH1B,ERCqB,CIEiB,AJFA,CIE1C,EPLJ,EWEA,AXF0B,EWEA,CRCG,CAA0B,CAAnD,EAAsD,CHH1D,EWEA,AXF0C,EWEA,IRCyB,CAAC,CAAV,GAAc,KAAK,WAAL,CAAiB,QAAjB,CAA0B,CAA9F;ADGI,AMvCJ,ADuCA,AIHA,ANKA,ANKH,AKpBe,AJQZ,AarC4B,AZ8B5B,AQeA,ACHI,APFJ,AWmBI,ED3DwB,Cd6BhC,CQaI,AFEA,ALPA,ASQA,ANLA,EDEI,AQAA,AIiBA,CZjBC,AKAF,AFEA,AICA,ACHE,APFF,CKrCG,ADuCF,AFEA,ADfQ,AKgBR,ANLA,CDEG,AEbM,AMaN,CRAC,AQAA,CNbO,AJQR,AarCqB,CbqCpB,AarCoB,ER4C5B,AFJA,CDEa,AGEF,ADfQ,AJQnB,AUKa,CVLD,COKZ,AEGA,CFHc,CLAN,AMvCS,AHyCF,ADfQ,AMaf,AIiBO,CZjBG,AOGF,ACHE,AIiBF,CZjBT,AQAA,CFvCa,ADuCpB,AFEkB,EHFE,AKAA,AGAA,CNbO,AKgBN,CD1CG,CDuCxB,AFEuB,CSenB,CZlBoB,AKJQ,AGIR,CHExB,AEEgB,CJDE,ADfK,AKgBI,AKcA,CTfC,CAA5B,AQ5C4B,CT6BQ,CCeL,AQ5CH,AJ6CZ,CTRhB,ASQgC,AKc5B,CLdY,CJDhB,EDfwC,CS7BZ,AJ6CS,CI7CT,CLGR,CAAa,AJ0Bd,CADX,CIzBY,EAAiB,EAAjB,AC0CJ,ED1CyB,CC0CQ,ID1C7B,EAA4B,EAA5B,CAApB,AC0CA;APFI,AMvCJ,AGoCH,ANKG,ADfY,AJQZ,ACPA,AQeA,ACHI,APFJ,AWmBI,GHtBR,CNOI,AICA,ANLA,EDEI,AQAA,AIiBA,CZjBC,AGEF,AICA,ACHE,APFF,CKrCG,AHyCF,ADfQ,AKgBR,ANLA,CDEG,AEbM,AJQR,AUKE,ENbQ,AHCR,GIcP,ALPA,CKOW,ADfQ,AJQR,ACPX,AEUA,EKrCe,AC0Cf,EJDe,ADfQ,CI1BL,AJ0BM,AU8BR,CdtBhB,AcsBiB,CTfC,CDfK,CI1BD,ARkCF,CAAC,CIRO,CCeL,ESenB,CdtBsB,CKOR,CAAU,ADfL,AU8BK,CTf5B,EAA+B,ADfM,AJQhB,CAAW,AcsB5B,ETf8B,GGzChB,AHyCmB,ADfI,CI1BV,ARkC/B,GQlCkB,AJ0BC,CCeuB,CGzCN,EAAlB,CHyCmB,CGzCG,AHyCO,CAA/C,IGzCkB,EAA6B,EAA7B,CAAlB;ANqCwB,AMpCxB,ADuCA,AFEA,ANKJ,AKvBY,AJWR,Aa7BJ,AZsBC,AQeG,ACNwB,APC3B,AWmBI,EfVL,CEvBA,AEAA,CIgBI,AFEA,AICA,CPNA,AQAA,AIgBA,EPbG,AFEA,ADvBqB,AKwBrB,CD1CG,ADuCF,AFEA,ADvBA,AKwBA,CTRC,Ea7BT,EdyCA,CMLI,ANKJ,ACZI,ASQA,CD1Ca,AHyCF,ALPA,ASQA,EFHX,CCvCgB,CHyChB,ALPA,COKgB,APLA,ASQA,CJDe,ALP/B,CQlCoB,CT8CxB,CMLsC,ANKtC,AUJe,CTRU,ASQA,CAAV,CJD0B,EEFrC,AEGuB,CTRG,CDY9B,CML8C,AQpC9C,AJqCI,CIrCQ,CdyCZ,AUJgC,CTRP,ASQrB,CJDqC,ALPL,CKOe,CAA/C,CGzCgB,AKKpB,CLLiC,CKKI,Cb6BjC,CQlCgB,AR+BsB,CDelC,ACXJ,CQnCkC,EAAlB,EAAsB,ET8C1C,EAAyB,CS9CL,EAA6B,EAA7B,CAAhB,CT8CJ,EAAwC;AGLpC,AKDA,AILH,ANOG,ANKA,AKnBC,AJQJ,Aa/BD,AJsCI,ACFA,AIgBA,Gd1BJ,COSI,AFEA,AICA,AKcA,CVxCA,EGuBG,AFEA,AICA,CFHC,AFEA,AQrCR,AJsCQ,CPFC,AHMA,AWNA,ENbE,CU6BC,CfVC,Ac1Cb,ACoDa,CfVC,AUJV,CAAW,CIrCX,CNkCA,AFEA,ANKa,CAAb,CGNA,AQAA,CXMgB,AUJA,CVIC,CGNC,AWnClB,AHmCkB,CGnClB,CXmCA,AHMoB,AUJT,ACFX,CDEqB,CAAV,AKcX,CDnDA,ACmDuB,CDnDvB,CdyCyB,AUJF,GIrCvB,AJqCA,EIrCM,AJqCsB,IKcM,CfVd,AUJa,CVIG,AczCpC,ACmDA,EAAuC,CLdX,CAAU,CIrCzB,AJqCe,CVI5B,EAA4C,AUJJ,CVIK,Ac1CjD,Ed0CI,AUJA,EVIiD,KeUjD,CAAwD,OAAxD,EAAiE,WAAW,CAAC,MAAZ,CAAmB,IAAnB,CAAwB,WAAxB,CAAjE,EAnCsB,CAqCtB;AZjBH,AMzCG,ADwCA,AFEA,ANKI,AKnBA,AHFP,AQiBG,ACFH,APJL,AWsBK,IN3DG,ADwCA,AFEA,AICA,GFHG,AFEA,AICA,CFHC,AFEA,AICA,CD3CA,ALqCZ,CKrCa,AT+CK,CKnBD,CCcT,CFLR,CIGQ,AEGA,CFHW,AEGA,CFHX,EAAc,CAAd,AROmB,CS/CnB,AC2CgB,CD3CA,CT+CM,CKnBlB,CKeO,CD3CX,AC2CqB,CD3CA,AJ4BG,AKeb,CVIgB,AKnBF,EKeF,GAAvB,EAA4B,GD3C5B,AT+CsB,CAAgB,CS/CJ,AT+CZ,AUJW,CVI7B,GUJwB,CAAU,CAAtC,CD3CA,EAA2C,SAA3C;AFTR,ACkDQ,AILJ,ANOI,ANKI,AKnBI,AJMX,AajCD,AZyBJ,AQiBQ,ANxDR,CAAA,CQgDI,CRhDJ,CGGA,ACkDQ,AFEA,AQzCJ,AJ0CI,GFHG,AFEA,AICA,CFHC,AFEA,ADdI,AKeJ,CLfK,AS3Bb,AZyBJ,CFqBkB,Ac9Cd,CT2Be,COOf,CAAA,CJKI,AFEA,AICA,CFHW,AHZI,AKeJ,EJfqB,ANmBf,CMHjB,ADhBkB,AS3BtB,AZyBJ,EKpCA,ACkDwB,AROI,AUJJ,CLfL,AS3BK,CFkCpB,CAAA,CJKe,AHZW,AKeX,CFHU,AMvCzB,AJ0CyB,CFHV,AEGA,CVIgB,CKpBF,CGaF,AIL3B,AFQ2B,CVIO,EQP9B,AILJ,AFQI,EFH4B,AEGA,CFH5B,IROuC,AUJN,CVIO,EYZrC,CFQyB,CAAU,CER1C,AFQgC,EERI,CZYF,AUJU,CVIS,CAA7C,CUJJ;APDJ,AIpDJ,AEWQ,ADwCA,AILA,AZYI,AKnBI,AH3ChB,AQ0DQ,ACFJ,AIkBA,Cb1EJ,CCwDI,AQAA,CTxDJ,CMuDQ,AILA,AFQA,GPFJ,AKDO,AILA,AFQA,CPFP,AMzCU,ADwCF,AILA,APPI,AKeJ,CLfK,AU+BN,CfZO,CKnBC,COOX,ADMJ,CAAA,CHDI,CAAW,AHZI,CI5BD,CNyClB,AHMqB,AUJjB,CPFJ,AEbsB,CI5BD,AJ4BE,CGYH,AROI,AeYxB,EV/Be,AMaf,CFzCyB,AEyCzB,CHDe,CLCf,AKDyB,AHZE,CGYZ,CROgB,CGN/B,CKD2B,CROO,AWNlC,GFzCqB,ADwCjB,AGCJ,CFzC6B,CDwCI,ECxCZ,CNyCb,CMzC0B,AT+CS,CQPL,AROM,ES/CvB,CEyCb,CFzC+B,ADwCN,CAAU,CLC3C,AMzCqB,ADwCjB,ELCsB,AMzCiB,AT+CT,CS/Cb,AT+CgC,CS/CjD,AT+CI,CWNR,EAA0B,GRA1B,EAA0C,GQA1C,EAA0C;ARCtC,AIrDR,ACoDQ,AIJA,ANOA,ADlByB,AJS7B,AaqPA,AJ5OI,ACFA,AIkBP,EdzBG,Ac4BJ,EPtBQ,AM+OJ,AJ5OI,GFHG,AHfqB,AKkBrB,CFHC,AIJE,ANOF,ADlBA,AKkBA,CI4OR,CPnSJ,AN8CI,AaqPA,CbrPA,CWEc,AFOV,EFHA,CAAW,AIJE,ARAN,CGhDf,EAAA,ADuDsB,EEHE,AIJE,AXFtB,CKSqB,ALTrB,AaqPA,CR5OI,EEHW,AM+OD,CN/OW,CAAV,EIJE,CJIU,AIJI,AXF/B,CWEiB,EXFjB,COMI,AIJ+B,EJIF,CM+OnB,EFnP0B,EJIF,EIJH,AXF1B,CWEoC,AXF7C,COMiC,AIJE,CJIQ,APNtB,COMjB,CIJ2C,CAA3C;ATMH,AItD0B,AEYvB,ADyCA,AIJA,AZUI,AKlBH,AJMD,AaqPA,AJ5OA,ACFH,EJtD0B,CJoD3B,AQAA,CFxCI,ADyCA,AEGA,GFHG,AEGA,CFHC,AIJE,AFOF,CD5CA,CAAC,AT+CG,AcyOF,CPpSiB,AKiDd,AXFF,CM/CgB,AN+Cf,CaqPC,CFnPG,AZUA,AUHZ,CVGa,AErBN,CY8PK,CN/OZ,APNa,ASNmB,CVkBxB,AUDR,CETiB,AZUA,CS/CjB,CAAgB,AKwRA,CbrPR,AaqPS,CbrPE,EQnCnB,CAAqB,AT+Cb,CYVI,CLjDW,AKiDG,CAAd,AXFL,AaqPP,CPpSuB,AP2DK,ACZ5B,EWE8B,EHrC9B,EFZuB,CAAA,AKiDY,EZUE,CAAC,CYVR,CAAU,CAAV,CZUF,CAAe,CYVD,AZUd,CYV5B,EZU6C,CAArC,IAA0C,IAAI,CAAC,GAAL,CAAS,OAAT,IAAoB,SAAS,CAAC,IAAV,CAAe,CAAf,GAAiB,CAAnF,EAAsF;AQL1F,AIJA,ANMA,ANIQ,ACZX,AasPG,GbxPJ,COQI,AIJA,GJIG,AIJA,CJIC,AIJA,AZUI,CMJH,CQ8OC,ENhPN,CFES,CAAC,CQ8OC,EFpPX,ANMa,ANII,CYVH,ANMd,ANIkB,Ac0OJ,ER9OE,CAAC,CMNjB,CEoPkB,CFpPE,ANMA,AQ8OD,Cd1OX,CAAkB,CYV1B,EALgC,ANWP,CMLzB,GZSQ,Ac0OM,CAAe,Cd1OM,IMJf,AQ8ON,CR9OsB,AQ8OD,Ed1O3B,Gc0OR,CR9OA,EAA4C,CAAC,EAA7C,EAAiD;AHFpD,AIrDD,AEYI,AD0CA,AFEI,ANIC,AKlBL,AKgBA,ACLH,AIqBL,IN9DQ,AD0CA,AEIA,AKgBJ,GPpBO,AEIA,CFJC,AEIA,CLhBC,CCcK,CCxDd,CEYY,CAAC,CD0CT,AFEc,GEjBkB,AFiBf,AIEjB,CFFA,EEEgB,AKgBJ,ETlBU,ADdtB,CI9BA,AM8D8B,CN9DV,CJ8BC,AUgC7B,CV/BY,CE3CR,CAAY,AEYR,CAAyB,AC8CzB,GJFiB,CG5CY,AH4CI,CCxDrC,ADwDqB,CAAb,CCxD6B,UEYR,CAAS,WAAT,EAAsB,CAAtB,EAAyB,CAC9C;AAAC,AGsCL,ANMI,ANIH,AKjBO,AJIhB,AasPQ,AJ3OA,AKgBR,IHxBQ,AFQA,CVNoC,CSxC/B,ATkDL,AKnBQ,CI/BF,AGsCH,APPM,AKeN,CERC,AFQA,CD9CI,AJ+BG,AJInB,CKSkB,AQ6ON,ELzRA,CJ+BW,ECaA,AQ6ON,CT1PS,AU+BV,CHxBR,APPmB,AJI3B,ASWQ,AKgBS,CTlBS,CAAC,AQ6ON,CFnPG,APPL,AS0PX,CC3NR,CD2NwB,AC3NF,CTlBS,ADbA,CCaC,GDdpB,EOQJ,ANMmB,CAAW,IAAX,CAAgB,CAAhB,GSkBY,CTlBS,ASkBR,CTlBb,GAAyB,CAA1B,ESkBa,EAAU,CTlBS,CAA9C,CAF6C,CAG7C,qBSiB2B,CAAvC,GACA;AZrBI,AM1CiB,AD4Cb,AILA,APPQ,AJnDhB,Aa6SY,AJ3OJ,ACLJ,CV7DJ,CE6DI,AQAA,CV7DJ,CW0DQ,AFQA,ED/Ca,AJgCL,CFUZ,AM1CkB,AGuCX,APPM,AKeN,CPLP,AKEU,AILF,AFQA,CD/CY,AJgCL,CGYH,CEGR,CI2OU,AJ3OF,ACLZ,CHEe,AHZI,AS0PJ,AHhPf,GNVsB,AS0PH,CXhPnB,ASHI,AFQa,CPLjB,AKEoB,CHZL,ES0PS,AJ3OZ,CFHG,AHZW,AKeJ,ACLtB,CHEyB,AEGb,ACLZ,CRAA,AKEI,AM8OuB,CAAT,CJ3OQ,CPL1B,EWgPiC,AHhPjC,CGgPQ,AJ3OJ,EAA4B,ACLhC,KRAO,AOK8B,GPLrC,COKgC,CPLI,AOKM,ACLnC,CDKyB,ECLhC,CDK8C,CCLV,GDKhC,EAAgD,KAAK,IAAL,CAAU,CAAV,GAAc,IAA9D,EAAoE,MAAI,IAAI,CAAC,EAAT,GAAY,GAAhF,EAAqF,MAAI,IAAI,CAAC,EAAT,GAAY,GAAjG;APJA,AIxDJ,AEaQ,AD6CJ,AILA,ANMI,ADhBA,AKkBJ,ACLA,AIqBR,IZrBQ,AKEA,AEGA,ACLA,CF5CkD,AJ8B7B,CCiBjB,ADjBJ,CFcG,AM1CC,AD4CD,AEGA,ACLA,CRAC,AIxDR,AC0DQ,AILA,AFQA,ACLA,CCHC,GTGL,ASHQ,AFQR,ACLA,CJxDJ,GACI,AKoDY,ANME,ASkBN,CPnBR,AILa,AGwBJ,GPnBO,AILR,ANMW,CMNF,AGwBzB,CR5EQ,AQ4Ec,CR5Ed,ED0DwB,CMNF,CLpDtB,CAAA,EKoDiB,CAAU,ANMR,CC1DnB,AKoDiB,ELpDX,CKoDyB,ANMG,CAAC,EMN3B,CGwBuB,CR5E/B,AKoDoC,ANMG,ASkBP,EPnBhC,GDzDa,AKoD4B,ANMG,GSkBb,CR7EnC,AKqDwC,CAAU,AGwBJ,CHxBN,GAAc,CNMX,CAAgB,CMN/C,CAAR,INMuC,GAAuB,CAA5C,GAAiD,CAAC,KAAlD,CSkBa,CAAvC,CTlBoF,ESmBpF,GTnBY;AHDJ,AM5CK,AD6CL,AILA,ANMC,ANID,AKfA,ASuPI,AJ1OJ,ACJA,IHCA,AEGA,EDhDK,CAAC,AD6CH,AEGA,CPJG,AKCF,AILE,AFQF,ACJE,CF5CE,AGwCD,AZUF,AKfA,EInCD,CN4CM,ASJA,AEkPF,AH9OE,CG8OD,CJ1OT,CPJa,AHMb,ACdO,AUQM,EHCb,AILe,AEkPF,CAAT,CTvPJ,CFSkB,AW8OF,AH9OE,CCJR,CAAU,APLF,COKlB,CPLA,IFSa,AQAA,CRAc,AQAA,CRAd,AQAA,GRAkB,AQAA,KRAK,AQAA,IRAL,AQAA,CRAU,AQAA,CRAV,AQAA,GRAY,AQAA,CRA3C,AQAA;ARCA,AIzDA,AEYY,AD8CZ,AINA,AZWH,AKfA,ASuPW,AJ1OR,ACJA,AIqBR,Gf3BI,COnDI,AC0DA,EC9CY,CAAC,AD8CV,CLDG,AKCF,AINmB,ADKjB,CF7CS,AGwCS,CLpDlB,AOuSE,CX9OC,AIzDF,AC0DP,AGDS,CHCD,AINmB,CEmPhB,CX9OC,AKCF,AM6OE,AH9OA,EJzDZ,AQ8EQ,CPpBG,AINqB,AG0BvB,EZrBQ,AIzDF,AIyDE,EHCjB,AIN2B,AG0BnC,CR9EQ,AKoDqC,AG0BvB,CPpBG,AINjB,AEmPQ,CN7OR,EAAoB,AM6OI,CX9OZ,AQAA,CRAc,AKCJ,AGDI,CRAd,AQAA,EHCW,CLDO,AQAA,GHC9B,ELDmC,AKCN,AGDM,CHCnC,COoB+B,CPpBC,AOoBA,CZrBF,AQAA,CRAU,AQAA,CRAV,AQAA,CHCM,CAAC,CLDK,AQAA,CRA1C,AKCA,AGDA,CRJgC,AQAA,CRKhC,AQAA,CG6OQ,OCzNuB,EAAoB,8BAApB,CAAvC;AR7EQ,AEWI,AD+CJ,AINA,ANOA,AQ4OQ,ACzNhB,IR9EQ,AC0DA,AINA,ANOA,CGlDkD,CAAzB,CAAzB,ADiDG,AINA,ANOA,CEDC,AINA,ANOA,CG5D6B,CFC3B,AEcN,CFdO,CC0DP,EINA,AEmPc,CFnPH,CAAC,AG0BJ,CR9ER,AD2DA,ASmBS,CDyNS,CFnPL,CLpDG,AD2DA,CQ4OM,ACzN9B,CH1BQ,AG0Bc,CR9Ed,CKoDkB,CAAlB,CEmP0B,CAAC,CR5O3B,OQ4OsB,GAAgB,CCzNP,CAAC,GDyNU,CAAC,UAAL,ACzNP,EAAiB,EDyNS,IAAE,CAArB,CAAjB,GAA4C,EAAzD,cCzNuB,CAAvC,GACA;AZrBQ,AIxDA,ACyDA,AINA,ANOA,ANIJ,AKdA,ASsPY,AH9OR,EXMJ,AKdA,EFQI,AKCA,AINA,ANOA,AKFA,ENRJ,CFQO,AKCA,AINA,ANOA,ADVP,AMQO,CRAC,AIxDE,ACyDF,AINA,ANOA,AKFA,KJxDO,AKmDX,AZWJ,CYXc,AZWd,AcwOkB,CFnPH,CLnDG,AFgDlB,CFQI,AKCA,AHTJ,AMQI,CCLY,CEmPO,CX9OH,AIxDE,ACyDF,AFChB,AKFgB,CCLhB,CEmPsB,CFnPL,ANOE,ANIvB,CYXI,AZWJ,AKdA,CSsPY,CFnPY,CAAC,APHzB,EFQI,AHMJ,AWNI,CCLsB,CNOtB,CNIJ,CYXI,CLnDc,CAAU,AKmDG,CAAC,CPHxB,CEhDU,CKmDe,CLnDA,ECyD7B,AINA,CLnDc,CKmDoB,AZWtC,CO9DsC,AKmDlC,APHJ,CEhDkB,CAAd,AFgDsB,QAA1B,EAA0C;AFStC,AM5CA,AD6CA,AINA,ANOA,ANIA,AKdA,ASqPQ,AH7OR,AIsBR,IZtBQ,AKCA,AINA,ANOA,AKFA,GRAG,AKCA,AINA,ANOA,AKFA,CRAC,AM5CE,AD6CF,AINA,ANOA,AKFA,CXMC,AegBJ,GTpBD,CG9CW,AGuCX,CAAU,AEkPiB,CFlPhB,ANOA,ANIX,CSlDc,CN4Cd,AKCA,AGDA,CCLY,AZWE,CMJC,AQ2OiB,ACvNxC,CNlE0B,AH8CF,CMPhB,CZWA,AcuOmC,ACvNxB,CH3BM,CAAC,CNOP,AQ2OH,CR3Oc,CMPH,GAAnB,CNO2B,CMPH,CAAC,CHvCX,CAAY,AH8CJ,CMPI,ANOM,CAAV,CG9CR,CGuCd,CHvC+B,AH8CG,CMPH,ANOT,CMPU,CHvClB,CH8CsB,CG9CA,AGuCH,ANOtB,EG9CG,CGuCd,CHvCwC,AH8CC,CG9C3B,AGuCwB,CHvCtC,AGuCA,YNOA;AHDA,AIzDA,AEaA,AD6CA,AINA,ANOA,ANIA,AKdH,ASqPW,AH7OR,AIsBJ,GVhCA,CFUI,AIzDA,AC0DA,AINA,ANOA,ANIA,AWNA,GRAG,AKCA,AINA,ANOA,AKFA,CRAC,AM5CE,AD6CF,AINA,ANOA,AKFA,CJzDA,CAAC,CC0DL,CAAQ,CINR,CTKA,AKCU,AINA,AEkPI,AH7Od,CRAW,AM5CE,AGuCb,ADKW,EHCA,AINE,ANOb,CG9CgB,AGuCF,AEkPI,CX7OlB,AQAA,CJzDA,AD2DgB,CHFoB,AIzDpB,AC0DhB,AINe,AEkPO,AH7Oc,CF5ChB,CD6CH,CLDjB,AKCA,AINA,AZWoB,AWNpB,CJzDA,AP+DqB,CO/DA,AC0DD,AINA,ANOpB,AQ2O0B,CFlP1B,AEkP2B,CN5OL,CINC,CAAC,AZWE,CO/D1B,AC0DuB,EINE,EJMzB,AM4OqB,CLzRL,AGuChB,CHvC4B,AD6CC,CAA7B,AIN8B,AEkPS,CLzRvB,AGuChB,CJMgC,AM4OxB,CLzRwB,GAAhB,AD6CoB,ARKhB,CQLiB,ARKrC,CSlDqC,CD6CrC,CC7CgB,EAAyB,CAAzB,CAAhB;AN6CA,AM5CA,AD6CA,AINA,ANOA,ANIH,AcuOW,AH7OR,AIsBJ,GfnBA,CGHI,AKCA,AINA,ANOA,AKFA,GRAG,AKCA,AINA,ANOA,AKFA,AIsBF,CZtBG,AM5CE,AD6CF,AINA,ANOA,AKFA,EF5CI,AKyRA,CCvNH,CPrBL,AOqBM,CNlEK,AGuCX,AEkPW,CX7OX,ASLU,AEkPE,AH7OZ,CRAW,ASLX,ADKW,AIsBF,CTpBT,ASoBJ,CNlEmB,AGuCF,ANOA,CMPb,AG2BY,CZtBG,AQAA,AIsBF,CH3BG,CAAC,CTKC,AQAA,AIsBF,CTpBG,AQ2OX,CFlPU,ANOE,GHFG,ASLvB,ADKuB,ECLA,CHvCZ,AGuCX,CTKkB,AM5CI,AE4CJ,CRAU,ASLF,ADKE,CRA5B,ASLA,ADKkB,CF5CP,AH8CQ,CHFiB,AGEpC,CG9C2B,AE4CG,CLEG,CHFjC,AYsBgC,CNlErB,AMkEsB,CJtBjC,CF5CgC,CH8CM,AKFF,CF5CzB,EAAyB,AE4CpC,AIsBJ,CNlEe,CAAX,AMkEyC,CAAC,ETpBT,ASoBrC,CTpBmD,CAA/C,ASoB8C,ETpBI,KAAK,QAAL,CAAc,CAAhE;AHDA,AIzDA,AEcA,AD6CA,AIPA,ANQA,ADbH,ASuPW,AJ1OR,ACHA,AIsBA,IZtBA,AM3CA,AD6CA,AIPA,ANQA,AKHA,GRAG,AKEA,AIPA,ANQA,AKHA,CRAC,AKEA,AIPA,ANQA,AIAA,ACHA,AIsBE,CR/ED,AEcA,CAAC,AKwRE,GPtSC,AOsSE,AJ1OF,CPHT,AIzDU,AOsSE,AH7OZ,CRAW,AKEX,AFCA,AKHW,EJzDE,AKoDb,CLpDA,CJyDe,AQAA,AIsBE,CR/ED,AEchB,AKwRQ,CPtSS,AOsSE,CX7OD,AQAA,AIsBE,CNjED,AC8Cf,CH5DgB,AEehB,AC6CgB,CH5DpB,AOsSQ,AJ1OJ,EPHmB,AIzDA,AOsSE,AH7OF,CJzDC,AEehB,EFfR,AG4D0B,CPHR,AQAA,CRAU,AIzDA,AOsSpB,AH7OoB,CRAV,AQAA,EDGa,CPHD,AQAA,EIsBM,CJtBpC,AIsBqC,CZtBrC,AYsBoC,CNhEhC,AE0CgC,AIsBpC,CZtBoC,AM1CvB,EE0C0B,CRAA,AOGb,CAAgB,CAAhB,ACHgB,CRAA,COGG,CD7CzC,EAAmB,AC6CG,ACHqB,CRAA,AM1C3C,CC6CJ,CD7C0B,CC6C0B,ACHV,CRAA,AM1CtC,AE0CgD,CRAA,AM3CjC,AE2CuB,CRA1C,CMzCI,CEyCkD,GFzC9C,CEyCR,YFzCI,CAAS,OAAT,EAAkB,CAAlB,EAAqB,CACjB;ANyCR,AIzDI,AEgBK,AD2CZ,AIPG,ANQH,ANGD,AcuOY,AJ1OJ,ACHJ,AIsBA,EfhBJ,CQjCA,AFFA,CH6BI,AKrER,AIgEQ,ADKA,AIsBA,CPnBJ,CC5Ca,AC4CL,CPHD,AMzCO,AGoCP,ADKA,CRAC,ASLA,ADKA,CFzCQ,AC4CL,CH5DG,AOsSF,AJ1OA,ED5CA,AGoCR,CLpDa,AP+DjB,AcuOe,CX7OX,AHMJ,AcuOgB,AH7OZ,CRAW,AQAA,AIsBA,CR/EK,AQ+EJ,GZtBG,AOGX,ACHW,CJzDK,AOsSZ,CAAW,CX7OD,AQAA,AIsBlB,CfhBJ,CAAA,CcuOY,EX7Oe,AW6OE,AH7OF,GXM3B,CGNsB,AQAA,CRAU,AW6OpB,AH7OoB,CRAV,AHMtB,AWNsB,GRAY,AQAA,CJzDd,CAAa,EJyD7B,AQAA,ERAoC,AQAA,CJzDF,CAAC,CJyDI,AHM3C,AWNI,GRA0C,IIzDb,CJyDkB,AIzDH,CAAf,GJyDa,AIzDM,CJyDI,CAApD,CIzD6B,GAAyB,CAAC,GAAC,EAAxC,EAA4C,EAA5C,CAAZ;AJ0DJ,AIzDI,AEea,AGqCjB,AZWA,AKdJ,ASqPY,AJ1OJ,ACHJ,AIsBH,EV9BD,EFQI,ASLA,ADKA,EJzDI,AEea,AJkCrB,AKWQ,CPHD,AM1Ce,AGqCf,APHP,AMQO,CRAC,ASLA,ADKA,CF1CgB,ATgDf,AUHE,CI0OC,AJ1OA,CH5DC,CAAC,COsSC,CFlPX,AEkPY,AH7OZ,CXMA,AWNW,CNRf,AKWQ,CPHJ,ASvBgC,APepC,AKWmB,CENf,AZSc,CWNC,CG6OP,CAAW,CPtSf,AG4DgB,ACHF,CJzDG,AP+DrB,AKdJ,ESqPY,CTrPZ,AKWmB,CI0OU,AJ1OA,ACHF,CDGR,EH5DX,CAAyB,AG4DA,ACHX,CG6OV,AH7OoB,CAA5B,EJzDiC,AG4D7B,ACHgC,CNRjC,CKWgC,CCHnC,CNRJ,EAAoC,CKWQ,IAAL,CAAU,CH5DhB,AG4DM,CH5DG,EG4DW,CH5DpB,EAAc,CAAd,AG4DzB,EH5D0C,CACtC;AJyDR,AIzDS,AEcD,AH8CZ,AO1CJ,Ab6CQ,AKdA,ASqPQ,AJ1OJ,ACHJ,ELGJ,EHHI,AUvCR,AR+BQ,AMQA,CF5CyB,CC+CrB,CPHD,AM1CK,AJkCL,AMQA,CRAC,AIzDK,AFiDL,AMQA,CJzDM,AD4Dd,ANGS,AUHE,CJAX,AQ0OY,AJ1OA,CH5DI,CJyDZ,AERA,CSqPW,CPtSI,AOsSH,AH7OZ,CJzDgB,AFgDgB,AMSrB,CNNX,AKSI,CAAW,EJAnB,AKHmB,CLGnB,AQ0OY,CAAW,CDpR3B,AH0C4B,ACHF,CJzDN,AP+DZ,CO/DyB,CAAb,AOsSJ,CdvOc,AUHP,CI0OU,AJ1OA,ACHF,CJzDM,AD4DjC,AIAmB,GJAnB,AIAiC,ACHX,CJzDV,AOsSA,AH7OoB,CAAV,CDGd,EAA8B,ACHJ,CDG1B,GCHJ,CLGK,CKH+B,GLGxC,AKH2C,ELGnB,ANGuB,CAAC,AWNF,KXMO,AWNF,IAAL,CAAU,CAApD,IXM4C,CAAgB,IAAhB,CAAqB,IAArB,CAAD,CAA3C;AGLA,AI1DmC,AEe1B,AD4Cb,AILI,ANOA,AO3CR,Ab8CK,AcuOW,AJ1OJ,ACHJ,AIqBJ,EPpBA,AOoBA,CflBA,CGHI,ASJA,ADIA,EF3CS,AC8CL,CPHD,AM3CO,AGuCP,ADIA,CRAC,AI1D+B,AKsD/B,ADIA,CJ1DgC,AEexB,AC8CL,CI0OC,AJ1OA,CH7D8B,AD6D/B,CG9CC,AD4CZ,CAAA,AFEI,AQ0OW,CX7OX,AW6OY,AH7OZ,CAAW,CDGP,CH7DwC,AKsD5C,CLtD6C,AKsD/B,AEiPN,CFjPO,ADIA,EJ1D+B,CC2DlD,AILoB,ADIE,CHCtB,AILI,AGyBiB,CAAC,CHzBC,CAAnB,CDIuB,CCzBS,CAqBT,EJK3B,AGDsB,CAAU,CAAV,CHCtB,AOoBqB,CAArB,CJrBkC,IAA9B,EAAoC,EHC/B,CGDkC,GHC3C,AGD8C,EHCtB,GGD2B,IAAL,CAAU,CAApD;AREA,AI5DQ,AEeS,AD6CjB,AFEH,AO5CL,ARkCQ,ASoPK,AJ1OJ,ACHD,AIqBP,GTpBG,CHAI,AERA,AMOA,EF5CiB,CN6Cd,AI7D2C,AEgB5B,AJqCf,AMOA,CRCC,AERA,AMOA,CJ1DI,AEcY,AK4QJ,CDzQxB,ACwRY,CN9OG,CAAC,IAAI,AK1CpB,CV0CQ,AKAa,AHRb,AMOA,CHCY,AK1CpB,CL0CgB,CLAQ,AERA,EGQE,IAAI,CAAC,CLAvB,AKAsB,CAAd,AHRR,GGQ4B,IAAI,CAAC,CAAD,CAAzB,CAAP;ALCA,AI5DS,AEcD,AD8CX,AING,ACrCyB,AbgD7B,AKbI,AMOA,EE1CyB,AbgD7B,CQPA,CLEI,ASNA,APFA,AMOA,CF/CyB,CAArB,CNgDD,AMlDgB,AG4ChB,APFA,AMOA,CRCC,AI5DK,AEUT,AG4CI,APFA,AMOA,CJ3DM,EAAE,AMiBa,CAAA,AF0CzB,CXMJ,COjEmB,APiEnB,COjEoB,EKsDhB,EPFA,CFQA,EERkB,CFQC,AI5DP,APiEhB,COjE6B,APiE7B,COjEY,IFoDR,CQnCyB,CV2CzB,CU3CyB,EbgD7B,GAAA,CahD6B,CAAA,UbgD7B;AOjEgC,AEiB5B,AGsCA,ANOR,ANIQ,AKbA,AKUA,ACHA,AIoBR,IN/DQ,AGsCA,APFA,AKUA,ACHA,GCLG,APFA,AKUA,ACHA,CJ5DyB,AKuDxB,APFA,AKUA,ACHA,CJ5DyB,AD8DrC,CSkBU,CRhF6B,AEiBxB,CAAC,EGsCR,ADKA,CCLW,AFQX,CERA,ANOR,CC9D6C,AFqDrC,CErDsC,AKuDxB,CAAC,CAAf,APFgB,CErDuB,AFqDvC,CIpCA,GAAqB,CACjB,IAAI,aAAJ,CAAS,WAAT,EAAsB,CAAtB,EAAyB,CACrB;AN0CR,AI7DQ,AEmBC,AD0CjB,AILQ,ANxER,AO0CI,AbyCI,AKbA,ASoPI,AJ1OP,ACFG,CL9ER,EAAA,AI4CI,CE4BI,APFA,AKrER,AC6EQ,CDGJ,CD9Ca,CFrBqC,AEqBpC,AGqCP,APFA,AMQA,CJhE0B,AK0DzB,AZWA,AKbA,AMQA,CRDC,AI/DD,AEqBQ,AD0CpB,ARMa,EShDG,AIOZ,CCgRY,CX7OC,CAAC,ASLV,AZWU,CYXC,CAAX,CTKa,AEPb,AMQA,CRDA,ASLc,APFA,CGOtB,AILuB,CTKC,ASLhB,AZWI,AWLY,CRDC,EEPE,CFOC,AHMA,AcuOA,GAAG,CAAnB,AH5OJ,CRDyB,AUnC7B,AbyC6B,CazCjB,CR4BM,CAAc,CAA5B,EAA+B,CQ5BnC,EAAqC,CbyCb,CKbgB,CFOhB,CAAkB,AHMA,CAAlC,IAAuC,CGN3C,AEP+B,CAAc,CFOC,AEP9C,CFO+C,AHMA,CAAC,CGNhD,EAAmD,AHMR,KAAa,KAAK,WAAlB,GAAgC,KAAK,UAAhF,EAA4F;AGLxF,AM3CY,ADlCxB,AIwEQ,AC/BJ,Ab0CQ,AKbJ,AMQA,CH9ER,EAAA,CIwEQ,APFA,AMQA,EF5CgB,CAAC,AGsCd,APFA,AMQA,CCNC,AC/BR,AR6BQ,AMQA,CF5Ce,CN2CX,CHMC,Ea1Cb,CD+BI,APFA,COEW,APFA,CFOG,ASLF,AC9BZ,CD8BA,AZWI,EGNa,ASLF,CAAC,APFA,AMQhB,CCNA,CC9BA,CAAA,AFoCmB,CRDG,GUnCtB,CAAA,AR4BA,EARgC,CAShC,AMOA,CEpCA,EAAM,EVmCW,CAAkB,CAAlB,CAAb,CUnCJ,KAAa,IADjB;AVqCQ,AI7DA,AEiBI,AGuCR,AZWC,AcsOG,IFjPJ,CHxC6B,CN6CzB,AI7DA,CEkBI,AGsCL,CAAC,CTKG,CAAC,CI7DA,CAAC,COySA,CFjPT,CAAW,ANMJ,CMNK,CAAZ,AEiPa,CAAC,CX5OV,ASLW,CAAC,CAAhB,AEiPiB,CX5OG,AI7DhB,AOySA,CPzSgB,COySA,CAAC,EPzSjB,CAAqB,AOySD,GX5OpB,AI7DA,EOySwB,CAAC,OAAL,GAAe,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AX3O3C,AM5CK,AGuCT,ACnCJ,ARiCI,ASmPQ,AJ1OZ,ACFI,EDEJ,EEPI,ACnCJ,ARiCI,EFOI,AM5CK,CAAC,AGuCP,APFA,COEC,APFA,CFOG,AM5CK,AIIhB,AFwCS,CRAG,AUxCZ,CJJY,EC8CZ,ACFa,CCLT,AEiPc,AJ1OlB,ACFc,CHDH,EI/ByB,APyBhC,ASmPiB,AH5OJ,CCHb,ACrCJ,AFwCI,CRAI,CW4OgB,AH5OJ,CExCA,AFwCC,EDErB,CAAA,ACFwB,CExCxB,ACoR4B,CAAC,GH5OA,GDE7B,GAAA,MI0OwB,AH5OA,CG4OqB,AH5OH,CG4OI,EJ1OrC,EI0OyC,CH5O9C,CDEJ,CCFkD,CG4OE,AJ1O5B,ACF2B,CG4OL,CAAtB,AH5OpB,CG4OQ,CH5O2C;ARC/C,AI7DA,AEgBY,ATkDhB,AcuOQ,AJ1OR,ACFI,MRAA,AM7CY,CAAC,EN6CV,AM7CY,ATkDd,CGLG,AI7DE,AOySF,AH5OA,CDED,EPFH,CAAQ,AI7DE,CG+DH,CAAC,ACFE,CJ7DG,AG+DN,CAAJ,CPFU,AQAA,EJ7DI,AG+DJ,CI0OG,AJ1OF,CVGlB,CWLsB,EXKA,AcuOE,AJ1OF,CPFV,AOEW,CPFG,AOEJ,CPFV,AOEK,CAAV,EPFuB,AW4OA,CAAC,AJ1OF,GI0OK,AH5OjB,CG4OkB,AH5OA,CRAC,AI7DnB,AG+DiB,ACFjB,CRAoB,AI7DP,AI6D1B,CRAA,EAAoC,AW4OT,CAAU,AJ1OZ,CH/DM,AG+DK,CH/DJ,EJ6DS,AHKF,AcuOZ,CdvOa,AcuOE,AJ1O9C,CI0O+B,CAAD,CAAN,EPzSM,APkEmB,COlEJ,CJ6DL,AI7DV,AOySuB,CX5OC,CAAd,CI7DS,EJ6DS,AW4OA,CPzS5B,AOySN,CAAhB,CdvOoC,COlEW,APkEK,COlEJ,CJ6DQ,CAAC,CAA7D,AI7DqD,APkEb,CAAqB,CGLG,AI7DnD,CJ6Db,CI7DyD,CJ6DU,AHK3B,CGLxC,AI7Da,APkE0B,COlEvC,APkEJ,CGL0E,IAAE,IAAI,CAAC,EAA7E;AACA,AI7DA,AEeI,AG0CR,ACyVJ,AbhVC,AKbG,ASoPK,AJ1OR,ACFO,GXDR,AUCA,CEJI,ACyVJ,CJrYiC,CNgDzB,AI7DA,AEaA,AEgDA,CFjDiB,AG6ClB,CAAC,APJA,CFQG,AM5CH,AIiYR,AFrVW,CRAC,AUqVZ,AFrVY,CJ7DC,CAAC,CEiBF,AJoCC,CFQL,GSJJ,EDII,CCJY,CCyVpB,CNlZQ,AI6DgB,CJ7DC,CMkZX,CR7VN,CIpCA,AJoCkB,CErDlB,AEiBS,CFjBa,CKyD1B,EDII,CJ7D0B,AFqD1B,IIpCA,AIiYM,CR7VuB,CIpCT,AJoCxB,CIpCI,CJoCgC,CIpCT,CACnB,GFlBkB,CAAS,IAAT,EAAe,CAAf,EAAkB,CACpC;AJ6DJ,AI7DK,AEiBA,AGwCT,ACyVA,AR7VI,AMQA,ICJJ,CAAC,CHxCQ,AJoCL,AMQA,CF5CM,CFjBD,AKyDL,CLzDM,AEiBE,AJoCL,AMQA,CNRC,AMQA,CJ7DI,AEiBJ,CGwCA,CAAC,ELzDO,CAAC,AKyDb,APJA,COIS,APJE,COID,CDIV,ECJW,CAAX,APJgB,EErDR,AKyDM,CLzDQ,AKyDP,CLzDP,AFqDG,CAAU,COIL,APJL,CErDe,AKyD1B,CAAJ,CPJ6B,CAAC,CErDtB,EFqDJ,EAA+B,KAAK,IAAL,CAAU,CAAV,GAAc,CAAC,GAA9C;AErDgC,AEiBpB,AGyChB,ACyVA,AbhVJ,AKbQ,ASoPA,AJ3OZ,ACDY,EXKR,EYTI,EHzCgB,AJqCZ,AMQA,CF7Ca,AGyCd,CL1DiC,AK0DhC,AEgPA,CP1SiC,AEiBlB,AJqCZ,AKSf,ACDe,CEqVD,AR7VE,AMQA,CJ9D+B,EMmZ9B,AbhVb,AcuOY,AH5OJ,CXKR,AcuOa,AH5OG,EEqVA,AR7VR,CEtDyC,AK0D7C,APJe,CEtD+B,AK0DhC,CAAd,ADIiB,CDCzB,CH/DuD,AK0D9B,ACyVD,CDzVE,ACyVD,AR7VG,CLaxB,CAAA,CYTuB,CAAnB,APJe,CAAU,AMQb,CCpCoB,AP4BjB,AMQW,CCJH,ACyVvB,AFrVY,CXKhB,AcuOQ,CTpPyB,ASoPH,CTpPI,AMQA,CXKlC,EKbQ,ASoP0B,ETpPK,CAA/B,AMQgC,CAAC,CG4OH,AH5O9B,CG4O+B,CH5OK,GXK5C,EWLiD,CG4OzC,EAAwC,KAAI,AH5OR,CG4OS,AH5OK,CAAd,GAAkB,GG4Od,GAAe,AH5OK,CG4O5D,AH5O6D,CAA7D,CG4O0D,CH5OM,CAAhE,EAAmE,CAAnE,CG4OA,CH5OsE,CG4OJ,GH5OM,IAAI,CAAC,EAA7E,IG4O8E,YAAZ,GAAwB,GAA1F;AX3OH,AI/DO,AEiBA,AImYR,AbhVA,AKbI,ASoPH,AJhUT,ACoFY,CDpFZ,EAAA,EDqCmC,CIoY3B,AR7VI,AMQA,CJhEwC,AEmBpC,EFjBA,AMmZL,AR7VI,AMQA,CEqVH,AR7VI,AMQA,IEqVR,AFrVI,ENRA,CQ0VM,AR1VK,CQ+Vf,IR/VoB,IAAL,CAAU,CAAV,GAAc,GAAzB,EAA8B,KAAK,IAAL,CAAU,CAAV,GAAc,CAAC,GAA7C;AEtDK,AEiBA,AGyCT,AZUA,AKbI,AMQA,ICLJ,EHzCS,AJsCL,AMQA,CF9CM,AGyCP,CL1DM,AK0DL,CL1DM,AEiBE,ATmDP,AKbE,AMQA,CNRC,AMQA,CJ/DI,CEiBJ,CTmDC,CAAC,COpEM,CAAC,AFuDb,COGJ,AZUa,AKbE,CLaf,CWLI,CXKY,CAAC,CKbG,AMQA,EJ/DR,APoEQ,COpEM,CAAlB,AFuDO,CAAU,CAAV,CLaU,AWLrB,ENRyB,GAAzB,EAA8B,CAA9B,ELagB,CAAgB,MAApC,EAA4C,CAAC,EAA7C,EAAiD;AGJjD,AIhE6B,AEiBZ,AG0CjB,AC2VA,AbjVI,AKbA,ASoPJ,AH5OI,ICLJ,EH1CiB,AJuCb,AMQA,CF/Cc,AG0Cf,CL3D0B,AK2DzB,CTKC,AIhEyB,AEiBV,AJuCb,AMQA,CEsVD,AbjVI,AKbF,ASoPJ,AH5OI,CJhEwB,AK2DhC,CAAQ,CTKC,ASLT,CTKU,AHKI,CYVH,AC2VA,AC1GF,AJ5OF,CELP,APHI,CFQS,AIhEyB,APqErB,CGLjB,AIhEuC,AK2DzB,AC2VA,AFtVV,CCLJ,AEiPa,AH5OI,CRAD,CAAC,AIhEuB,AK2DvB,CAAjB,AZUsB,CaiVJ,AC1GH,CX5OK,ASLA,AC2VD,CFtVI,CAAC,CAAD,CCLD,AEiPH,AH5Of,CRAqB,AW4OL,CH5OQ,ECLF,AZUT,CYVU,AC2Vb,AbjVmB,CaiVJ,AbjVZ,CYVjB,AZUI,AWL6B,CG4OpB,GD0GC,AC1GgB,CD0GK,AC1GnC,EX5OoB,AW4Oa,CX5OM,AQAX,CAAc,CEsV1C,AFtV4B,GAAkB,CRA9C,EAA+C,CAAC,EAAhD,AQAoD,CAAC,CRAD,AQAN,GAAS,IAAnD,EAAyD,KAAK,QAAL,CAAc,CAAd,GAAkB,MAAM,CAAC,CAAzB,GAA6B,EAAtF;ARCA,AIjEI,AEiBA,AG2CR,APHC,ASoPG,AH5OH,ICLD,CH7C2B,CAAvB,CFjBwC,AEYvB,AGkDlB,CL9DuB,AEY1B,AGkDI,AEiPA,CP/SA,CJmEI,ESLR,CEiPQ,CAAC,EX5OK,GAAG,KAAK,CW4OlB,CAAiB,KAAjB,CAAuB,KX5OV,CAAmB,AW4OhC,CX5Oa,CAAb,CW4OgC,KAAhC;AX3OA,AM9CJ,AGyCA,AC0VA,AbjVI,AcwOA,IL1RJ,AGyCA,ETKI,AM9CF,CAAC,AGyCA,CAAC,AEiPA,CX5OG,CAAC,AUqVJ,AbjVI,GcwOA,CFjPR,AEiPS,CDyGA,EJnYT,AGKgC,AZ6CjB,CYPf,CTGI,AUqVS,CJnYG,AImYZ,CJlYA,ATiDe,CGJC,AHIA,EaiVF,CJlYV,AKyRJ,CAAiB,GDyGE,EVrVnB,AW4OA,CDyGsB,ACzGC,EdxOnB,EaiVoB,ACzGxB,ELzRA,CAAS,ATiDwB,AcwOH,CAAC,CDyGH,CAAC,GCzGC,CLzR9B,AKyRA,ELzRkB,CAAlB,AIkYsB,AbjVtB,ESjDqB,ATiDwB,CaiVR,CJlYrC,AIkYJ,CJnYgB,CImY4B,CJjYxC,IAAI,aAAJ,CAAS,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAFY,CAAhB;AN+CI,AIjEA,AMsZA,AbjVI,AKZR,ASoPC,AH5OD,MRAI,AIjEA,EPqEI,CGJD,AERF,AMQA,CRAG,CIjEA,CAAC,AMsZC,AbjVE,CaiVD,AbjVE,AWJJ,CAAC,EEqVK,CR7Vf,AMQa,CNRC,AMQd,EAAgB,CRAZ,AUqVgB,AR7VpB,AMQiB,CJjEb,CAAgB,CJiEG,AUqVF,AFrVD,CEqVN,AbjVN,EOrEJ,CAAqB,CJiEG,AUqVD,AFrVF,CEqVrB,ENtZA,EJiEmB,CAAW,IAAX,CAAgB,CAAhB,CQAH,CAAmB,ERAK,IQA5C,EAA+C,CAAC,ERAzB,AQAvB,EAAoD,CRAI,SAApD;AACA,AIjEH,AEqBD,AGwCA,AZQK,AKXL,ASmPH,AH5OO,IF5CJ,AGwCA,APHA,CSkNJ,CX3MQ,CSJD,APHA,COGC,APHA,CFOG,AM5CH,CN4CI,AM5CH,AE4CG,ECJR,GPHA,CMOc,GRAV,AQAa,CF5CjB,CAAgB,CN4CI,CAAhB,CQAkB,CF5CtB,CAAqB,KAArB,EAA4B,IE4CX,CAAmB,CAAnB,CF5CjB,AE4CI,EF5CiC,EAArC;AN6CI,ASJJ,ACwVI,AbhVH,AKXJ,AMOO,GN7BR,EL0BA,CGGQ,AHMJ,AWNI,ECJE,ACwVF,CVpVG,AQAA,CRAC,AQAA,GCJG,ACwVH,CAAC,EDxVK,GTIV,AQAA,CCJY,EDII,ECJA,CAAC,EAAP,GAAY,CDItB,CEoVA,CAAwB,CAAC,CDxVE,ECwVC,CAA5B,EAA+B,CAAC,CDxVpC,ECwVuC,CAAnC,EAAsC,MAAtC,EAA8C,WAA9C;AVnVA,AIjEJ,AEsBA,ATiDA,AcjFA,AH2EI,IG3EJ,EX2EI,AQAA,EF3CE,CN2CC,AIjEF,AIiEE,CRAC,AW3EF,AH2EE,CG3ED,EX2EH,AIjEK,CJiEG,AIjEF,AEsBE,EKhCZ,CPUa,AEsBE,CFtBf,CJiEiB,AW3EF,CPUC,CAAC,AEsBE,AE2Cf,CG3EJ,EPUoB,AIiEG,CJjEvB,EJiEY,AIjEW,CJiEG,AIjEF,CJiEZ,AQAgB,CJjE5B,EJiE8B,AIjEF,EIiEL,CAAW,GRAE,CAAC,AM3CtB,AE2CQ,CRAnB,AM3CyB,AE2CU,CAAhB,CRAiB,CM3CzB,EAAmB,AE2CU,ERAC,CM3C9B,CAAf,KE2CuB,CRAiB,CAAc,CAAd,AQAgB,GRAE,MAAM,AQA5D,CRA6D,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,IAAE,IAAI,CAAC,EAA7E;AACA,AIjEA,AEsBJ,AGsCA,ACyVI,Ab9UJ,AKZR,ASrEQ,AH2EI,IF3CJ,AKhCA,EX2EI,AQAA,GRAG,ASLF,APDb,AMMe,CRAC,AIjEE,AEsBJ,AKhCA,AH2EE,CF3CD,AKhCA,CD+ZC,CDzVC,ACyVA,AR1VjB,CFMY,ASLM,EL5DM,AMqZJ,CDzVC,ACyVT,AC/ZJ,CFsEA,CL5DmB,AMqZJ,AFpVX,CCLY,AEtEA,CLgChB,AGsCiB,CHtCC,AE2CE,CJjEG,AOVvB,AH2EI,CCLgB,EHtCpB,CAAuB,EGsCE,EHtCE,KGsC3B,EAAkC,CAAC,EL5DhB,AK4DnB,CL5DiC,CK4DM,CHtChB,CAAS,EFtBM,AEsBf,CFtBgB,CEsBH,CAAb,CAAvB,KFtBiC,CAAe,CAAf,GAAmB,IAAnB,GAA0B,CAAC,GAAC,EAA1C,EAA8C,GAA9C,CAAf;AJkEA,AIjEA,AK4DA,ACyVI,ARrbhB,ASuBQ,AH0EI,CNjGZ,EAAA,GFiGY,AIjEA,AK4DA,ADKA,EG1EE,CX0EC,ASLA,ADKA,CRAC,ASLA,ACyVA,AFpVA,EJjEE,AOTA,CPSC,EMqZC,AC9ZC,CX0ET,AUoVS,AC9Zb,GFqEI,ADKA,IJjEA,CAAkB,IAAlB,CAAuB,IAAI,CMqZvB,CAAwB,CAAC,GAAC,CAA1B,EAA6B,INrZV,AMqZc,CNrZL,AMqZM,GAAL,CAAS,CNrZnB,AMqZoB,ENrZJ,CAAhB,AMqZqB,CAAX,CNrZS,CMqZK,CNrZxB,AMqZU,CNrZjC,AMqZI,EAA+C,MAA/C,EAAuD,UAAvD;AVnVP,AM5CD,AGuCI,ACyVC,AC9ZL,AH0EI,IF5CJ,AK9BA,EFqEI,ADKA,GF5CA,AGuCG,AErEH,AH0EG,CF5CF,AGuCG,AErEH,AH0EG,GAAJ,CAAQ,ECLR,CAAW,AErEf,CFqEI,CDKa,CF5CjB,AGuCkB,AErEH,CL8BC,AGuCG,CAAf,EErEJ,CL8BA,CAAqB,CE4CT,CAAc,CAAd,GF5CZ,AE4C8B,MAAM,CAAC,CAAjC,EAAoC,KAAK,QAAL,CAAc,CAAd,GAAkB,MAAM,CAAC,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,IAAE,IAAI,CAAC,EAA7E;AJjEA,AK6DA,ACyVH,Ab/UD,AKZR,ASlEQ,AHyEI,INPZ,EE3DY,AK6DA,ADKA,EXKE,Ac9EA,CFoEC,ADKA,CCLC,ADKA,CJlEA,AF2DhB,CE3DiB,EIkEL,ECLA,CAAW,CAAX,CEpEa,CFoEC,AZUA,CYVC,CL7Df,AK6Dc,AEpEE,CPOA,APuEyB,EYVtB,AZUvB,Cc9EwB,CPOpB,CAAqB,AK6DP,GAAW,CAAzB,EL7DA,SOPgB,CAAa,GAAb,EAAkB,EAAlB,EAAsB,KAAtB,EAA6B,EAA7B,CAApB;AX0EA,AM7CA,AGwCI,AZUJ,AKbR,ASjEQ,AHyEI,IF7CJ,AK5BA,EFoEI,ADKA,ERAA,AHKE,CSlDF,AGwCG,AEpEH,AHyEG,CF7CF,AGwCG,AEpEH,AHyEG,ERAA,GAAG,CAAX,ASLI,ADKA,EXKY,GAAG,Ac9EnB,Ed8EA,Cc9EmB,EL4BnB,CAAsB,IAAtB,CAA2B,GK5B3B,GL4BA,EA/CiC,CAiDjC;AN2CA,AIlEI,AK+DA,ACwVJ,AR7VR,AShEQ,AHyEC,MJnEG,AK+DA,ACwVJ,EVrVc,AWxER,CFqEC,ACwVJ,CDxVK,ACwVJ,AR7VZ,CE1DgB,CJkEU,AIlET,GJkEY,CAArB,ASHI,APLZ,AShEsB,CFqEC,ACwVf,CR7VR,CShEyB,CD6YP,CAkBV,CD1VI,CErEiB,KPMjB,CAAsB,IAAtB,AONa,CPMc,AONN,GAAR,EAAa,CPM1B,CONa,EAAiB,EAAjB,EAAqB,EAArB,CAAjB;APOC,AK+DA,AZQD,AKdc,AS/Dd,ET+Dc,ES/Dd,CPvBiC,CA+BjC,GPqEK,EKdS,CAAA,AS/DN,Cd6EC,Ac7EA,Cd6EC,GAAG,CAAb,CKdc,CLcE,CAAC,AKdH,ES/Dd,Cd6EoB,Ac7EA,GT+DN,CAAA,AS/Dd,Cd6EyB,Ac7EA,IAAI,Yd6ET,CAAsB,Ac7EjB,CAAS,Kd6ElC,EAAkD,CAAC,EAAnD,Cc7EyB,Cd6E8B,Cc7ER,CAAtB,CAAzB;AXwEA,AM3CA,AIkYA,AbjVI,AWJJ,QF7CM,AE6CF,CRFC,CUuVD,AbjVM,EWJF,CRFC,CAAC,AHMI,CaiVL,AFrVE,CAAX,CRFa,AHMI,CGNjB,CUuVa,CVvVG,AM3CE,CN2CD,CHMK,CSjDD,AIkYJ,CVvVG,GM3CK,CIkYJ,CVvVI,AUuVH,OVvVtB,AUuVa,EVvVqB,AHMjB,CGNkB,AUuVH,AbjVO,CaiVvC,AbjViB,CGNjB,AHMI,CaiV+B,CVvVI,CM3ClB,CAAa,GAAb,EAAkB,GAAlB,EAAuB,KAAvB,EAA8B,EAA9B,CAArB;AN4CI,AM3CJ,AGwCA,AC0VI,AbjVA,AKfR,AS/DI,AHyEA,ICJA,AErEA,GFqEG,CHxCG,AGwCF,AC0VA,AFtVU,CGzEV,CXwEM,AHMF,Ac9EH,CT+DT,CMUsB,CEsVV,AbjVG,CaiVF,CVvVM,ASHf,ADIqB,CF5CP,ATiDW,AWLzB,ERDkB,ASpDc,AZ0D5B,AKfR,CIlCqB,AG0CjB,APRQ,CAAZ,AS/DI,CAAgB,CT+DG,CFSI,AM3CF,AJkCzB,EQgWQ,ARhW0B,AS/D9B,CD+ZqB,AC/ZA,GT+DzB,EQgWQ,ARhWwC,CQgWjB,CVvVT,CAAgB,AWxElC,CXwEkB,CAAd,EUuVA,ARhWR,EIlCqB,AJkC0C,CIlC7B,AIkYM,GJlYnB,EAAkB,AIkY/B,GJlYa,EAAuB,KAAvB,EAA8B,EAA9B,CAAjB;AN2CI,AIhEJ,AEsBA,AIkYI,QNxZE,AEsBA,AIkYF,EVxVkC,CERtC,CExDU,CMwZF,CAAC,CVxVkC,AIhE9B,EFwDb,CFQ8C,AM1C9B,AJkChB,GIlCmB,CJkCnB,CFQmD,AERnD,EIlCuB,AIkYnB,CAAiB,CRhWrB,EAAM,CAAN,CQgWI,CAAuB,ARhWlB,CFQqC,AER9C,CFQ8D,CAAC,AERnD,CQgWR,EVxV8D,CUwVhC,ARhWlC,CQgWmC,CRhWjB,CIlCC,CN0CoD,AM1CvC,EIkYE,CJlYf,AIkYf,EJlYiC,AJkCrC,EFQ8C,AERnB,CFQvB,AM1Ce,AJkCnB,EIlC0C,GJkCb,EIlCV,EAA8B,EAA9B,CAAnB;AN2CI,AIjEU,AEuBd,AGyCA,ACyVC,AblVG,AKdP,AS/DG,AHwEA,ICFA,ETCI,AIjEU,CKgEX,CHzCG,AGyCF,AEtEE,CHwED,CRDG,CIjEW,APuEV,CYPT,CLhEqB,AIkEZ,CRDG,AM1CA,AK7BA,AHwEF,CRDG,AHMA,CAAC,CShDC,AK7BA,AHwEF,CAAb,CXKiB,CGNC,AHMd,Ac7EJ,AHwEgB,CRDG,AM1CA,AE2CF,CXKG,CAAC,CWLD,EXKI,GWLC,CXKG,CAAC,CGNhB,CAAkB,GHMP,AWLxB,CXKmC,CGNtB,AQCqB,CRDG,AQCF,CF3CpB,CAAe,ATgDN,AWLxB,CXKwC,CGN3B,AQC0B,CRDG,AM1C3B,EAAoB,ETgD/B,CGN2C,AM1ChC,CN0CiC,AHMA,CShDR,ATgDS,EShDlC,ATgDX,CShDJ,CTgDqD,GGNxC,IAA+C,CAA/C,GAAmD,CAApD,KAA0D,KAAK,CAA/D,CAAR;AACA,AIlES,AEwBb,AGyCA,ACyVH,AblVW,Ac5ER,AHuEI,ICFJ,CLjEA,AMmYJ,CVjUQ,CSDD,CHzCG,AGyCF,AZOI,Ac5EF,EXsEE,AQCE,CXKC,CAAC,EGNA,ASDZ,CTCa,AM1CA,AGyCF,ADEI,CXKP,Ac5EM,Cd4EG,CShDD,AE2CE,CGvED,CXsEC,ASDF,CTCG,AHME,CShDD,ATgDE,Cc5ED,AHuEE,ECFZ,CAAW,CZOL,CAAW,GYPjB,CTCE,AHMI,CGNc,AHME,AWLf,CCFY,AZOb,AWLiB,CXK1B,AWLU,CAAd,CGvEa,CXsEJ,AWtEgB,CXsEQ,ASDrC,CHzCgB,CAAc,EN0CjB,CAA6B,AM1C1B,AK5BC,EL4BkB,AK5BE,GXsEU,AM1C/B,AK5BC,CXsE+B,AM1ChD,CK5B0C,EAAzB,EAA6B,CAA7B,CAAjB,CXsEa,IAA+C,CAA/C,GAAmD,CAApD,KAA0D,KAAK,CAA/D,CAAR;AACH,AIjED,AEuBA,AGyCA,AZOK,AKfT,AS7DI,AHsEI,ENTR,EIjCI,AGyCA,GAAG,CLhEG,AKgEF,AErEE,CT6DV,CIjCU,AJiCV,AMS0C,CF1C/B,IE0CoC,CGtE7B,CPKC,AKgEf,CDC8C,CNTlD,AS7DqB,CPKC,AFwDtB,CIjCI,AGyCiB,CHzCC,AGyClB,CErEqB,AHsE8B,CJjE7B,EEuBtB,CAAuB,CJiC3B,GIjC+B,AJiC/B,ES7DqB,AHsE6B,CGtErB,AHsEqC,CAAC,GAAG,EGtEjD,CPKC,AFwDb,CExD0B,AOLE,CHsEsC,CF1ChD,AJiC3B,CExDsB,AEuBc,AK5Bf,CT6DiB,CExDE,AOLE,EAArB,CPKC,AIiE4B,CGtEJ,AHsEtC,CJjEqC,AOLxB,CAAjB,IPKkB,AEuBK,EFvByB,AEuBF,CAAvB,CFvBL,CAAlB,AEuBiD,CAC7C;AAAC,AGyCL,AC3DA,ARmDA,AS7DA,AHsEI,ICDJ,AC3DA,ARmDA,EIjCK,AE0CD,CF1CE,AGyCH,APRA,COQC,APRA,AS7DE,CL4BE,CIlBF,AF4DE,CE5DD,GF4DK,CCDZ,ADCa,CE5Db,ACVc,CT6Dd,COQc,CC3DC,ACVE,CHsEC,CF1CE,AE0CD,CF1CE,AIlBrB,CCVqB,EFqErB,KHzCQ,CAAsB,CAA1B,AE0CS,CAAkB,KAAlB,CAAwB,EGtEpB,CAAc,CHsElB,CAA6B,IGtEzB,CHsE8B,CGtER,AHsES,GGtE/B,CAAjB,IHsEa,IAA+C,CAA/C,GAAmD,CAApD,KAA0D,KAAK,CAA/D,CAAR;ARAJ,AIjEA,AEuBiC,AG0CjC,AC3DA,AbiEI,AKdJ,AS5DA,AHqEI,IJlEJ,AKiEA,AC3DA,ARmDA,AS5DA,EL0BiC,ATgD7B,AWLA,CF3C8B,AG0C/B,APRA,CFQG,ASAF,APRA,CEzDA,AEuBgC,CFvB/B,AMMC,AF4DE,CE5DD,CCTC,CAAC,CT4DT,AMSY,CF3C8B,AJkC/B,AMSE,CRDC,AM1C6B,ATgD7B,CYNd,AC3DA,AbiEe,EGNE,CIjEjB,AMMgB,ARmDA,AMSE,CJlEF,APuEZ,AWLe,CXKC,CGNC,AU3DrB,ACTA,CXoEsB,AM1Cc,AIpBH,ARsDtB,AS5DS,CPGpB,AEuBoD,AIfpD,ARiDqB,CEzDA,AFyDV,ES5DX,CXoEiB,AERQ,AS5DA,CXoEG,EER5B,AMSa,CGrEgB,AHqEE,CRDC,AERF,CFQG,AIjEjC,AFyD+B,GFQH,AQCf,CRDwB,AQCA,CNTD,GMSvB,CRD6B,AERX,AMSW,CNTD,CAAX,AS5DL,CAAS,CXoEG,CAAU,AERF,AMSE,CRDV,AQCW,ENThD,CFQmD,EWpE1B,EAAmB,CXoEhB,AWpEH,AHqEZ,ERD6C,AWpEX,CAC3C,CHoEwD,CAA/C,ERDkD,CQCC,CAApD,ERD8C,CAAU,CAAV,CQCY,ERDE,GAA5C,AQC+C,CRD1D,AQCL,CRDZ,AQCI;ARAJ,AM3CI,AG2CJ,AZKqB,AKbrB,AS5DK,AHqEJ,IRDD,ASAA,APRA,CIpCiD,CAA1B,AKxBlB,CXoEF,AM5CH,AG4CG,APRA,AS5DG,CXoEF,ASAA,AZKiB,AKbjB,CS5DI,GXoER,AHKyB,EYLzB,AZK2B,AKb3B,CFQW,ASAA,APRA,AS5DG,CFoEd,EAAc,AEpEG,CFoEF,AEpEX,CT4DY,EOQA,CTAG,CERR,CAAU,CFQC,ASAtB,APRW,GAAc,GAAzB,EAA8B,CAA9B,KFQA;AACA,AIjEA,AEuBA,AG0CA,ACzDA,Ab6DoB,AKZpB,AS7DoB,IXqEpB,AM1CA,AG0CA,APRA,ES7DoB,CXqEjB,ASAA,AZIC,AKZD,AS7DkB,CXqEjB,AIjEA,AKiEA,ACzDE,ARiDF,CS7DmB,CL2BjB,CAAC,AJkCP,CQjDU,ARiDF,CAAR,COQA,CAAW,ACzDE,ARiDF,COQX,ACzDA,ARiDA,CFQA,CSAc,APRA,CEzDC,AKiEA,CTAC,ASAF,CH1Cd,CFvBkB,AEuBA,CG0CC,APRA,CEzDnB,EEuBA,AG0CA,CTAA,AM1CuB,AJkCT,CAAU,CAAV,EIlCa,CJkCC,GAA5B,EAAiC,CAAjC,EAAoC,IIlCb,AJkCiB,CIlCR,AJkCS,EAAzC,MIlCuB,EAAmB,CAAnB,CAAvB;AN2CA,AIjEA,AEuBA,AG0CA,ACzDA,Ab6DC,AKZD,AS9DI,AHsEJ,IRAA,AM1CA,AG0CA,ACzDA,ARiDA,CS/D+C,EXuE5C,ASAA,APRA,AS7DC,CXqEA,AIjEA,AKiEA,APRA,AMQE,CEzDF,CJeE,AIfD,CJeE,GG0CP,APRA,CAAW,CFQX,AERY,AMQE,CRAD,AUzDb,ENRe,AIiEE,CEzDF,CJef,AJkCiB,CEzDC,AEuBA,CN0CC,AQAE,CRAD,AIjEpB,AMQA,AFyDsB,CNRV,CIlCZ,AJkCsB,CIlCC,AJkCZ,CFQQ,CAAN,AQAI,CNRS,AMQE,CF1CD,CN0CC,CER5B,CMQgC,CNRD,AMQE,CNRD,CFQnB,CQAe,CAAS,CRAD,CERC,GIlCd,AE0CmB,CF1CV,AJkCA,CFQU,AERA,CFQC,AERZ,CMQM,CAAU,CNRD,AMQT,CRAK,CAA1C,CERA,AMQmD,CRAD,CM1C3B,EAAqB,CAArB,AE0CK,CRA2B,AM1CvD,CE0C0D,KAAK,ERAb,CAAc,CAAhE,AQA0D,CAAU,CRAD,AQAT,GAAc,ERAA,CQA5C,CAAX,CAAjB,KRAmE,CAAc,CAAjF;AAEA,AIlEA,AEuBA,AG0CA,ACxDA,ARgDA,AS9DK,AHsEL,IRCA,AM3CA,AG0CA,APRA,AMQA,EGtEK,CXuEF,ASDA,APRA,AS9DG,AHsEH,CRCC,AIlEA,AKiEA,ACxDE,ARgDF,AMQA,CGtEI,EL4BD,CAAC,AE0CR,GRCA,AWvEc,AHsEH,ECAX,APRA,CS9DiB,CPKF,AMSE,CCdb,CFsEa,CLjEC,AEuBlB,AIdoB,CJcD,AE0CA,CJjEnB,CKiEmB,CAAnB,ACxDwB,AFwDF,CF1CtB,CAAwB,IAAI,QE0C5B,GExDoB,CAAa,CJcT,CAAS,CIdb,EAAkB,EAAlB,CJcI,CIdkB,CJcD,CAAjB,CAAxB,EIdoB,EAA6B,EAA7B,CAApB;AV0DH,AIlEG,AKiEA,ACxDA,Ab2DA,AKXA,AS/DqB,AHuErB,GRlDJ,CSkDI,ACxDA,ARgDA,AMQA,EGvEqB,CFuElB,APRA,AS/DmB,AHuEnB,CJjEC,AKiEA,APRA,AMQA,CExDA,Ab2DC,Ac1EmB,CDenB,Gb2DI,CAAC,AKXV,GEzDa,AKiEb,AZGa,AWHb,CXGA,EOpEgB,APoEA,AWHA,CExDhB,Ab2DiB,COpEjB,EMSmB,Ab2DC,GWHpB,EXGyB,Ma3DzB,Ub2DoB,CAAsB,MAA1C,EAAkD,CAAC,EAAnD,EAAuD;AS5CvD,AG0CA,ACxDA,Ab2DI,AKXJ,AShEI,AHwEJ,IF1CA,AG0CA,APRA,AMQA,CG1E+C,EF0E5C,APRA,AS/DC,AHuED,CCAC,ACxDE,ARgDF,AMQA,CF1CA,CAAC,CG0CL,AZGS,CYHD,APRR,COQA,EAAW,CAAX,ACxDc,AFwDd,CAAa,CCAC,CAAd,ACxDiB,CJcjB,CAAgB,AG0CC,CAAjB,CCxDqB,AFwDF,CCAC,ADAA,CF1CpB,CAAqB,AT6CjB,CAAqB,CYHH,ADAH,CAAN,GCAa,AZGI,AWHF,CCAD,ACxDV,CAAQ,CDwDzB,EDAa,CF1Cb,EAAmC,AE0CC,KExDA,CAAC,AFwDK,CAAC,CF1C3C,AT6CyB,CAAsB,CS7CF,AT6CpB,CAArB,AWHsC,CAA1C,CXGmD,Ca3D1B,AFwDyB,CExDJ,CAArB,GAAyB,AFwDK,CF1CvD,CIdiB,CJcwC,CIdH,EAArC,Ab2Db,Ea3DsD,Ab2DO,AWHf,CF1ClD,AE0CgE,CExD/C,AFwDjB,CF1CiE,CIdH,AFwDK,EExDlD,CAAjB,EFwDwE,CF1CxE,AT6CI,OWH+D,CAAc,CAAjF;AREJ,AInEI,AKkEA,ACxDA,Ab2DC,AKXJ,AShEQ,AHyEL,ERAJ,CElBA,COiBI,ACxDA,AFyDA,EGzEK,CXyET,ASDO,AExEG,AHyEH,CRAP,ASDQ,ADCA,CJnEC,AONG,GDgBA,CNVC,AMUA,CNVC,AKkEV,CExEc,AHyEd,ERAJ,AInEiB,CJmEjB,AInEI,AONiB,EPMD,AONZ,CPMa,EMUjB,CNVoB,AMUA,CNVpB,CJmEJ,CInE2B,CAAC,AMUxB,CVyDJ,AUzD6B,CNVzB,EAA4B,CMUC,MVyDxB,IAAT,EAAwB,CUzDK,CAAS,WAAT,EAAsB,CAAtB,CAAzB;AV0DA,AInEI,AEuBJ,AG2CA,AEzEqB,AH0ExB,GAtDD,CFUI,AG2CA,EEzEqB,CFyElB,AEzEmB,CX0ElB,ASDA,CH3CA,AK9BoB,CPOd,AEuBL,EN4CG,EInEM,CJmEH,ASDX,CTCA,CInEiB,CKEe,CAkEhC,ELpEqB,KEuBrB,CAAsB,IAAtB,CAA2B,MFvBV,CAAa,AEuB9B,MFvBoC,CAAC,GAAC,EAArB,EAAyB,EAAzB,CAAb;AJmEJ,AIlEI,AMSJ,Ab4DA,AKbH,AShEO,IDiBJ,CCpB+C,CPW3C,COPA,CXyEU,CUzDV,Ab4DC,Ca5DA,EVyDa,CHGT,CAAC,CGHW,CAArB,CADoB,AIjEL,APqEF,CGFb,AInEgB,APqEhB,Ea5DA,Ab4DgB,Ca5DA,Ab4DC,COrEb,CAAiB,CPqED,Ca5DpB,CAAqB,CNTjB,EPqEqB,Ka5DzB,Wb4DoB,CAAsB,MAA1C,EAAkD,CAAC,EAAnD,EAAuD,CACnD;AOpEA,AKkEJ,AZGC,Ac9EI,AH2ET,EAAA,GX1BA,CA+BI,AchFK,CAAC,EF2ED,AE3EG,CPSE,EIkEd,CCAa,ADAb,CJlEkB,AKkEJ,CE3EN,EPSa,AKkEJ,CAAb,EAAgB,CLlEK,AKkEJ,CDArB,CAAA,CCAwB,KAAK,EDA7B,GAAA,IJlEqB,CAAa,GKkEV,CLlEc,AKkEK,CLlEJ,AIkE9B,IAAT,CCAI,CDAoB,CCA2B,CLlEjB,AKkEkB,CLlEJ,CAAd,AKkE9B,EAAoD,CLlEJ,EAA/B,EAAmC,EAAnC,CAAb;AJkEJ,AIjEI,AEoBP,AG8CO,AC1DJ,AR8CJ,AShEoB,AH4EhB,ENZJ,IEtDQ,AOVY,CAAC,CDkBX,AF0DF,CRDC,AEXT,AShEuB,CF4ET,APZd,EMYY,CRDC,CAAC,AUzDE,CF0DD,CCAK,ADAhB,CRDa,AIjEE,AMQA,CVyDf,AIjEgB,CKkEG,APZvB,CFWoB,AUzDhB,AR8CJ,CFWqB,CIjEb,CAAiB,CJiED,ASCI,GLlEpB,CFsDR,CFW6B,AItEG,CAOxB,CFoDR,KFWI,CSCmB,CTDe,ASCI,CTDH,ASChB,CAAf,CTDJ,AEXK,EFWkC,EEX3C,EAAwB;AFYhB,ASCA,ACzDJ,AR6CA,ASjEI,AH4EJ,KGhF+C,CXgF3C,ASCA,AEjFqB,CAAzB,CDwBM,AFwDQ,CCCP,CTDC,ASCA,CPZD,CAAC,AMWU,ERAN,CQAS,CExDP,AR6CF,AMWZ,CNXa,AMUO,CNVR,AMYZ,CCAI,ACzDa,AR6CT,CFWU,CAAC,CSCE,CAAC,ACzDD,AR6CF,EFWI,CAAC,CAAD,ASCG,APZH,CFWL,AEXM,CFWZ,AEXW,CAAhB,CAAP,COY+B,CTDA,ISCL,ACzDT,CVwDmB,ASCC,ACzDR,CVwDjB,CAAR,GSCgB,CCzDH,EDyD6B,ACzDT,GAApB,EAAyB,EAAzB,EDyDG,ACzD0B,CAA7B,CAAjB,CDyD0D,SAAtD;ATAA,AIhEA,AEmBZ,AG8CY,ACzDJ,Ab6DA,AKhBH,AShEG,GT8DJ,CS9DI,EX2EI,ASCA,ECzDE,CJWd,AG8Ce,AZIF,CGLG,AIhEE,AKiEF,ELjEI,AOXJ,CAAC,CX2EG,CIhEG,CAAC,AMQF,GDyDV,ACzDa,CVwDC,AIhEE,APqEpB,CGLmB,AIhEE,EMQA,Ab6DF,AchFnB,CAAoB,CX2EG,CAAC,AM7ChC,CN6CiC,AHKF,CAAC,AchFxB,CPWgB,AOXS,CX2EG,AIhEE,CAAd,APqEG,Ea7DF,Ab6DjB,AchF6B,CPWK,AMQT,CVwDQ,GIhEK,CAAC,CMQtB,EVwDM,AUxDU,CVwDf,CAAN,CUxDK,CCnBQ,CPWS,AMQI,ACnBJ,CX2EY,AIhEE,CAAjC,AMQE,EAAyB,CAAzB,CVwDkC,AIhEA,AMQnD,CVwDY,AIhER,CJgEA,GW3EqB,EAAsB,CAAtB,CAAzB;AX4EC,AIhEG,AEjDZ,AGkHY,ACzDJ,Ab6DH,AchFG,AH2EA,CFjHR,CAAgC,CToF5B,Cc9CI,EF4EI,ECzDE,CDyDC,ADDF,CJhEK,AKiEF,ELjEI,AOXJ,CF4EJ,AE5EK,AH2EA,CCCG,ADDF,CJhEK,CMQD,CFwDD,CAAb,CJhEmB,AMQF,CNRG,AKiEF,ADDF,CCCG,ADDF,CFjHzB,AGkHY,CHlHZ,AIyD6B,ACnBrB,CF4EsB,AE5EF,AH2EA,IJhEL,AOXf,CPW6B,AOXJ,AH2EA,CJhEV,AKiEa,CAAC,CAAzB,CLjE6B,AOXJ,CF4EG,CLjE5B,AKiEA,CDDJ,CCCmC,CAA/B,ADD8B,CAAC,CCCG,CCzDrB,AFwDjB,CExD+B,CFwDQ,CCCC,EE5Ef,CAAS,CF4EU,ACzD3B,CDyD4B,CCzDN,CDyDnC,ECzDa,CAAjB,CCnByB,EAAmB,CAAnB,CAAzB;APYI,AKiEA,ACxDJ,AR0CH,AS9DG,AH2EI,IEvDJ,ACpBA,EF4EI,ADDA,GCCG,CLjEG,AKiEF,ADDA,EEvDA,ACpBA,CPWK,AMSJ,ACpBA,CF4EL,ADDQ,EJhEI,IAAI,AIgEF,CAAC,EEvDnB,ACpBA,CDoBoB,ACpBA,CH2EG,CAAC,CAAD,CEvDvB,ACpBA,AH2EkB,CEvDO,ACpBA,AH2Eb,IEvDiB,ACpBA,AH2EE,CJhEf,CAAY,EAAE,CIgEM,CAAxB,CJhEqB,AIgE7B,EJhEY,EAAqB,EAArB,AMSS,ACpBA,CDoBS,ACpBA,CPWO,EAAzB,EAA6B,CAA7B,CAAZ,CMSqB,ACpBA,EDoBmB,ACpBA,CDoBnB,ACpBA,CAAzB,CDoB+C,CAC3C;AVuDJ,AIhEI,AKiEA,ACxDC,Ab4DT,AKlBJ,AMaY,EXKR,IOrEQ,AKiEA,ACxDC,AFuDD,CEvDE,CVuDA,CIhEC,AKiEA,ACxDC,AR0ChB,CEnDgB,AKiEA,ADDA,GXKZ,CGLgB,AHKhB,AWLgB,CF9CL,AITO,CDwDV,APdZ,CFauB,CUvDE,CAAb,CNTA,AIgEc,CRAC,AIhEA,AIgEA,EXKvB,CGL0B,AHK1B,COrEQ,AIgEmB,CJhEC,AIgEA,CAAC,CRAzB,EIhE4B,AIgEA,KAAK,IXKrC,GAAA,AWL2B,CJhEC,AIgEN,CJhEe,AIgErB,IJhEY,AIgEsB,EJhEP,CAAf,CPqEZ,COrE8B,AIgES,CAAvC,CJhEY,AIgEpB,CJhEA,KPqER,EACI,YADJ,EAEI,UAFJ,EAE6B;AGNzB,AIhEI,AKiEH,ACzDmB,Ab+DpB,AKtCR,AS7CQ,AH4EC,CN/BT,CAAsB,ES7Cd,EPYI,AMQgB,ARyB5B,CQzB6B,ARyB7B,CF+BY,AHOA,COvEG,AMQgB,ACpBnB,CPYI,AOZH,GdmFI,GAAG,EGPE,EIhEV,AOZJ,CX4EiB,AIhEE,APuEF,AcnFD,IPYZ,AOZJ,CX4EsB,AIhEE,AOZH,CX4EE,GIhEK,CPuEhB,CGPgB,AHOA,EcnF5B,EAA+B,GX4ER,AHOX,CAAwB,EGPE,CAAhB,AIhEE,CJgExB,AIhEiC,AOZjC,EAAyC,EPYjB,CPuEZ,COvE2B,APuEvC,COvEwB,APsEC,CACuB,COvEN,COZ1C,CPYwB,CAApB;AACA,AMOA,KAD2C,EAE3C,GNRM,GAAG,GAAG,IAAI,cAAJ,CAAY,EAAE,GAAG,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,CAAZ;AJgEJ,AI/DI,AKiEJ,AC1DK,Ab+DL,AcnFA,AH6EA,ICCA,AE9EA,EPaI,AMOC,CD0DF,AC1DG,CD0DF,AZKA,AWNE,CRDD,AI/DE,AMOC,Ab+DH,AcnFD,CPaI,AObH,GX4EI,CAAC,AQCE,CCCZ,AC1Dc,EVwDD,AQCE,CRDf,AUxDiB,EVwDD,AI/DZ,AMOA,CVwDa,AI/DE,APsEF,AWNE,CXMD,EWNI,CRDD,AI/DjB,CAAoB,AObxB,CdmFiB,AcnFK,CdmFtB,AWNA,ERD0B,AI/DE,APsEF,CcnF1B,CAA2B,KX4E3B,EAAmC,CAAC,AW5EpC,EX4EA,AW1GiC,CP2CT,AOXxB,CX0EwC,AI/DP,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAApB;AJgEA,AI/DA,AKiEP,AC3DwB,AbgEjB,AcjFJ,AH2EA,GC5EJ,CAhDJ,CA8HI,CTHQ,AI/DA,AMMiB,AbgEjB,CahEkB,CF0DlB,CJhEG,AMMiB,CNNhB,MJ+DM,CAAC,CAAD,AHOE,AWNF,CRDV,AHOa,COtEb,CAAe,AIgEF,CRDG,CAAC,CHOL,COtEZ,APsEA,COtEoB,AIgEF,CAAC,CXMG,CGPC,CI/DC,EJ+DG,AHO3B,AWNwB,CXKF,CACM,GGPI,CAAhB,CQCG,GRDmB,AQCJ,CRDlC,AI/DoB,AIgEF,CJhEW,AIgEjC,IJhEwB,EAAe,CAAf,EAAkB,EAAlB,CAApB;AJgEH,AI9DG,AMIA,AbiEA,AKtBZ,IAAA,CFG4B,AUhD2B,CV6D/C,CU1DI,GNLM,AF+ClB,ME/CwB,GAAG,IAAI,kBAAJ,CAAc,EAAd,EAAkB,GAAlB,EAAuB,EAAvB,CAAf;AACA,AMIC,AbiED,AKvBZ,AMgBQ,MJ9DI,AMIC,CAAC,EAAE,AF0DH,IAAI,CAAC,CE1DI,ENJC,AI8DF,CJ9DG,AMIC,AF0DjB,EE1DI,AF0DY,CAAC,CJ9Db,CAAiB,EI8DA,IJ9DjB,CI8DsB,OAA1B,EAAmC,CAAC,EAApC,EAAwC;ACE5C,AC5DyB,AR0C7B,AS3DQ,AH4EI,ECCR,IC5DyB,AF2DjB,CE3DkB,CCjBhB,CDiBkB,CR0ChC,EOkBI,CAAA,GPlBJ,AMiBsB,CG5EC,AH4EA,CNjBvB,AMiBsB,CAAV,CG5Ec,EF6EtB,ADDwB,CCCxB,ADDyB,CG5EC,KH4EK,ECC/B,CDDmC,ECCnC,GDDwC,CG5ElB,AH4EE,CG5EQ,GAAV,CH4EyB,CCCtC,AE7E4B,AH4E7B,GG5Ec,CF6EtB,CE7E0C,CF6ElB,CE7EF,EAAwB,EAAxB,EAA4B,EAA5B,CAAlB;AX4EA,AI7DI,AK+DJ,AC7DI,AbkEA,AKxBS,AS1Db,AH4EC,ENlBY,ES1Db,CDa+C,AFmD3B,CAapB,CE5DI,CD4DA,EL/DI,APoEA,CGPD,AI7DE,AF4CI,CAAA,CS1DJ,CF6EC,AE7EA,CPcG,CAAT,CK+DS,CL/DG,AF4CH,COmBb,CZKkB,AKxBL,CFiBb,EHOqB,CclFrB,CdkFI,AclFiB,CT0DR,CAAA,ES1Db,CAA0B,IAAI,aAAJ,CAAS,WAAT,EAAsB,CAAtB,EAAyB,CAC/C;AX2EP,AI7DW,AMEH,AChBA,GX4DT,GU5CS,AChBA,CDgBC,AChBA,EDgBE,AChBA,GPcM,GMEV,GChBa,CAAC,CPcI,GAAI,CAAC,GOdnB,CPcuB,AOdJ,CPcF,AOdrB,GPcgC,SAAX,GAAuB,SAAS,CAAC,CAAC,GAAC,CAAH,CAAjD,CADQ,CAER;AK8DR,AC7DgB,AbkEZ,AKxBR,AS1DkC,MDgBd,AChBc,CDgBb,AChBc,EF6E1B,AC7Dc,AChBc,EdkFxB,AKxBb,EOmBa,CAAC,CZKG,CAAC,CYLD,APnBjB,COmBI,APnBQ,AS1DkC,CdkFzB,AKxBrB,AS1D+C,CF6E3B,AZKZ,CYLa,APnBE,CLwBC,AKxBxB,CLwByB,CYLD,APnBU,ELwBN,CclFS,CT0DrC,AS1DwD,CF6E3B,AE7EQ,CT0DW,ES1DY,GdkFvB,CYLjC,AZKkC,CKxBtC,COmBsC,CAAC,APnBwB,EOmB3D,EAAuC,GZKf,CAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AGL9D,AI7DY,AK8DJ,AC9DA,AbmEI,AcnFJ,AH6EJ,ERAJ,GUjEmD,ACbI,CF+E/C,AClEqB,CViE7B,AUjEI,ACXI,CX4ER,GElBI,AMkBO,CJ7DO,AK8DJ,AZKI,CYLH,GL9DO,APmEA,CGNtB,ASCQ,APnBJ,CFkBJ,ASCoB,APnBhB,CE3CqB,AK8DJ,AZKI,EWNrB,CNlBA,CE3CyB,AK8DJ,APnBrB,IAAA,COmB0B,AZKI,CAAC,AKxBzB,CFkBV,AElBI,EAAS,CFkBb,ASCyB,APnBrB,COmBgC,CPnBpB,EE3CS,CAAY,CK8D7B,AZKiB,AKxBrB,CE3CqB,APmEqB,CAArB,AKxBH,CE3CmB,APmE7B,EOnE+B,CJ6D3C,EI7D8C,CF2C1C,CE3CqB,CF2CM,CE3CmB,AF2C9C,EE3CqB,EAA6B,CAA7B,AF2CQ,CE3CrB;AJ8DR,AI7DQ,AK8DP,AC7DD,AR0CH,AS3DQ,AH6ER,GAfD,CE7CI,ECjBK,CAAC,CPgBE,COhBA,GPgBI,AMCJ,ACjBJ,CPgBS,AMCJ,UNDD,AMCR,CNDwB,AMCJ,INDZ,AMCR,CND6B,AMCJ,INDQ,AMCJ,aNDA,AMCJ,CNDa,AMCJ,GNDL,EAAc,CAAd,EAAiB,EAAjB,CAArB,AMCiB,EAAsB,CAAtB,CAAzB;AV6DA,AI7DQ,AMCR,AbiEQ,AcnFK,IDkBb,EClBa,CAAC,CPiBN,CJ6DH,AW9EW,GPiBJ,AMCJ,AbiEI,COlEC,AMCJ,CV4DT,CAAW,CHKH,EAAU,AcnFO,CX8EzB,AW9E0B,GX8ER,CI7DV,AMCR,CNDwB,AMCJ,GV4DG,AW9EP,CPiBR,AMCR,AClBmC,CPiBN,AMCJ,AClBT,GAAuB,CPiBN,AMCJ,EV4DX,CAAc,KAAK,KI7DR,AMCJ,CNDa,AMCJ,IV4DF,CAAgB,GAAhB,AI7DH,AMCJ,CV4D2B,CI7DJ,AMCJ,CNDf,AMCJ,CAAzB,CNDmD,CACvC,KJ4DwC,IAAA,EAAI;AAAI,AI5D/C,AK6Db,AC5DA,AbiEY,AKxBhB,AS5DQ,AH+ER,ENnBA,AMmBA,EE5DI,CCrBmD,EAG/C,CT2DR,CAAA,CE1CiB,CAAC,AK6DP,CC5DC,AF4DZ,CRDiE,AI5D7C,AMCP,AF4Db,CXKsB,EAAE,CGN6C,AI5D7C,AK6DpB,CL7DqB,AF0CzB,CLwB2B,AKxB3B,CFkBwE,EQCxE,CE5DI,AbiE2B,AWL/B,CRD4E,AU3DpD,AbiEQ,CGN6C,CI5DzD,CAAc,AF0ClC,CFkBwE,AI5DpD,AMChB,CAAyB,CV2DwC,AElBrE,CE1CsC,CAAtB,CJ4DqE,AU3DpD,EbiEjB,AWLhB,GRDgE,AQChE,ENnBS,GAAT,EAAsC,CQzCT,CAAS,GF4DtC,KE5D6B,EAAmB,CAAnB,CAAzB;AV2DuF,AI5DlD,AK8DxC,APnBG,AS5DK,AH+EL,GCNJ,ETIoC,CAAd,AW7Eb,CX6EL,AW7EM,CT4DA,CAAC,AS5DC,CPiB6B,CAAC,CF2C5B,AS5DN,CPiBoC,IAAI,AF2C7B,CE3C8B,GF2CnC,CAAU,CAApB,GE3CwC,CAAc,CAAd,GAAkB;AJ6D7D,AI7De,AMEZ,AbiEY,AKvBZ,AS7Da,AHgFb,GRLJ,CUxDI,AR0CA,ES7Da,CT6DV,AS7DW,CT6DV,CE7C+C,AMG/C,ACnBY,AHgFX,CE7DA,CNDO,GPkEI,AWJhB,CXIiB,AWJN,EXIC,AKvBZ,ELuBqB,AWJrB,CE7DA,CAAgB,CF6DE,GE7DlB,CAAqB,CF6DE,OE7DvB,CF6DkB,CE7Da,AF6DC,KAAK,GE7DrC,EAAyC,KF6DT,CAAgB,EE7DhD,CF6DgC,CAAoB,UAAA,IAAA,EAAI;AJ9D3C,AK+DjB,AZIoB,AKvBhB,AS9DI,AHgFwD,ECChE,EPnBI,CSjEmD,CAAzB,CTiEvB,ASjEH,CTiEI,EE5CS,CAAC,CK+DlB,AZIoB,COnEA,AK+DpB,ADDiE,CNlB7D,CAAW,CAAC,CE5CQ,AI8D6C,CJ9D5C,CF4CN,CMkBqD,ECCxE,AZI8B,AKvB1B,COmBJ,AZI+B,CKvBP,AMkBoD,CNlBnD,AMkBoD,CJ9DzD,CAAc,APmEd,COnEA,APmEgB,AKvBR,AMkB4C,CNlB3C,CMkBwC,CJ9D/B,CF4ClC,CE5CY,APmEI,AWLiE,ECCrF,AZGyB,CACmB,EYJ5C,ADDgE,YCChE;ATFJ,AI7D8C,AMEtC,AbkEa,AKvBb,AS7DA,AH8EuF,IE5DvF,AR2CA,AS7DA,CH8EgC,CAAd,CNjBf,AMiBH,CNjBI,CFgBZ,AU3DY,AClBA,CPgBkC,AMEjC,AClBA,CPgBkC,APkE3B,EOlE6B,CJ6DjD,GI7DqD,APoE1B,COpE2B,COhB9C,GAAiB,ET6DjB,CAAqB,CE7CoB,AMEzC,AR2CsB,CE7CiC,AMEjC,CNFmB,CF6ChB,EE7CkC,AME3D,AClBA,CDkB2B,AR2C3B,EAA8B,CAAC,GAAG,EQ3ClC,CR2CA,CQ3EiC,CAkCjC,ARyCuC,CAAvC,EAA0C,CAAC,GAAG,GAA9C;AFvHR,AI0EoB,AMKZ,AbgEgB,AKvBhB,AS5DA,AH6EH,CRzIL,EAAA,AQsII,CNdI,GAAG,CAAC,AS5DE,CPY6C,EAGvC,EOfD,GAAG,CdmFO,GcnFH,IT4DlB,CAAqB,CAAC,GAAG,CAAC,ELuBV,CAAqB,AKvBrC,CS5Dc,CT4DiB,AS5DP,CT4DQ,CLuBS,CAAC,AcnF5B,CT4DqB,CS5DN,ET4D7B,CS5Dc,CT4D0B,CAAC,AS5DP,GT4DU,CLuB5B,AKvB6B,AS5D/B,EdmFyC,AcnFf,CT4DxC,EAAkD,AS5DpC,CT4DqC,CS5DN,ET4DS,AS5DxC,CT4DyC,AS5DvD,CA1CiC,CA2CjC,CT2DA,CLuBgB,EAAqD,UAArD,EADG,CAIH;AOvEH,AK+Db,AC1DA,AbmEgB,AK1BhB,AS1DA,IT0DA,GAAG,COiBH,APjBI,COiBJ,CL/Da,CAAC,AK+Dd,EL/DgB,CK+DZ,GL/DgB,CAAC,CK+DZ,KPjBT,CAAqB,CE9CL,AF8CM,CE9CQ,CAAd,CK+DZ,APjBqB,COiBL,APjBpB,CE9CkC,AK+D9B,CAAJ,APjB4B,CE9ChB,AF8CiB,GAAG,CAAC,COiBX,EPjBtB,EOiBA,APjBsC,CAAC,GOiBjB,APjBoB,EOiBpB,CPjBtB,EAA+C,CAAC,COiB1B,EPjB6B,CAAC,EOiB9B,CAAtB,APjBA,GOiBsB,KAAA,CAAtB,GAAsB,EAAA,CAAE,GAAF,EAAtB,EAA+B;AL/DO,AKgElC,AZSY,AK1BhB,AS1DA,AH0ER,INhBQ,GAAG,CAAC,CMgBZ,CJ/D8C,CAAC,AKgE9B,ELhEgC,EJ8DlC,CSEH,CAAW,APjBf,EMgBR,EJ/DyD,CAAC,AKgE9C,GAAmB,CAAC,ILhEiB,CAAkB,AKgE9B,CLhEY,GAAsB,CKgEvC,CAAW,KAAX,GAAmB,CAApB,IAAyB,KAAK,OAAjD;ALhEQ,AKiEX,APjBD,AM3HR,CAAA,EAAA,CN2HQ,COeA,EPfG,CAAC,CEnD+C,EAIvC,AKgEL,GPjBP;AE/Ca,AKiET,AC5DJ,AboEgB,AKzBhB,AS3DA,IT2DA,GAAG,CQ3CG,AR2CF,AS3DA,EPWS,CAAC,AKiEL,CPjBT,CEhDgB,GKiEZ,AZQkB,CYRP,AC5DA,GAAG,CNLM,CAAC,AKiErB,CZQyB,AcpFV,CDgBG,CD4DC,CAAC,AZQQ,AcpFV,CF4ElB,CE5EJ,EPWgB,CAAkB,APyEG,COzEzB,MMKM,CAAU,GAAV,EAAe,GAAf,AboEc,CAAsB,CapEhB,IAAE,EboER,CAA8B,CapExB,CboEN,CAAhB,CapE+B,CAA7B,EAAgC,EAAhC,EAAoC,EAApC,CAAlB;ANLqC,AKkEpC,AC5DD,AR2CH,AS3DG,GTiDJ,CQjCI,AChBA,KAAI,CPUiC,AOVhC,CPUiC,EAAE,AMM/B,CAAC,CF0DH,GG1EP,GPUgD,AOVhC,CPUiC,EMMjD,AChBA,CDgBqB,IAArB,CNNwC,AMMd,CNNgC,CAAlB,EMMV,CNNgC,YMMpC,CAAS,WAAT,EAAsB,CAAtB,EAAyB,CAC/C;ANPQ,AKmEf,AC5DQ,AbmEW,AcnFhB,GFsEJ,CEtEI,EDgBK,CAAC,ENX6C,AMW3C,AChBJ,CPKyB,AOLxB,EPUM,IALkB,AP8ET,CO9EZ,CMWS,CAAC,CChBlB,GdmF2B,AcnFT,EAAlB,EDgBQ,AbmEuB,CanEJ,AbmEX,CanEZ,CbmE8B;AOvE1B,AMIsB,AboEV,AK1BvB,MQ1CiC,CAAC,EAAE,GNJnB,IAAI,EMIwB,CNJrB,AMIsB,INJlB,IMIQ,CAAmB,CAAnB,GAAuB,KNJnC,CAAY,EAAE,GAAG,EAAjB,EAAqB,EAAE,GAAG,EAA1B,EAA8B,EAA9B,EAAkC,CAAlC,CAAb;AACA,AKgEhB,AC7DY,AbqEgB,AcpFpB,KDcmD,EAE/C,CNJI,CKgEhB,AE5Ea,GPYO,CAAC,AOZJ,CAAC,GAAG,CAAb,CF4ER,CE5EwB,CAAC,EPYT,CAAgB,AOZJ,IPYZ,AOZc,CPYO,GOZT,CPYa,EOZN,CAA3B,EAA8B,CAAC,EAA/B,EAAmC,GPYN,CAAS,GAAT,EAAc,CAAd,EAAiB,EAAjB,CAArB;AACA,AK/EhB,ACkFa,AbqEe,AK3BxB,ASzDQ,CFnEZ,CP4HI,CO5HJ,GCkFa,CAAC,CNHE,AF6CZ,CQ1CY,AR0CZ,CSzDc,EPYE,CAAC,AOZA,CdoFO,EcpFJ,EDeC,AR0CrB,CQ1CsB,AR0CtB,CSzDwB,GPYZ,CAAgB,APwEM,CAAC,EarEvB,AR0CZ,CE7CY,AMGmB,CNHE,AMGzB,AbqEgB,CAAgB,AK3BxC,GE7CqC,KOZjB,CAAc,CdoFgB,AK3BzC,CL2B0C,GK3BnD,ASzDsC,CAAC,CPYN,AF6CT,CE7CkB,CPwEQ,CAAV,CAAoB,GcpF1B,CdoFM,COxEP,APwEgC,CcpFf,CPYE,CAAnB,CPwEoC,COxEd,APwEe,COvEtD,AObsC,CAAC,MdoFf,CAAhB,GcpF0B,GAAgB,CAA9C,EAAiD,GAAjD,EAAsD,EAAtD,CAAZ;APaS,AMEiB,AbsEb,AK3BjB,ASzDI,MDc0B,ACd1B,CDc2B,EAAE,CNFpB,CAAC,AF6CP,CAAC,CE7CQ,APoEA,GKvBJ,CE7CQ,AF6CP,CE7CQ,AF6CT,CL2BW,AK3Bf,ESzDW,CAAC,CTyDD,GE7CH,AOZZ,CPY0B,AF6CP,ASzDE,CPYT,AF6CQ,CAAD,CAAhB,ASzDH,CPY8B,AF6ClC,CE7CY;AAAyB,AMEjC,AbuEgB,AK3BvB,GAFD,EQ5CuD,CAAzB,CAA1B,GNAqC,CAAC,EAAE,CPyEpB,CYTb,ELhEqC,CAAC,MPyEf,CAAC,COzES,CAAc,CAAd,CPyEpB,CAAgB,COzEsB,CPyEpB,CAAC,KAAH,CAAS,IAAT,CAAc,IAAI,CAAC,QAAnB,CAAhB;AOzER,AMIZ,AbsEiB,AcrFb,IDeJ,ECfI,GPU+C,AMK/C,CAAC,CNHO,AOZJ,CAAC,ODeT,GAAiB,MCfb,CAAsB,EDe1B,KCfI,CAA8B,GAA9B,EAH+B,CAGK;APY3B,AMKb,AbqEa,AK7BhB,QQxCS,ENLO,CAAC,EAAE,IAAI,CAAC,AMKL,GAAG,IAAI,CNLP,CAAc,CAAd,GAAkB,EAAtB,WMKO,CAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB,EAA+B,GAA/B,EAAoC,EAApC,CAAnB,CA5CiC,CA6CjC;ANNsC,AMQtC,AbmES,AK7BjB,SLSgB,AKThB,CE9C8C,CAAC,EAAE,EP2E1B,AK7BvB,EE9CqD,CAAC,QAAL,CAAc,CAAd,GAAkB;AAA/C,AP4EA,AKhDpB,ASvCY,CTuCZ,CAAqB,IAArB,ASvCY,CTuCZ,EE9B2D,EAGvC,AOZJ,CAAC,UAAL,CAAgB,IAAhB,CAAqB,GAArB;APYS,AMQb,AboEY,AcvFX,KAvDgC,CAyDjC,EDiBI,ENRS,AP4ED,CO5EE,EAAE,IAAI,CAAC,EP4EC,CAAC,IapEF,AboET,CO5EI,AP4EY,CO5EE,CAAd,AMQQ,EAAxB,CNRkC,AP4EtB,EO5EA;AAA0B,AMStC,AboES,IapET,KAAI,CNTkC,AMSjC,CNTkC,EAAE,QAAQ,CAAC,EMSlD,GAAsB,GNTmB,AMSzC,CNT2D,CAAlB,GAAsB;AAAnD,AMUZ,AboEK,IapEL,GbqC0B,CAgCtB,COlF+C,AMa/C,CAAC,CNTO,eMSZ,GAAwB,EAAxB;ANTa,AF8CrB,ASvDQ,ITuDR,ISvDc,EPSO,CAAC,AF8CtB,EE9CwB,COTJ,GAAG,IPSS,CAAC,QAAT,CAAkB,CAAtB;AAAyB,AMUrC,ARoCR,ASvDwB,MAAA,GDmBX,CNVgC,CAAC,AOTjB,EPSmB,AMU/B,ACnBc,CDmBb,GAAG,CAAb,EAAgB,CNVgC,AMU/B,CNVgC,EMU7B,IAAE,ENVkB,CAAkB,CAAlB,AMUpB,GNV0C,AMUnC,CAA3B,EAA8B,CAAC,EAA/B,EAAmC;ANVvB,AMWR,AboEA,AKjCZ,ASvDuB,KAAf,CdwFI,GOnF+C,CAAtB,AMenB,ARmClB,EE7CmB,CMUE,EboEA,COnFgB,AMeb,AboEF,AKjCtB,CElDgB,CFkDhB,EQnC4B,CboEhB,CAAgB,IAAhB,GAAuB,SapEX,AboEoB,CapEN,AboEO,KapEH,CAAC,EboER,CAAmB,UAAnB,CapEG,AboE1B,GapEgD,KAAI,CAAC,gBAAL,GAAsB,CAA1D,EAA6D,GAA7D,EAAkE,EAAlE,CAAZ;ANRI,AMSJ,AboEH,AKlCa,AStDd,ETsDc,IQlCV,ECpBE,GTsDQ,CE3CA,AF2CA,GE3CG,GAAG,CF2CN,AStDG,ETsDH,CE3CU,AOXJ,CDoBC,CAAC,GRkCR,CQlCV,ARkCU,CQlCa,GAAvB,GNTgB,CAAW,EAAE,GAAG,EAAhB,EAAoB,EAAE,GAAG,EAAzB,EAA6B,EAA7B,EAAiC,CAAjC,CAAZ;AACA,AP6EX,AczFwB,GdkDzB,GclDyB,EPYb,GAAG,AOZe,CPYd,COZgB,SPYpB,CAAe,IAAf,CAAoB,IAAI,aAAJ,CAAS,GAAT,EAAc,CAAd,EAAiB,EAAjB,CAApB;AACA,AMQJ,ARkCR,ASvDwB,KAApB,CDqBI,ENRI,GAAG,AMQH,ARkCZ,CE1CgB,AMQH,MRkCb,CAAY,CAAZ,EE1CY,AF0CW,CE1CI,AF0C3B,EAAkC,EE1CtB,CAAoB,AMQxB,CAAsB,ARkC9B,EAAgD,CE1CZ,IMQ5B,CAA8B,CRkCtC,EQlCQ,ARkCuD,EQrCxB,CAGK,ENRZ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAApB;AAEA,AP2EhB,AczFQ,QPcQ,AOdF,CdyFd,EKlCQ,CSvDU,GAAG,EPcI,AFyCjB,CEzCkB,AFyClB,CEzCiB,CAAT,AP2EhB,EKlCQ,CEzCuB,AFyCvB,GEzCQ,CFyCR,EAAM,CAAN,EAAS,CAAT,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,KAA6B;AExCrB,AP5FhB,AKqIK,ASxDiB,Cd7EtB,EAAA,Gc6EsB,EPeN,GOfW,EAAE,CPeP,CAAC,UAAP,CAAkB,IAAlB,CAAuB,IAAI,aAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAAvB;AMMJ,ACrBS,KAAb,CDqBI,KAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,GAArB;ANLI,AMMP,AbmER,AKhCG,ASxDI,ETwDJ,GQ3FqC,CA0DjC,ENRQ,AOfF,CTwDV,CAAA,GEzCgB,CAAC,GOfE,ETwDnB,CAAA,ASxDsB,IPeV,CAAgB,GFyC5B,CEzCY,CAAqB,CFyCjC,EEzCY,EAA0B,IAA1B,EAAgC,AFyCnC,GAAT,CEzCY,CFyC0B;AExC7B,AFyCL,ASzDmB,MAAA,CPZf,CFqEE,CAAC,ESzDiB,CTyDd,CEzCC,AOhBe,Ed0FnB,EKjCQ,IAAL,CAAU,CAApB,CADkC,CAElC;AEzCQ,AOjBU,KAAlB,CA7DiC,CA+DjC,CPeQ,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf;AACA,AMMR,ARmCA,IAAA,GAAG,CEzCK,AMMF,ARmCF,MEzCU,AMMF,CNNG,EMMA,ARmCf,QEzCQ,CAAkB,IAAlB,CAAuB,IAAI,aAAJ,CAAS,GAAT,EAAc,CAAd,EAAiB,EAAjB,CAAvB;AACH,AMKW,ARoChB,ASzDA,ITyDA,EQpCgB,CRoCb,CAAC,CSzDC,EDqBgB,EAAE,ACrBd,CTyDT,ASzDU,CTyDC,CAAC,CSzDC,CAAb,CTyDe,CSzDC,CAAC,CTyDjB,EAAoB,ASzDA,CTyDC,GAAG,ASzDxB,CTyDyB,CSzDC,CAAC,ETyD3B,ASzDA,EAA+B;ADqBhB,ARqCf,ASzDI,ITyDJ,CQrCA,ERqCG,CAAC,ESzDM,CAAC,GAAG,CAAV,STyDJ,CAAqB,CAAC,GAAG,GAAzB,EAA8B,CAAC,GAAG,GAAlC,EAAuC,CAAvC,EAA0C,CAAC,GAAG,GAA9C;AExCI,AMIJ,ARqCA,ASzDI,ITyDJ,EEzCI,CFyCD,CQrCG,ARqCF,ESzDM,CPgBF,CAAC,COhBI,GAAG,GDoBC,GNJb,AMIgB,CNJA,CFyCpB,CAAqB,CAAC,CEzClB,CAAqB,CFyCA,CAAC,CEzCtB,AOhB2B,CAAC,CPgBF,AFyC9B,ASzDiC,ETyDF,CEzC3B,AFyC4B,ASzDI,EPgBD,CFyCA,CSzDJ,CAA3B,CTyDJ,AS3D+B,CAG3B,CPeA,AFyCoC,CAAC,GAAG,CAAC,GAA7C,EAAkD,CAAC,GAAG,CAAC,IAAvD;AExCC,AMGoB,ARsCrB,IAAA,EQtCqB,CRsClB,CAAC,GQtCsB,EAAE,WRsC5B,CAAqB,CAAC,GAAG,CAAzB,EAA4B,CAAC,GAAG,CAAC,IAAjC,EAAuC,CAAC,GAAG,GAA3C,EAAgD,CAAC,GAAG,CAAC,IAArD;AQtCoB,ARuCpB,ASzDI,ITyDJ,CQvCA,ERuCG,CAAC,ESzDM,EAAE,GAAG,ETyDf,CSzDkB,CAAC,QAAJ,CAAa,CAAb,GAAiB,EAAjB,GAAsB,CAAC,IAAI,IAAI,GAAG,CAAX,CAAlC;APiBJ,AMEA,ARuCA,ASzDI,ITyDJ,ESzDI,CTyDD,CEzCG,AMEA,ARuCF,GSzDK,CDkBC,AClBA,ETyDV,CQvCa,GNFG,GAAG,COhBf,CAAiB,EPgBE,EOhBnB,CAAsB,IAAI,WPgBX,CAAc,COhBP,CPgBP,AOhBgB,EPgBE,COhBX,EPgBP,AOhBqB,CAAd,CPgBgB,COhBC,CPgBxB,AOfX,CPeR;AACA,AMCc,ARwCd,ASzDS,IPgBT,AFyCA,EQxCc,CRwCX,CAAC,ASzDK,CAAC,EDiBS,ACjBP,CTyDZ,CQxCqB,CNDX,CAAC,AF+BuB,CAWlC,AS1DiB,CAAC,QPgBlB,AOhBY,CPgBU,AOhBK,CAAf,GPgBZ,AOhB+B,CPgBJ,IAAI,AOhBK,CAAC,YPgBV,AOhBI,CPgBK,AOhBc,CAAnB,EAAsB,CAA7C,KPgBqC,CAAC,CAAD,CAAlB,EAAuB,CAAvB,EAA0B,EAA1B,CAA3B;AACA,AMAa,ACjB2C,IPiBxD,CMAA,GCjBwD,CAAC,EAAE,IPiBhD,CAAC,COjBqD,CAAC,EPiBlE,CAAiB,AOjBkD,UPiBnE;AMCA,ARyCA,AS3DQ,IT2DR,GAAG,AS5DwC,CDmBrC,ARyCF,CS1DI,QDiBO,ARyCf,GQzCkB;ANClB,AMDmB,AR0CnB,AS3DS,IT2DT,CEzCA,CMDmB,CNCnB,AFyCG,CAAC,AS3DK,CAAC,CPkBV,CMDwB,ACjBZ,EDiBc,CR0C1B,CEzCI,AFyCO,CEzCN,AFyCO,AS3DK,CAAC,ET2DH,CAAC,AS3DG,CAAX,ET2DR,EAAqB,CEzCrB,AFyCsB,EEzCN,CFyCS,CAAC,EEzC1B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CAAlC;AACA,ARuCJ,IAAA,GAAG,CAAC,EQvCM,EAAE,GAAG,ERuCf,QQvCyB,CAAC,QAAX,CAAoB,CAApB,GAAwB,EAAnC;AACA,ARuCJ,IAAA,EQvCI,CRuCD,CAAC,MAAJ,CAAW,CQvCG,ARuCd,CQvCe,CRuCD,CAAC,GAAG,GAAlB,EQvCI,CAAsB,IAAtB,CAA2B,IAAI,aAAJ,CAAS,GAAT,EAAc,CAAd,EAAiB,CACxC;AAAC,ARuCT,ASxDI,ITwDJ,GAAG,CQvCM,ARuCL,CQvCM,CCjBA,CDiBE,GRuCZ,CAAW,CAAC,ASxDI,GTwDD,ASxDI,CTwDH,CQvCM,CAAC,CCjBA,CTwDvB,EAAsB,CAAC,GQvCX,ARuCc,CQvCM,ARuCL,CQvCf,GAAwB,ARuCpC,OSxDmB,CAAe,EDiBY,CAAC,GCjBP,CAAC,QDiBL,ACjBF,CDiB0B,ACjBV,CDiBd,ACjBjB,EDiB4C,ACjBV,CDiBzC,GAAuD,EAAvD,ACjB+C,CAAC,EDiBY,CAAC,GAAC,CAAlE,CCjB6C,CAAgB,CAAhB,GAAoB,EAAtD,EAA0D,EAA1D,CAAf,CANiC,CAOjC;ADgByE,ARwC7E,IAAA,GAAG,CQxC0E,ARwCzE,CQxC0E,EAAE,EAAE,CRwClF,CAAW,CQxC0E,ARwCzE,CQxC0E,ERwCvE,CQxCwE,GRwCvF,EAAqB,CAAC,GAAG,CAAC,IAA1B;AQxCQ,ARyCR,ASxDI,ITwDJ,ESxDI,CDc4C,AR0C7C,CAAC,CQxCI,GChBE,CAAC,ITwDX,MSxDI,CAAkB,IAAlB,CAAuB,IAAI,aAAJ,CAAS,QAAT,EAAmB,CAAnB,EAAsB,CACzC;ADeC,ARyCT,ASxDS,ITwDT,GAAG,CQzCM,ARyCL,ASxDK,CDeC,ACfA,EDeE,ACfA,GTwDZ,EQzCiB,CAAC,ACfA,CAAC,EDeA,CAAX,KCfI,CAAgB,CAAhB,GAAoB,EAAxB;ADec,AR0CtB,ASzDoC,ITyDpC,GAAG,CQ1CmB,AR0ClB,ASzDgC,CDeb,ACfc,EDeZ,ACfc,CTyDvC,CQ1C2B,GAAG,CAAC,ACfc,CAAC,EDed,MCfO,CAAgB;ADe/C,AR4CR,AS3DQ,IT2DR,GQ9CgD,AR8C7C,AS5D8C,CT4D7C,CQ3CI,ACfA,QT0DR;AQ3CS,AR4CT,AS3DS,IT2DT,GAAG,CQ5CM,AR4CL,AS3DK,CDeC,ACfA,EDeE,AR4CZ,AS3DY,CT2DJ,CAAR,EAAW,CQ5CM,AR4CL,CQ5CM,ACfA,CAAC,CT2DJ,CQ5CI,CAAX,CR4CR,EAAoB,CAAC,CS3DT,CAAgB,CT2DJ,AS3DZ,GT2DZ,AS3DgC,ET2DH,AS3DrB,CT2DR,EAAgC,IAAE,IAAI,CAAC,EAAvC;AQ5CsB,AR6CtB,AS5DoC,IT4DpC,GAAG,CQ7CmB,AR6ClB,AS5DgC,CDeb,ACfc,EDeZ,ACfc,GT4DvC,GS5D6C,CAAC,QAAP,CAAgB,CAAhB,GAAoB;ADenD,AR8CR,AS7DQ,IT6DR,GQjDgD,ARiD7C,AS/D8C,CT+D7C,CQ7CI,ACfA,GT4DR;AQ7CS,AR8CZ,AS7DY,GTyCb,KQ1Ba,ACfA,CDeC,ACfA,EDeE,ACfA,GDeG,CAAC,ECfE,IAAE,CAAZ,CDeI,CAAa,CAAjB;AAAoB,ACfL,QDeK,ACfL,CDeM,ACfL,EDeO,ACfL,MAAM,CAAC,QAAP,CAAgB,CAAhB,GAAoB,EAApB,GAAyB;ADe3C,ARgDZ,AS/DY,ET+DZ,GAAA,CAAA,CQpDoD,ACdC,CDclB,ACdJ,EDmBpB,ACfA,KT8DX,CAAA,GSlE+B,CAAvB,ETkER,AS1EyC,CAajC,ET6DR,UAAO,GAAP,EAAoC;AQ/CxB,ARgDR,IAAA,IQhDQ,ARgDJ,CAAC,IQhDQ,EAAE,GRgDf,CAAe,MAAf,CAAsB,IAAtB,CAA2B,IAA3B,EAAiC,GAAjC;AQhDO,ARiDV,AS9DO,GT4DR,IQpDmC,CAA3B,ECRI,CAAC,GAAG,IAAE,IAAV,EAAgB;ADcnB,ACbO,KDjFyB,CA+FjC,ECdQ,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAuB,IAAI,aAAJ,CAAS,eAAe,CAAC,CAAC,GAAC,CAAH,CAAxB,EAA+B,CAA/B,EAAkC,CACrD;AT4Df,AS5DgB,UAAA,CAAC,EAAE,MAAM,CAAC,QAAP,CAAgB,CAAhB,GAAoB,CAAxB;AAA2B,UAAA,CAAC,EAAE,MAAM,CAAC,QAAP,CAAgB,CAAhB,GAAoB;ADc9D,AR+CJ,AS7DgB,ET6DhB,G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CjCR,GAAA,UAAiB,IAAjB,EAA+B,KAA/B,EAA8C,KAA9C,EAA6D,IAA7D,EAAyE;ADkCjE,ACjCJ,QAAM,EDiCI,CCjCD,CDiCG,ECjCA,CDiCG,ICjCE,CDiCG,CAAC,KCjCrB,GDiCe,CAAe,CAAf,GAAmB,EAA9B;AACA,ACjCJ,MDiCI,ECjCE,EAAE,EDiCE,CAAC,ACjCC,KAAK,KDiCb,CAAkB,ECjCV,EDiCR,CAAuB,ACjCC,IDiCG,ACjCC,GAAC,KAAK,KDiCX,CAAS,ICjCzB,CDiCgB,EAAgB,ACjCS,CDiCzB,CCjC3B,CDiC8C,CACtC;AAAC,ACjCT,QDiCS,ACjCH,CDiCI,CCjCF,CDiCI,ECjCA,IDiCM,CAAC,ACjCF,QDiCL,ACjCA,CDiCgB,CAAhB,CCjCgB,EDiCI,CAAxB,ECjCyB,GAAC,KAAK,UAA5B,GAA0C,EAArD;ADiCmC,AChCnC,QDgCmC,AChC7B,CDgC8B,AChC7B,EDgC+B,CChC5B,GAAV,EDgC4C,CAAC,QAAP,CAAgB,CAAhB,GAAoB,EAApB,GAAyB,CAAC,GAAC;AAAzD,AC/BR,IAAA,GD8B8C,AC9B3C,CAAC,CDgCI,GChCR;ADgCS,AC/BT,IAAA,GAAG,CD+BM,AC/BL,CD+BM,EAAE,MAAM,AC/BlB,CD+BmB,EC/BH,CD+BI,CAAZ,MC/BR;AD+BuB,AC9BvB,IAAA,GAAG,CD8BoB,AC9BnB,CD8BoB,EAAE,MAAM,CAAC,EC9BjC,GAAmB,GD8BO,CAAgB,CAAhB,GAAoB,AC9B9C,ED8B0B,GAAyB,CAAC,GAAC;AAA7C,AC7BR,IAAA,GD2B8C,AC3B3C,CAAC,CD8BI,QC9BR,GAAgB,MAAhB;AD8BS,AC7BT,IAAA,GAAG,CD6BM,AC7BL,CD6BM,EAAE,MAAM,CAAC,CC7BnB,ED6BoB,CAAZ,AC7BU,KAAlB;AD6BuB,AC5BvB,IAAA,GAAG,CD4BoB,AC5BnB,CD4BoB,EAAE,EAAE,GAAG,CAAC,AC5BhC,GD4BiC,AC5BjB,CAAhB;AD4BQ,AC3BR,IAAA,GDwB8C,ACxB3C,CAAC,CD4BI,QC5BR;AD4BS,AC3BT,IAAA,GAAG,CD2BM,AC3BL,CD2BM,EAAE,GC3BZ,CAAW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","file":"main.c39d6dcf.js","sourceRoot":"../src","sourcesContent":["// Exploration.ts\n//\n// This might be something a little more interesting\n\nimport Component, {StateObject} from './Component';\n\nclass Exploration {\n    public canvas: HTMLCanvasElement;\n    public context: CanvasRenderingContext2D;\n    public components: Array<Component>;\n    // The idea is that all components update their state recursively starting here\n    public outputComponents: Array<Component>;\n\n    public animated: boolean = false; // assume not unless proven otherwise\n\n    public paused: boolean = false;\n    public updateTime: number = 1000;\n    public lastUpdated: number = Date.now();\n    public animationFrame: any;\n\n    // Can possibly have an afterRender property\n    public afterRender: (() => void) | null | undefined;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d')!;\n        this.components = [];\n        this.outputComponents = [];\n\n        // default\n        canvas.width = canvas.height = 400;\n\n        // TS-safe way of putting a random debug name\n        let id = Math.floor(Math.random() * 1e6);\n        Object.defineProperty(window, \"exploration\" + id, {\n            value: this,\n        });\n        console.log(id, this);\n    }\n\n    // todo: addComponent() maybe?\n\n    render() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        for (let i = 0; i < this.components.length; i++) {\n            this.context.save();\n            // render wires first\n            const comp = this.components[i];\n            for (let j = 0; j < comp.inputWires.length; j++) {\n                const position = {\n                    x: comp.position.x + comp.inputSockets[j].x,\n                    y: comp.position.y + comp.inputSockets[j].y,\n                };\n                comp.inputWires[j]?.render(this.context, position);\n            }\n            this.components[i].render(this.context);\n            this.context.restore();\n        }\n\n        if (typeof this.afterRender === \"function\") {\n            this.afterRender();\n        }\n    }\n\n    onClick(canvasX: number, canvasY: number) {\n        for (let i = 0; i < this.components.length; i++) {\n            const component = this.components[i];\n            const offsetX = canvasX - component.position.x;\n            const offsetY = canvasY - component.position.y;\n            if (Math.abs(offsetX) < component.size.x/2 && Math.abs(offsetY) < component.size.y/2) {\n                component.onClick(offsetX, offsetY);\n            }\n        }\n\n        // Right now I have nothing better than re-updating the whole tree\n        this.update();\n    }\n\n    pause() {\n        this.paused = true;\n        cancelAnimationFrame(this.animationFrame);\n    }\n\n    resume() {\n        this.paused = false;\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    updateLoop() {\n        // Not paused or turned off, and been long enough since last update\n        if (!this.paused && this.updateTime > 0 && Date.now() - this.lastUpdated > this.updateTime) {\n            this.update();\n        }\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    update() {\n        // call beforeUpdate if needed\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            if (typeof comp.beforeUpdate === \"function\") {\n                comp.beforeUpdate();\n            }\n        }\n\n        // Recursively loop backwards through the tree\n        // stores a hash of component indices because we have to check the same component multiple times\n        // We hash anything that is listed as an output component\n\n        const visitedNodes: {[i: number]: boolean} = {};\n        const savedState = [];\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            const comp = this.outputComponents[i];\n            let old: boolean[] = [];\n            for (let j = 0; j < comp.state.bits.length; j++) {\n                old.push(comp.state.bits[j]);\n            }\n            savedState.push({bits: old});\n        }\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            this.updateComponent(this.outputComponents[i], visitedNodes, savedState);\n        }\n\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            //console.log(\"After Update: \", this.outputComponents[i].position, savedState[i].bits, this.outputComponents[i].state.bits)\n        }\n\n        //console.warn(\"UPDATE FINISHED\");\n\n        this.lastUpdated = Date.now();\n    }\n\n    updateComponent(component: Component,\n        visitedNodes: {[i: number]: boolean},\n        savedState: StateObject[]) {\n        let index = this.components.indexOf(component); // if this gets too slow I can add IDs\n        if (!visitedNodes[index]) {\n            visitedNodes[index] = true; // prevents infinite loops, although cyclic explorations are invalid anyway\n            // has not been visited, so we need to evaluate it\n            //console.log(\"visiting \" + String(index), component);\n            let parentBits = [];\n            for (let i = 0; i < component.inputWires.length; i++) {\n                const wire = component.inputWires[i];\n                if (wire) {\n                    const to = wire.toComponent;\n                    if (!to) {\n                        parentBits.push(false); // null = 0\n                    } else {\n                        this.updateComponent(wire.toComponent, visitedNodes, savedState);\n\n\n                        // all we need is this one bit\n                        // (note: null or missing wires give a 0)\n                        // did we save it?\n                        const ocIndex = this.outputComponents.indexOf(to);\n                        if (ocIndex >= 0) {\n                            //console.log(\"Using saved state\", ocIndex, savedState[ocIndex].bits);\n                            // Use the stored state instead of updating immediately\n                            parentBits.push(savedState[ocIndex].bits[wire.toOutput]);\n                        } else {\n                            parentBits.push(to.state.bits[wire.toOutput]);\n                        }\n                    }\n                } else {\n                    // no wire = 0\n                    parentBits.push(false);\n                }\n            }\n            // Update the component's state.\n            component.state.bits = component.evaluate(parentBits);\n        }\n    }\n};\n\nexport default Exploration;\n","// InputBit.ts\n// Can be clicked to change state\n\nimport Component from './Component';\n\nclass InputBit implements Component {\n    state: {bits: boolean[], active: boolean};\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: [];\n    inputWires: [];\n    outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    constructor(x: number, y: number, value: boolean = false, size: number = 20) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            active: value,\n            bits: [value],\n        };\n\n        this.inputSockets = []; // it is input, it needs no input from elsewhere\n        this.inputWires = [];\n        this.outputSockets = [\n            {x: 0, y: 0}\n        ];\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        if (this.state.active !== this.state.bits[0]) {\n            // panic\n            throw new Error(\"[InputBit.render] State does not match bit array\");\n        }\n        ctx.fillStyle = (this.state.active ? \"#33ff33\" : \"#990000\");\n        ctx.strokeStyle = \"2px solid black\";\n        ctx.beginPath();\n        ctx.arc(this.position.x, this.position.y, this.size.x / 2, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n    };\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        console.log(\"[InputBit] clicked\");\n        this.state.active = !this.state.active;\n        this.state.bits[0] = this.state.active;\n        // bits will be updated when everything is\n    };\n\n    evaluate(_: boolean[]): boolean[] {\n        return [this.state.active];\n    }\n}\n\nexport default InputBit;\n","// OutputBit.ts\n// Need a good way to distinguish from InputBits\n\nimport Component from './Component';\nimport Wire from './Wire';\n\nclass OutputBit implements Component {\n    state: { bits: boolean[] };\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: { x: number; y: number; }[];\n    outputSockets: { x: number; y: number; }[];\n    inputWires: Wire[];\n    beforeUpdate: undefined;\n\n    constructor(x: number, y: number, size: number = 20) {\n        this.position = { x: x, y: y };\n        this.size = { x: size, y: size };\n        this.state = { bits: [false] };\n\n        this.inputSockets = [{x: 0, y: 0}];\n        // this might be convenient\n        this.outputSockets = [{x: 0, y: 0}];\n        this.inputWires = [];\n    }\n    render(ctx: CanvasRenderingContext2D): void {\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(left, top, this.size.x, this.size.y);\n        ctx.fillStyle = (this.state.bits[0] ? \"#33ff33\" : \"#990000\");\n        ctx.fillRect(\n            left + this.size.x * 0.1,\n            top + this.size.y * 0.1,\n            this.size.x * 0.8,\n            this.size.y * 0.8\n        );\n    };\n    onClick(offsetX: number, offsetY: number): void {\n        return;\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        //console.log(bits);\n        //console.log(\"evaluating\", this.position);\n        return bits;\n    };\n}\n\nexport default OutputBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Adder implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            /*ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x, this.position.y + socket.y - 15);*/\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = \"#333333\";\n            ctx.strokeStyle = (this.state.bits[i] ? '#33ff33' : '#990000');\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += (wire1.toComponent.state.bits[wire1.toOutput] ? 1 : 0) * (1 << i);\n            num2 += (wire2.toComponent.state.bits[wire2.toOutput] ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(String(num1) + \" + \" + String(num2), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        const answer = num1 + num2;\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) > 0;\n        }\n        //console.log(answerBits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        this.state.bits = this.evaluate(this.inputWires.map(wire => (wire ? wire.get() : false)));\n    }\n}\n\nexport default Adder;\n","// Wire.ts\n\nimport Component from \"./Component\"\n\ntype WireOptions = {color?: string};\n\n// not sure a wire really is a component but it uses them\nclass Wire {\n    // I use \"from\" and \"to\" because \"input\" and \"output\" are ambiguous\n    toComponent: Component;\n    toOutput: number;\n\n    color: string;\n\n    // in case you want the wire to bend\n    waypoints: Array<{x: number, y: number}> = [];\n\n    constructor(\n        to: Component,\n        toOutput: number,\n        waypoints: {x: number, y: number}[] = [],\n        options: WireOptions = {}\n    ) {\n        this.toComponent = to;\n        this.toOutput = toOutput;\n        this.waypoints = waypoints;\n\n        this.color = options.color ?? \"#333\";\n    }\n\n    get(): boolean {\n        // empty wire is zero\n        if (!this.toComponent) return false;\n        // coerce undefined to false\n        return this.toComponent.state.bits[this.toOutput] || false;\n    }\n\n    addWaypoint(x: number, y: number) {\n        this.waypoints.push({x: x, y: y});\n    }\n\n    render(ctx: CanvasRenderingContext2D, from: {x: number, y: number}) {\n        if (!this.toComponent) return;\n        ctx.save();\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(from.x, from.y);\n        for (let i = 0; i < this.waypoints.length; i++) {\n            ctx.lineTo(this.waypoints[i].x, this.waypoints[i].y);\n        }\n        const endOffset = this.toComponent.outputSockets[this.toOutput];\n        ctx.lineTo(endOffset.x + this.toComponent.position.x, endOffset.y + this.toComponent.position.y);\n        ctx.stroke();\n        ctx.restore();\n    }\n}\n\nexport default Wire;\n","// Gates.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nabstract class Gate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public rotation: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number, rotation: number, bits: number) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        this.rotation = rotation * Math.PI / 180;\n\n        const cosine = Math.cos(this.rotation);\n        const sine = Math.sin(this.rotation);\n        // transform [±0.3, -0.5]\n        if (bits == 2) {\n            this.inputSockets = [\n                {\n                    x: size * (-0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine - 0.2*sine),\n                },\n                {\n                    x: size * (0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine + 0.2*sine)\n                }\n            ];\n        } else {\n            this.inputSockets = [{\n                x: size * 0.5*sine,\n                y: size * -0.5*cosine,\n            }]\n        }\n\n        this.outputSockets = [\n            {\n                x: size * -0.4*sine,\n                y: size * 0.4*cosine,\n            }\n        ];\n\n        this.inputWires = [];\n    }\n    beforeUpdate: undefined;\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    abstract drawGate(ctx: CanvasRenderingContext2D): void;\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.strokeStyle = \"black\";\n        ctx.lineWidth = 2;\n        ctx.translate(this.position.x, this.position.y);\n        ctx.rotate(this.rotation);\n        // draw the wires coming in\n        ctx.beginPath();\n        if (this.inputSockets.length === 2) {\n            ctx.moveTo(this.size.x * -0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * -0.2, 0);\n            ctx.moveTo(this.size.x * 0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * 0.2, 0);\n            ctx.stroke();\n        }\n\n        this.drawGate(ctx);\n\n        ctx.restore();\n    }\n\n    abstract evaluate(bits: boolean[]): boolean[];\n}\n\nclass AndGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.lineTo(this.size.x * 0.4, 0);\n        ctx.arc(0, 0, this.size.x * 0.4, 0, Math.PI);\n        ctx.lineTo(-this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] && bits[1]];\n    };\n}\n\nclass OrGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0, s * -0.2, s * 0.4, s * -0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] || bits[1]];\n    };\n}\n\nclass XorGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        // do the or's path...\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0, s * -0.15, s * 0.4, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n        // and the extra thing\n        ctx.beginPath();\n        ctx.moveTo(s * -0.4, s * -0.5);\n        ctx.quadraticCurveTo(s * 0, s * -0.3, s * 0.4, s * -0.5);\n        ctx.stroke();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] !== bits[1]];\n    };\n}\n// Doesn't extend Gate because it only has 1 input and is smaller\nclass Not extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 1);\n    }\n\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.y;\n        // wire in\n        ctx.beginPath();\n        ctx.moveTo(0, s * -0.5);\n        ctx.lineTo(0, 0);\n        ctx.stroke();\n        // triangle for the not\n        ctx.beginPath();\n        ctx.moveTo(0, s * 0.2);\n        ctx.lineTo(s * -0.25, s * -0.35);\n        ctx.lineTo(s * 0.25, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n\n        ctx.beginPath();\n        ctx.arc(0, s * 0.3, s * 0.1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.fill();\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        Gate.prototype.render.call(this, ctx);\n    };\n    onClick(_: number, __: number) {};\n    evaluate(bits: boolean[]): boolean[] {\n        return [!bits[0]];\n    };\n}\n\nexport {AndGate, OrGate, XorGate, Not};\n","// Display.ts\n//\n// Given a set of bits, displays its value as a signed or unsigned integer.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Display implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public signed: boolean;\n    public components: Component[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    // note that I'm thinking about using this for InputBits, OutputBits, and RegisterBits\n    // and those only have one state to get\n    constructor(x: number, y: number, components: Component[], signed: boolean = false, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size * 2,\n            y: size\n        };\n        this.signed = signed;\n        this.components = components;\n\n        this.state = {\n            // unused\n            bits: [],\n        };\n        // unused, it doesn't use wires because they make visual clutter\n        this.inputSockets = [];\n        this.outputSockets = [];\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,               top);\n        ctx.lineTo(left + this.size.x, top);\n        ctx.lineTo(left + this.size.x, top + this.size.y);\n        ctx.lineTo(left,               top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // get the state\n        let totalValue = 0;\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            const value = (comp.state.bits[0] ? 1 : 0) << i;\n            // use 2's complement if signed on the last bit\n            totalValue += (this.signed && i == this.components.length-1) ? -value : value;\n        }\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.font = Math.round(this.size.y*4/5) + \"px monospace\";\n        ctx.fillStyle = \"#000\";\n        ctx.fillText(String(totalValue), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        return [];\n    }\n}\n\nexport default Display;\n","// AdderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport {AndGate, OrGate, XorGate} from './Gates';\nimport Display from './Display';\n\nclass AdderExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 640;\n        canvas.height = 400;\n\n        const adder = new Adder(520, 200, 4);\n        this.components.push(adder);\n\n        for (let i = 0; i < 4; i++) {\n            const bit = new InputBit(adder.position.x - 100 + i*25, 30);\n            adder.inputWires.unshift(new Wire(bit, 0, [\n                {x: bit.position.x + 12.5, y: 120 - i*20},\n                {x: bit.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit);\n\n            const bit2 = new InputBit(adder.position.x + 100 - i*25, 30);\n            adder.inputWires.push(new Wire(bit2, 0, [\n                {x: bit2.position.x - 12.5, y: 120 - i*20},\n                {x: bit2.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit2);\n        }\n\n        for (let i = 0; i < 5; i++) {\n            const output = new OutputBit(adder.position.x + 37.5 - i*25, 300);\n            output.inputWires.push(new Wire(adder, i, []));\n            this.components.push(output);\n            this.outputComponents.push(output);\n        }\n\n        // colors are nice\n        const blue = {color: \"rgba(96,96,160,1)\"};\n\n        const fakeCarry = new InputBit(370, 200, false, 20);\n        this.components.push(fakeCarry);\n\n        let rightInputA = [];\n        let rightInputB = [];\n        let rightOutput = [];\n        let carryOuts = [];\n        for (let i = 0; i < 4; i++) {\n            const bitA = new InputBit(290 - i*70, 30);\n            rightInputA.push(bitA);\n\n            const bitB = new InputBit(bitA.position.x + 40, 90);\n            rightInputB.push(bitB);\n\n            // full adder\n            const x1 = (bitA.position.x + bitB.position.x)/2;\n            const y1 = bitB.position.y + 60;\n            const and = new AndGate(x1 - 18, y1, 24, 0);\n            and.inputWires.push(new Wire(bitA, 0, []));\n            and.inputWires.push(new Wire(bitB, 0, []));\n            const xor = new XorGate(x1 + 18, y1, 24, 0);\n            xor.inputWires.push(new Wire(bitA, 0, []));\n            xor.inputWires.push(new Wire(bitB, 0, []));\n\n            const outBit = new OutputBit(x1, 300, 20);\n            rightOutput.push(outBit);\n\n            if (i >= 0) {\n                const previous = (i == 0) ? fakeCarry : carryOuts[i-1];\n                // need a second phase of the adder\n                const and2 = new AndGate(x1, y1 + 50, 24, 0);\n                and2.inputWires.push(new Wire(xor, 0, []));\n                and2.inputWires.push(new Wire(previous, 0, [\n                    {x: and2.position.x + 5, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: previous.position.y + 15},\n                    {x: previous.position.x, y: previous.position.y + 15},\n                ], blue));\n\n                const xor2 = new XorGate(x1 + 20, y1 + 80, 24, 0);\n                xor2.inputWires.push(new Wire(xor, 0, []));\n                xor2.inputWires.push(new Wire(previous, 0, [\n                    {x: xor2.position.x + 5, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: previous.position.y + 15},\n                    {x: previous.position.x, y: previous.position.y + 15},\n                ], blue));\n\n                const or2 = new OrGate(x1 - 15, y1 + 80, 24, 0);\n                or2.inputWires.push(new Wire(and, 0, []));\n                or2.inputWires.push(new Wire(and2, 0, []));\n\n                carryOuts[i] = or2;\n                outBit.inputWires.push(new Wire(xor2, 0, []));\n                this.components.push(or2, and2, xor2);\n            } else {\n                carryOuts[i] = and;\n                outBit.inputWires.push(new Wire(xor, 0, []));\n            }\n\n            this.components.push(and, xor, outBit);\n        }\n\n        const finalCarry = new OutputBit(30, 250, 20);\n        finalCarry.inputWires.push(new Wire(carryOuts[3], 0, []));\n        rightOutput.push(finalCarry);\n\n        this.components.push(finalCarry, ...rightInputA, ...rightInputB);\n\n        const displayA = new Display(35, 30, rightInputA);\n        const displayB = new Display(35, 90, rightInputB);\n        const displayResult = new Display(200, 350, rightOutput, false, 40);\n\n        this.components.push(displayA, displayB, displayResult);\n\n        this.outputComponents.push(...rightOutput);\n    }\n}\n\nexport default AdderExploration;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass ChoiceGate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: (Wire | null)[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size*2,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n        const offset = size * 0.5;\n        this.inputSockets = [\n            {x: -this.size.x * 1/3, y: 0},\n            {x: -offset, y: -this.size.y/2},\n            {x: +offset, y: -this.size.y/2}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(this.size.x*1.0, 0);\n        ctx.lineTo(this.size.x*0.67, this.size.y);\n        ctx.lineTo(this.size.x*0.33, this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // red input\n        const sx = this.size.x;\n        ctx.fillStyle = \"rgb(0, 204, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.25, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n        ctx.fillStyle = \"rgb(153, 0, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.75, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] ? bits[1] : bits[2]];\n    }\n}\n\nexport default ChoiceGate;\n","// ChoiceExploration\n//\n// Exploration that shows how a multiplexer works.\n// I called it a \"choice gate\" because \"multiplexer\" and \"multiplier\" look too similar.\n\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport ChoiceGate from './ChoiceGate';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\n\nclass ChoiceExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n\n        const inputChoice = new InputBit(50, 90, false, 30);\n        const inputElse = new InputBit(100, 90, false, 30);\n        const inputIf = new InputBit(150, 90, false, 30);\n        this.components.push(inputChoice, inputIf, inputElse);\n\n        const inverter = new Not(115, 150, 30, 0);\n        this.components.push(inverter);\n        inverter.inputWires.push(new Wire(inputChoice, 0, [\n            {x: 115, y: 125},\n            {x: 50, y: 125},\n        ]));\n\n        // recursive components are a bit weird\n        const andIf = new AndGate(125, 200, 50, 0);\n        const andElse = new AndGate(75, 200, 50, 0);\n        const or = new OrGate(100, 250, 50, 0);\n\n        andIf.inputWires = [\n            new Wire(inverter, 0, []),\n            new Wire(inputIf, 0, [\n                {x: 135, y: 170},\n                {x: 150, y: 170},\n            ]),\n        ];\n        andElse.inputWires = [\n            new Wire(inputChoice, 0, [\n                {x: 65, y: 170},\n                {x: 50, y: 170},\n            ]),\n            new Wire(inputElse, 0, [\n                {x: 85, y: 170},\n                {x: 100, y: 170},\n            ]),\n        ];\n        or.inputWires = [\n            new Wire(andElse, 0, []),\n            new Wire(andIf, 0, []),\n        ];\n        this.components.push(andIf, andElse, or);\n\n\n        const output = new OutputBit(100, 300);\n        output.inputWires.push(new Wire(or, 0))\n        this.components.push(output);\n        this.outputComponents.push(output);\n\n        // the simplified version\n        const inputChoice2 = new InputBit(240, 120, false, 30);\n        const inputIf2 = new InputBit(280, 120, false, 30);\n        const inputElse2 = new InputBit(320, 120, false, 30);\n        const choice = new ChoiceGate(300, 200, 40);\n        const output2 = new OutputBit(300, 250);\n        choice.inputWires.push(new Wire(inputChoice2, 0, [\n            {x: inputChoice2.position.x, y: choice.position.y},\n        ]));\n        choice.inputWires.push(new Wire(inputIf2, 0));\n        choice.inputWires.push(new Wire(inputElse2, 0));\n        output2.inputWires.push(new Wire(choice, 0));\n\n        this.components.push(inputChoice2, inputIf2, inputElse2, choice, output2);\n        this.outputComponents.push(output2);\n    }\n\n}\n\nexport default ChoiceExploration;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass RegisterBit implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        // [0] is the off switch and [1] is the on switch\n        const offset = size * 0.44;\n        this.inputSockets = [\n            {x: -offset, y: -offset},\n            {x:  offset, y: -offset}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = this.state.bits[0] ? \"#33ff33\" : \"#990000\";\n        ctx.beginPath();\n        ctx.moveTo(this.size.x*0.5, 0);\n        ctx.lineTo(this.size.x*1.0, this.size.y*0.5);\n        ctx.lineTo(this.size.x*0.5, this.size.y);\n        ctx.lineTo(this.size.x*0.0, this.size.y*0.5);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // red input\n        ctx.fillStyle = \"#ccffff\";\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.25, this.size.y * 0.25, this.size.x * 0.25, 135*Math.PI/180, 315*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();\n        /*ctx.fillStyle = \"#33ff33\";\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.75, this.size.y * 0.25, this.size.x * 0.25, -135*Math.PI/180, 45*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();*/\n        if (this.inputWires[0] && this.inputWires[0].get()) {\n            ctx.beginPath();\n            ctx.moveTo(this.size.x * 0.75, this.size.y * 0.25);\n            ctx.lineTo(this.size.x * 1.0, 0);\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return bits[0] ? [bits[1]] : this.state.bits;\n    }\n}\n\nexport default RegisterBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Subtractor implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits + 1);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x*0.46, top);\n        ctx.lineTo(left + this.size.x*0.5,  top + this.size.x*0.05);\n        ctx.lineTo(left + this.size.x*0.54, top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x*0.95, this.position.y + socket.y + 10);\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = \"#333333\";\n            ctx.strokeStyle = (this.state.bits[i] ? '#33ff33' : '#990000');\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += (wire1.toComponent.state.bits[wire1.toOutput] ? 1 : 0) * (1 << i);\n            num2 += (wire2.toComponent.state.bits[wire2.toOutput] ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(String(num1) + \" - \" + String(num2), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        const answer = num1 - num2;\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) != 0;\n        }\n        //console.log(answerBits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        this.state.bits = this.evaluate(this.inputWires.map(wire => (wire ? wire.get() : false)));\n    }\n}\n\nexport default Subtractor;\n","// Clock.ts\n//\n// These clocks can have an arbitrary period.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass ChoiceGate implements Component {\n    public state: {bits: boolean[], clock: number};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    //\n    constructor(x: number, y: number, bits: number, width: number = 100, height: number = 50) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n        // because .fill() isn't supported?!\n        const bitArray: boolean[] = Array(bits).map(_ => false);\n        this.state = {\n            bits: bitArray,\n            clock: -1,\n        };\n        this.numBits = bits;\n        // \"power supply\" or more accurately a way to reset the clock\n        this.inputSockets = [\n            {x: 0, y: -this.size.y/2 - 1},\n        ];\n\n        this.outputSockets = [];\n        const spacing = width / bits;\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: (i - bits/2 + 1/2) * spacing,\n                y: this.size.y/2,\n            });\n        }\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        let r = Math.min(this.size.y * 0.2, this.size.x * 0.1);\n        const w = this.size.x, h = this.size.y;\n        ctx.moveTo(w*0.5, 0);\n        ctx.arcTo(w*1.0, 0, w*1.0, h*0.5, r);\n        ctx.arcTo(w*1.0, h*1.0, w*0.5, h*1.0, r);\n        ctx.arcTo(0, h*1.0, 0, h*0.5, r);\n        ctx.arcTo(0, 0, w*0.5, 0, r);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // power\n        ctx.translate(w/2, 0); // move origin to top-middle\n        ctx.beginPath();\n        ctx.moveTo(2, -5);\n        ctx.lineTo(2, -1);\n        ctx.lineTo(-2, -1);\n        ctx.lineTo(-2, -5);\n        ctx.stroke();\n\n        // clock\n        ctx.fillStyle = \"#e0e0e4\";\n        r = Math.min(w/3, h/3);\n        ctx.translate(0, h/2); // move origin to center\n        ctx.beginPath();\n        ctx.arc(0, 0, r, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n\n        // ticks\n        ctx.save();\n        const angle = 2*Math.PI / this.numBits;\n        for (let i = 0; i < this.numBits; i++) {\n            ctx.beginPath();\n            ctx.moveTo(0, -r);\n            ctx.lineTo(0, -r * 0.8 + 1);\n            ctx.stroke();\n\n            ctx.rotate(angle);\n        }\n        ctx.restore();\n\n        // hand\n        ctx.save();\n        ctx.rotate(this.state.clock * angle);\n        ctx.lineWidth *= 3;\n        ctx.lineCap = \"round\";\n        ctx.beginPath();\n        ctx.moveTo(0, r*0.25);\n        ctx.lineTo(0, -r * 0.8);\n        ctx.stroke();\n        ctx.lineWidth *= 5/3;\n        ctx.beginPath();\n        ctx.arc(0, 0, 1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.restore();\n\n        // outputs\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            const socket = this.outputSockets[i];\n            ctx.fillStyle = (i == this.state.clock) ? \"#33ff33\" : \"#990000\";\n            ctx.beginPath();\n            ctx.arc(socket.x, socket.y, 5, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // Evaluation: the clock's state is set on\n    evaluate(bits: boolean[]): boolean[] {\n        let result = [];\n        for (let i = 0; i < this.numBits; i++) {\n            result.push(i == this.state.clock);\n        }\n        return result;\n    }\n\n    beforeUpdate() {\n        if (this.inputWires[0]?.get()) {\n            this.state.clock = (this.state.clock + 1) % this.numBits;\n        } else {\n            this.state.clock = -1;\n        }\n    }\n}\n\nexport default ChoiceGate;\n","// DividerExploration.ts\n\n/*\n\nsteps:\n1. Start with dividend (numerator) in RIGHT half of remainder register\n2. Shift the remainder left\n3. Send the LEFT half in for subtraction\n4. If the result is negative, write it, else keep the remainder as is\n5. Put the opposite of the sign bit on the new 1 position\n6. Go back to step 2, although when the larger clock strikes, record the results (I expect it to be 2*6+3 or 3*6+5 cycles).\n\nnext steps:\n- carry from the subtractor needs to enter the choice gates\n- on purple, we get the subtraction results, and if the sign bit is off, we insert it into the register\n- also on purple, that sign bit needs to shift the LEFT\n\nI think I need to totally reconfigure the remainder part\n\nRemainder register:\n- If power button is off, set to zero (6-12) or numerator (0-5)\n- If power button is on:\n    - on purple we may receive a subtraction, but this only applies to bits 6-12\n    - on green we need to shift left, setting a carry bit. (This will require an additional register.)\n\n\n\n*/\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Subtractor from './Subtractor';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\n\nclass DividerExploration extends Exploration {\n    countdown: Clock;\n    remainderRight: number;\n    remainderSpacing: number;\n    startButton: InputBit;\n    numBits: number;\n\n    animated: boolean = true;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 800;\n        canvas.height = 600;\n\n        // A lot of the same stuff happens compared to Multiplier...\n\n        const BITS = 6;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(695, 40, false, 50);\n        this.startButton = startButton;\n        const startNot = new Not(startButton.position.x - 50, 40, 30, 90);\n        startNot.inputWires.push(new Wire(startButton, 0));\n        this.components.push(startNot);\n\n        const clockX = 690;\n\n        const clockAnd = new AndGate(clockX, 100, 25, 0);\n        const clockNot = new Not(clockX, 150, 25, 0);\n        const clockBit = new OutputBit(clockX, 200);\n\n        clockAnd.inputWires.push(new Wire(clockNot, 0, [\n            {x: clockX - 5, y: 75},\n            {x: clockX - 20, y: 75},\n            {x: clockX - 20, y: 175},\n            {x: clockX, y: 175}\n        ]));\n        clockAnd.inputWires.push(new Wire(startButton, 0));\n        clockBit.inputWires.push(new Wire(clockNot, 0));\n        clockNot.inputWires.push(new Wire(clockAnd, 0));\n        this.components.push(clockAnd, clockNot, clockBit);\n        this.outputComponents.push(clockBit);\n\n        // ironic that I called the above a \"clock\"\n        // when the clock strikes 2*BITS + 4 it will end the operation\n        // but I add one more to avoid confusion\n        const countdown = new Clock(750, 230, 2*BITS + 4, 80, 50);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: countdown.position.x, y: 40},\n        ]));\n        this.countdown = countdown;\n\n        const subtractor = new Subtractor(210, 180, BITS, 260, 80);\n        //this.outputComponents.push(subtractor);\n\n        // Also not really a register.\n        let remainderRegister = [];\n        this.remainderRight = 680;\n        this.remainderSpacing = 52;\n        for (let i = 0; i < 2*BITS+1; i++) {\n            const reg = new OutputBit(this.remainderRight - this.remainderSpacing*i, 460, 20);\n            remainderRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.25)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n        const blue = {color: \"rgba(32, 64, 128, 0.8)\"};\n        const blueFaded = {color: \"rgba(32, 64, 128, 0.4)\"};\n        //const yellow = {color: \"rgba(160, 160, 0)\"};\n\n        // Input Numbers (N/D). D = divisor, N = dividend\n        let inputN = [];\n        let inputD = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(340 - i*25, 40);\n            this.components.push(input);\n            inputN.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(340 - i*25, 110);\n            this.components.push(input);\n            inputD.push(input);\n        }\n\n        // Wires from the registers to the subtractor.\n        for (let i = 0; i < BITS; i++) {\n            const d = 3;\n            const bit = remainderRegister[i + BITS];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            const y2 = subtractor.position.y - 70;\n            subtractor.inputWires.push(new Wire(bit, 0, [\n                {x: subtractor.position.x + subtractor.inputSockets[i].x - 30 + d*i, y: y2 + d*i},\n                {x: 10 + d*i, y: y2 + d*i},\n                {x: 10 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\"}));\n        }\n        // The other subtractor registers (to the divisor)\n        for (let i = 0; i < BITS; i++) {\n            subtractor.inputWires.push(new Wire(inputD[i], 0));\n        }\n\n        // Choice Gates coming out of the subtractor (writes if subtracted).\n        let subtractorChoiceGates = [];\n        for (let i = 0; i < BITS; i++) {\n            //const x = subtractor.position.x + subtractor.outputSockets[i].x;\n            const y = subtractor.position.y + subtractor.outputSockets[0].y; // put them all on the same line\n            // space them a bit\n            const choice = new ChoiceGate(remainderRegister[i+BITS].position.x, y + 50, 10);\n            // choice depends on whether or not the carry bit is positive or negative\n            choice.inputWires.push(new Wire(subtractor, BITS, [\n                {x: choice.position.x - 15, y: choice.position.y},\n                {x: choice.position.x - 15, y: choice.position.y - 20},\n                {x: subtractor.position.x - subtractor.size.x/2, y: choice.position.y - 20},\n                {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y},\n            ], {color: \"#888\"}));\n            // if negative, we just re-use the remainder register\n            const regBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(regBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: choice.position.x + 20, y: choice.position.y - 10},\n                {x: choice.position.x + 20, y: regBit.position.y},\n            ], purple));\n            // otherwise we use the subtraction\n            choice.inputWires.push(new Wire(subtractor, i, [\n                {x: choice.position.x + 5, y: choice.position.y - 30},\n            ]));\n            subtractorChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Remainder Register\n        // includes many wires\n        // also includes register for holding the quotient input\n        const fullRow = [];\n        for (let i = 0; i <= 2*BITS; i++) {\n            const regBit = remainderRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            // This is the middle (full) row\n            const choice = new ChoiceGate(regBit.position.x + (i < BITS ? 5 : -1), regBit.position.y - 100, 14);\n            // Selection Wire (from clock's NOT)\n            choice.inputWires.push(new Wire(clockAnd, 0, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 40},\n                {x: 580 - 2*i, y: choice.position.y - 50 - 1*i},\n            ], purpleFaded));\n            // Purple action\n            if (i >= BITS && i < 2*BITS) {\n                // Upper Half of the Register: Conditionally connect to the subtractor.\n                choice.inputWires.push(new Wire(subtractorChoiceGates[i - BITS], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: choice.position.x - 7, y: choice.position.y - 25},\n                    {x: regBit.position.x - 19, y: choice.position.y - 25},\n                    {x: regBit.position.x - 19, y: regBit.position.y},\n                ], purple));\n            }\n            // Shifting\n            if (i > 0) {\n                choice.inputWires.push(new Wire(remainderRegister[i-1], 0, [\n                    {x: choice.position.x + 7, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: regBit.position.y + 0},\n                ], teal));\n            } else {\n                const holdWrite = new OutputBit(choice.position.x + 30, choice.position.y - 25, 20);\n                const notY = subtractorChoiceGates[0].position.y - 20;\n                const not = new Not(500, notY, 30, -90);\n                not.inputWires.push(new Wire(subtractor, BITS, [\n                    {x: subtractor.position.x - subtractor.size.x/2, y: notY},\n                    {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y}\n                ], {color: \"#888\"}));\n                // set on green\n                //holdWrite.inputWires.push(new Wire(clockNot, 0, [], teal));\n                // value is negated result of subtraction\n                holdWrite.inputWires.push(new Wire(not, 0, [], teal));\n                // maybe?\n                //choice.inputWires[1] = new Wire(holdWrite, 0, [], purple);\n                choice.inputWires.push(new Wire(holdWrite, 0, [], teal));\n                this.components.push(not, holdWrite);\n                this.outputComponents.push(holdWrite);\n            }\n\n            this.components.push(choice);\n            fullRow.push(choice);\n        }\n\n        // Computing the Quotient\n\n        // The second input register that is actually a register.\n        /*let divisorRegister: RegisterBit[] = [];\n        let divisorRegisterChoice = [];\n        for (let i = 0; i < BITS; i++) {\n            const reg = new RegisterBit(inputD[i].position.x - 4, 150, 20);\n            subtractor.inputWires.push(new Wire(reg, 0));\n            divisorRegister.push(reg);\n            this.components.push(reg);\n            this.outputComponents.push(reg);\n        }\n        // Wiring Divisor (denominator) to the Registers\n        for (let i = 0; i < BITS; i++) {\n            const reg = divisorRegister[i];\n            const or = new OrGate(reg.position.x - 9, reg.position.y - 25, 20, 0);\n            const choice = new ChoiceGate(reg.position.x + 9, reg.position.y - 55, 12);\n            reg.inputWires.push(new Wire(or, 0), new Wire(choice, 0));\n\n            const wirePath = [\n                {x: reg.position.x - 13, y: choice.position.y},\n                {x: reg.position.x - 13, y: startNot.position.y},\n            ];\n            or.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n            or.inputWires.push(new Wire(clockNot, 0, [\n                {x: or.position.x + 10, y: or.position.y - 18 - i/2},\n                {x: clockNot.position.x - 40, y: or.position.y - 18 - i},\n            ], tealFaded));\n\n            // choice gate is [0] ? [1] : [2]\n            // the selection comes first\n            choice.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n\n            // If the clock is off, the registers need to use the input bits\n            choice.inputWires.push(new Wire(inputD[i], 0));\n            // Else, move up\n            choice.inputWires.push(new Wire(divisorRegister[i+1] || null, 0, [\n                {x: reg.position.x + 15, y: choice.position.y - 15},\n                {x: reg.position.x - 22, y: choice.position.y - 15},\n                {x: reg.position.x - 22, y: reg.position.y + 10},\n            ]));\n\n            this.components.push(or, choice);\n        }*/\n\n        // Wiring Dividend to seed the remainder register\n        // (blue wires)\n        let dividendChoice: ChoiceGate[] = [];\n        for (let i = 0; i < BITS; i++) {\n            const regBit = remainderRegister[i];\n            const inBit = inputN[i];\n\n            // This is the one close to the lowest 6 registers\n            const choice = new ChoiceGate(regBit.position.x + 3, regBit.position.y - 50, 12);\n            // Wire coming from the start button\n            choice.inputWires.push(new Wire(startButton, 0, [\n                {x: choice.position.x - 15, y: choice.position.y},\n                {x: choice.position.x - 15, y: choice.position.y + 15},\n                {x: 770, y: choice.position.y + 15},\n                {x: 770, y: countdown.position.y + 40},\n                {x: clockX - 30, y: countdown.position.y + 40},\n                {x: clockX - 30, y: startButton.position.y + (startButton.position.x - clockX + 30)},\n            ], blue));\n\n            // If power is on, make it come from the teal/purple stuff\n            choice.inputWires.push(new Wire(fullRow[i], 0));\n\n            // Otherwise, set it to the input\n            const d = 3;\n            const y1 = countdown.position.y + 50;\n            const y2 = inBit.position.y + 30;\n            choice.inputWires.push(new Wire(inBit, 0, [\n                {x: choice.position.x + 6, y: choice.position.y - 10 - d*i},\n                {x: 760 - d*i, y: choice.position.y - 10 - d*i},\n                {x: 760 - d*i, y: y1 + d*i},\n                {x: clockX - 40 - d*i, y: y1 + d*i},\n                {x: clockX - 40 - d*i, y: y2 + d*i},\n                {x: inBit.position.x, y: y2 + d*i},\n            ], blueFaded));\n\n            this.components.push(choice);\n            dividendChoice.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Clearing the \"remainder\" (heh heh) of the register\n        // (blue wires)\n        for (let i = 0; i <= BITS; i++) {\n            const regBit = remainderRegister[i + BITS];\n            const and = new AndGate(regBit.position.x, regBit.position.y - 50, 24, 0);\n            // similar to above, use the full row if the power is on\n            and.inputWires.push(new Wire(fullRow[i+BITS], 0));\n            and.inputWires.push(new Wire(startButton, 0, [\n                {x: and.position.x + 5, y: and.position.y - 20},\n                {x: and.position.x + 13, y: and.position.y - 20},\n                {x: and.position.x + 13, y: and.position.y + 15},\n                {x: 770, y: and.position.y + 15},\n                {x: 770, y: countdown.position.y + 40},\n                {x: clockX - 30, y: countdown.position.y + 40},\n                {x: clockX - 30, y: startButton.position.y + (startButton.position.x - clockX + 30)},\n            ], blue));\n\n            this.components.push(and);\n            regBit.inputWires.push(new Wire(and, 0));\n        }\n\n        // Control Wire from the final register bit to the subtractor's output\n        /*const regLSB = divisorRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = subtractorChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 282, y: choice.position.y - 20},\n                {x: 282, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"rgb(127, 127, 127)\"}));\n            choice.inputWires.unshift(null);\n\n            // Else wire\n            const outBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: outBit.position.y - 19},\n            ], purpleFaded));\n        }*/\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i < 2*BITS; i++) {\n            const offset = (i < BITS ? 5 : -10);\n            const from = remainderRegister[i + (i >= BITS ? 1 : 0)];\n            const bit = new RegisterBit(from.position.x + offset, 580, 25);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 14th clock cycle\n            bit.inputWires.push(new Wire(countdown, 14, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: 790, y: bit.position.y - 30},\n                {x: 790, y: countdown.position.y + 40},\n                {x: countdown.position.x + countdown.outputSockets[14].x, y: countdown.position.y + 40},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const diagonal = 15;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayN = new Display(inputN[0].position.x + 50, inputN[0].position.y, inputN, false, 30);\n        const displayD = new Display(inputD[0].position.x + 50, inputD[0].position.y, inputD, false, 30);\n        const displayQ = new Display(557, 540, finalAnswer.slice(0, BITS), false, 30);\n        const displayR = new Display(200, 540, finalAnswer.slice(BITS, 2*BITS), false, 30);\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(subtractor, countdown, startButton, displayN, displayD, displayQ, displayR);\n    }\n\n    drawRemainderGuide(left: number, right: number, color: string, text: string) {\n        const ctx = this.context;\n        const x1 = (this.remainderRight - left*this.remainderSpacing) - 15;\n        const x2 = (this.remainderRight - right*this.remainderSpacing) + 15;\n        const y = 480;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"none\";\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x1 + 10, y + 10);\n        ctx.lineTo(x2 - 10, y + 10);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.33)\";\n        ctx.fillStyle = color;\n        ctx.font = \"30px monospace\";\n        ctx.strokeText(text, (x1 + x2)/2, y + 25);\n        ctx.fillText(text, (x1 + x2)/2, y + 25);\n    }\n\n    afterRender = () => {\n        // display the quotient\n        const ctx = this.context;\n        ctx.save();\n\n        // get the clock cycle\n        const cycle = this.countdown.state.clock;\n        if (cycle >= 0 && cycle < 2*this.numBits+3) {\n            const n = (cycle+1) >> 1;\n            this.drawRemainderGuide(n + 5, n + 0, \"#33c\", \"Remainder\");\n\n            if (n > 1) {\n                this.drawRemainderGuide(n-2, Math.max(n-7, 0), \"#990\", \"Quotient\");\n            }\n        }\n\n        ctx.restore();\n\n        // not sure where to put this\n        if (cycle == 2 * this.numBits + 3) {\n            this.startButton.state.active = false;\n            this.startButton.state.bits = [false];\n        }\n    }\n}\n\nexport default DividerExploration;\n","// MultiplierExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, OrGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\n\nclass MultiplierExploration extends Exploration {\n    countdown: Clock;\n    regSpacing: number;\n    regRight: number;\n    productRegister: OutputBit[];\n    numBits: number;\n    startButton: InputBit;\n\n    animated: boolean = true;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 800;\n        canvas.height = 600;\n\n        const BITS = 6;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(760, 40, false, 50);\n        this.startButton = startButton;\n        const startNot = new Not(680, 40, 30, 90);\n        startNot.inputWires.push(new Wire(startButton, 0));\n        this.components.push(startNot);\n\n        const clockX = 755;\n\n        const clockAnd = new AndGate(clockX, 100, 25, 0);\n        const clockNot = new Not(clockX, 150, 25, 0);\n        const clockBit = new OutputBit(clockX, 200);\n\n        clockAnd.inputWires.push(new Wire(clockNot, 0, [\n            {x: clockX - 5, y: 75},\n            {x: clockX - 20, y: 75},\n            {x: clockX - 20, y: 175},\n            {x: clockX, y: 175}\n        ]));\n        clockAnd.inputWires.push(new Wire(startButton, 0));\n        clockBit.inputWires.push(new Wire(clockNot, 0));\n        clockNot.inputWires.push(new Wire(clockAnd, 0));\n        this.components.push(clockAnd, clockNot, clockBit);\n        this.outputComponents.push(clockBit);\n\n        // ironic that I called the above a \"clock\"\n        // when the clock strikes 2*BITS + 1 it will end the operation\n        const countdown = new Clock(730, 260, 14, 80, 50);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: 705, y: countdown.position.y - 40},\n            {x: 705, y: 40},\n        ]));\n        this.countdown = countdown;\n\n        const adder = new Adder(180, 190, BITS, 270, 90);\n        //this.outputComponents.push(adder);\n\n        // The \"Register\" that really isn't.\n        // The Add and Shift steps should be successfully separated...\n        let productRegister = [];\n        this.regRight = 730;\n        this.regSpacing = 55;\n        for (let i = 0; i < 2*BITS+1; i++) {\n            const reg = new OutputBit(this.regRight - this.regSpacing*i, 430, 20);\n            productRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.4)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n\n        // Wires from the registers to the adder.\n        for (let i = 0; i < BITS; i++) {\n            const d = 3;\n            const bit = productRegister[i + BITS];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            adder.inputWires.push(new Wire(bit, 0, [\n                {x: adder.position.x + adder.inputSockets[i].x, y: 110 + d*i},\n                {x: 10 + d*i, y: 110 + d*i},\n                {x: 10 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\"}));\n        }\n\n        // And Gates coming out of the adder (for the clock).\n        let adderChoiceGates = [];\n        for (let i = 0; i <= BITS; i++) {\n            // and gate\n            //const x = adder.position.x + adder.outputSockets[i].x;\n            const y = adder.position.y + adder.outputSockets[0].y; // put them all on the same line\n            // space them a bit\n            const choice = new ChoiceGate(productRegister[i+BITS].position.x + 7, y + 50, 10);\n            // this will be input 0 temporarily but we will unshift later\n            choice.inputWires.push(new Wire(adder, i));\n            adderChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Multiplication Register\n        for (let i = 0; i < 2*BITS + 1; i++) {\n            const regBit = productRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            const choice = new ChoiceGate(regBit.position.x, regBit.position.y - 60, 14);\n            // Selection Wire (from clock's NOT)\n            choice.inputWires.push(new Wire(clockNot, 0, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 24},\n                {x: 630 - 2*i, y: choice.position.y - 60 - i},\n            ], tealFaded));\n            // Shifting\n            if (i < 2*BITS) {\n                choice.inputWires.push(new Wire(productRegister[i+1], 0, [\n                    {x: regBit.position.x - 7, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: regBit.position.y},\n                ], teal));\n            } else {\n                choice.inputWires.push(null);\n            }\n            if (i >= BITS) {\n                // Upper Half of the Register: Conditionally connect to the adder.\n                choice.inputWires.push(new Wire(adderChoiceGates[i - BITS], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: regBit.position.x + 7, y: choice.position.y - 20},\n                    {x: regBit.position.x + 20, y: choice.position.y - 20},\n                    {x: regBit.position.x + 20, y: regBit.position.y},\n                ], purple));\n            }\n\n            this.components.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Input Numbers (A and B).\n        let inputA = [];\n        let inputB = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(320 - i*30, 60, false, 25);\n            this.components.push(input);\n            adder.inputWires.push(new Wire(input, 0));\n            inputA.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(630 - i*50, 60, false, 25);\n            this.components.push(input);\n            inputB.push(input);\n        }\n\n        // The second input register that is actually a register.\n        let multiplierRegister: RegisterBit[] = [];\n        let multiplierRegisterChoice = [];\n        for (let i = 0; i < BITS; i++) {\n            const reg = new RegisterBit(inputB[i].position.x - 4, 170, 20);\n            multiplierRegister.push(reg);\n            this.components.push(reg);\n            this.outputComponents.push(reg);\n        }\n        // Wiring to the Registers\n        for (let i = 0; i < BITS; i++) {\n            const reg = multiplierRegister[i];\n            const or = new OrGate(reg.position.x - 9, reg.position.y - 25, 20, 0);\n            const choice = new ChoiceGate(reg.position.x + 9, reg.position.y - 60, 12);\n            reg.inputWires.push(new Wire(or, 0), new Wire(choice, 0));\n\n            const wirePath = [\n                {x: reg.position.x - 13, y: choice.position.y},\n                {x: reg.position.x - 13, y: startNot.position.y},\n            ];\n            or.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n            or.inputWires.push(new Wire(clockNot, 0, [\n                {x: or.position.x + 10, y: or.position.y - 18 - i/2},\n                {x: clockNot.position.x - 40, y: or.position.y - 18 - i},\n            ], tealFaded));\n\n            // choice gate is [0] ? [1] : [2]\n            // the selection comes first\n            choice.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n\n            // If the clock is off, the registers need to use the input bits\n            choice.inputWires.push(new Wire(inputB[i], 0));\n            // Otherwise hold\n            choice.inputWires.push(new Wire(multiplierRegister[i+1] || null, 0, [\n                {x: reg.position.x + 15, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y + 10},\n            ]));\n\n            this.components.push(or, choice);\n        }\n\n        // Control Wire from the final register bit to the adder's output\n        const regLSB = multiplierRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = adderChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 400, y: choice.position.y - 20},\n                {x: 400, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"rgb(127, 127, 127)\"}));\n\n            // Else wire\n            const outBit = productRegister[i + BITS];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 4, y: choice.position.y - 10},\n                {x: choice.position.x + 11, y: choice.position.y - 10},\n                {x: outBit.position.x + 18, y: 305 + 2*i},\n                {x: outBit.position.x + 18, y: outBit.position.y - 18},\n            ], purpleFaded));\n        }\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i <= 2*BITS; i++) {\n            const offset = 5;\n            const bit = new RegisterBit(productRegister[i].position.x + offset, 530, 30);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 12th clock cycle\n            bit.inputWires.push(new Wire(countdown, 12, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: 780, y: bit.position.y - 30},\n                {x: 780, y: countdown.position.y + 40},\n                {x: countdown.position.x + countdown.outputSockets[12].x, y: countdown.position.y + 40},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const from = productRegister[i];\n            const diagonal = 16;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayA = new Display(245, 25, inputA, false, 30);\n        const displayB = new Display(510, 20, inputB, false, 30);\n        const displayEnd = new Display(400, 575, finalAnswer, false, 48);\n        displayEnd.size.x = 2*displayEnd.size.y;\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(adder, countdown, startButton, displayA, displayB, displayEnd);\n        this.productRegister = productRegister;\n    }\n\n    drawProductGuide(left: number, right: number, color: string, text: string) {\n        const ctx = this.context;\n        const x1 = (this.regRight - left*this.regSpacing) - 15;\n        const x2 = (this.regRight - right*this.regSpacing) + 15;\n        const y = 460;\n        ctx.save();\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"none\";\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x1 + 10, y + 10);\n        ctx.lineTo(x2 - 10, y + 10);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.75)\";\n        ctx.lineWidth = 2;\n        ctx.fillStyle = color;\n        ctx.font = \"30px monospace\";\n        ctx.strokeText(text, (x1 + x2)/2, y + 25);\n        ctx.fillText(text, (x1 + x2)/2, y + 25);\n        ctx.restore();\n    }\n\n    afterRender = () => {\n        const ctx = this.context;\n\n        const cycle = this.countdown.state.clock;\n        if (cycle >= 0) {\n            const n = (cycle + 1) >> 1;\n            if (n <= 5) {\n                ctx.fillStyle = \"rgba(255,255,255,0.75)\";\n                const west = (this.regRight - this.regSpacing * (5-n)) - 20;\n                const north = 340, south = 480;\n                const east = (this.regRight) + 22;\n                ctx.beginPath();\n                ctx.moveTo(west, north);\n                ctx.lineTo(east, north);\n                ctx.lineTo(east, south);\n                ctx.lineTo(west, south);\n                ctx.fill();\n            }\n\n            // product value\n            let productValue = 0;\n            for (let i = 0; i < this.numBits + n; i++) {\n                const bit = this.productRegister[i + (6-n)];\n                productValue += Number(bit.state.bits[0]) * (1 << i);\n            }\n\n            this.drawProductGuide(2 * this.numBits, this.numBits - n, \"#33c\", `Product (${productValue})`);\n        }\n\n        if (cycle == 2*this.numBits + 1) {\n            this.startButton.state.active = false;\n            this.startButton.state.bits = [false];\n        }\n    }\n}\n\nexport default MultiplierExploration;\n","\nimport Exploration from './Exploration';\n//import TestExploration from './TestExploration';\nimport AdderExploration from './AdderExploration';\nimport ChoiceExploration from './ChoiceExploration';\nimport ClockExploration from './ClockExploration';\nimport DividerExploration from './DividerExploration';\nimport MultiplierExploration from './MultiplierExploration';\nimport RegisterExploration from './RegisterExploration';\nimport SubtractorExploration from './SubtractorExploration';\n\nfunction createCanvas(): HTMLCanvasElement {\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    return canvas;\n}\n\n// in milliseconds\nconst UPDATE_TIMES = [4000, 2500, 1600, 1000, 630, 400, 250]\n\nfunction createExploration(id: string, type: typeof Exploration): Exploration {\n    const element = document.getElementById(id);\n    if (!element) {\n        throw new Error(\"Document element \" + id + \" not found.\");\n    }\n\n    element.className += \" row\";\n\n    const canvasWrapper = document.createElement(\"div\");\n    canvasWrapper.className = \"canvas-wrapper col-auto\";\n    const canvas = createCanvas();\n    canvasWrapper.appendChild(canvas);\n    element.appendChild(canvasWrapper);\n\n    const exploration = new type(canvas);\n    exploration.update();\n    canvas.addEventListener(\"click\", function(event) {\n        exploration.onClick(event.offsetX, event.offsetY);\n    });\n\n    // For animated explorations, have speed controls\n    if (exploration.animated) {\n        const controls = document.createElement(\"div\");\n        controls.className = \"controls col-auto\";\n        controls.innerHTML = `\n            <h4>Speed</h4>\n            <p style=\"margin-top: 0\">\n                Slow\n                <input id=\"speed-${id}\" name=\"speed\" type=\"range\" min=\"0\" max=\"${UPDATE_TIMES.length - 1}\" />\n                Fast\n            </p>\n            <div class=\"buttons\">\n                <button id=\"pause-${id}\">Pause</button>\n                <button id=\"resume-${id}\">Play</button>\n                <button id=\"step-${id}\">Step</button>\n            </div>\n        `;\n        // get those buttons\n        controls.querySelector(\"#speed-\" + id)!.addEventListener(\"change\", function(event) {\n            exploration.updateTime = UPDATE_TIMES[Number((event.target as HTMLInputElement).value)];\n        });\n        element.appendChild(controls);\n\n        const pauseButton = (controls.querySelector(\"#pause-\" + id) as HTMLButtonElement);\n        pauseButton.addEventListener(\"click\", function() {\n            exploration.pause();\n            pauseButton.disabled = true;\n            resumeButton.disabled = false;\n        });\n        pauseButton.disabled = true;\n        const resumeButton = controls.querySelector(\"#resume-\" + id) as HTMLButtonElement;\n        resumeButton.addEventListener(\"click\", function() {\n            exploration.resume();\n            pauseButton.disabled = false;\n            resumeButton.disabled = true;\n        });\n        controls.querySelector(\"#step-\" + id)!.addEventListener(\"click\", exploration.update.bind(exploration));\n\n        //exploration.resume();\n    }\n\n    return exploration;\n}\n\n\n// Explorations\nlet ALL_EXPLORATIONS: Exploration[] = [];\nALL_EXPLORATIONS.push(createExploration('adder', AdderExploration));\n//ALL_EXPLORATIONS.push(createExploration('subtractor', SubtractorExploration));\nALL_EXPLORATIONS.push(createExploration('choice', ChoiceExploration));\n//ALL_EXPLORATIONS.push(createExploration('clock', ClockExploration));\n\nALL_EXPLORATIONS.push(createExploration('multiplier-full', MultiplierExploration));\nALL_EXPLORATIONS.push(createExploration('divider-full', DividerExploration));\n//ALL_EXPLORATIONS.push(createExploration('3', RegisterExploration));\n\nfunction renderLoop() {\n    // TODO: Put this in exploration\n    for (let i = 0; i < ALL_EXPLORATIONS.length; i++) {\n        const exploration = ALL_EXPLORATIONS[i];\n        exploration.render();\n    }\n    requestAnimationFrame(renderLoop);\n}\nrenderLoop();\n"]}