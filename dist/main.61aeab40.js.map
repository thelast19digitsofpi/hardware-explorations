{"version":3,"sources":["Exploration.ts","InputBit.ts","OutputBit.ts","Adder.ts","Wire.ts","Gates.ts","Display.ts","AdderExploration.ts","RegisterBit.ts","Subtractor.ts","Clock.ts","ChoiceGate.ts","DividerExploration.ts","MultiplierExploration.ts","SubtractorExploration.ts","main.ts"],"names":[],"mappings":";AA4Ke,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtKf,IAAA,EAAA,WAeI,SAAA,EAAY,GARL,KAAA,QAAkB,EAClB,KAAA,WAAqB,IACrB,KAAA,YAAsB,KAAK,MAOzB,KAAA,OAAS,EACT,KAAA,QAAU,EAAO,WAAW,MAC5B,KAAA,WAAa,GACb,KAAA,iBAAmB,GAGxB,EAAO,MAAQ,EAAO,OAAS,IAG3B,IAAA,EAAK,KAAK,MAAsB,IAAhB,KAAK,UACzB,OAAO,eAAe,OAAQ,cAAgB,EAAI,CAC9C,MAAO,OAEX,QAAQ,IAAI,EAAI,MAuIxB,OAlII,EAAA,UAAA,OAAA,WAoIW,IAAA,EAnIF,KAAA,QAAQ,UAAU,EAAG,EAAG,KAAK,OAAO,MAAO,KAAK,OAAO,QACvD,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,WAAW,OAAQ,IAAK,CACxC,KAAA,QAAQ,OAGR,IADC,IAAA,EAAO,KAAK,WAAW,GACpB,EAAI,EAAG,EAAI,EAAK,WAAW,OAAQ,IAAK,CACvC,IAAA,EAAW,CACb,EAAG,EAAK,SAAS,EAAI,EAAK,aAAa,GAAG,EAC1C,EAAG,EAAK,SAAS,EAAI,EAAK,aAAa,GAAG,GAE5B,QAAlB,EAAA,EAAK,WAAW,UAAE,IAAA,GAAA,EAAE,OAAO,KAAK,QAAS,GAExC,KAAA,WAAW,GAAG,OAAO,KAAK,SAC1B,KAAA,QAAQ,UAGe,mBAArB,KAAK,aACP,KAAA,eAIb,EAAA,UAAA,QAAA,SAAQ,EAAiB,GAChB,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,WAAW,OAAQ,IAAK,CACvC,IAAA,EAAY,KAAK,WAAW,GAC5B,EAAU,EAAU,EAAU,SAAS,EACvC,EAAU,EAAU,EAAU,SAAS,EACzC,KAAK,IAAI,GAAW,EAAU,KAAK,EAAE,GAAK,KAAK,IAAI,GAAW,EAAU,KAAK,EAAE,GAC/E,EAAU,QAAQ,EAAS,GAK9B,KAAA,UAGT,EAAA,UAAA,MAAA,WACS,KAAA,QAAS,EACd,qBAAqB,KAAK,iBAG9B,EAAA,UAAA,OAAA,WACS,KAAA,QAAS,EACT,KAAA,eAAiB,sBAAsB,KAAK,WAAW,KAAK,QAGrE,EAAA,UAAA,WAAA,YAES,KAAK,QAAU,KAAK,WAAa,GAAK,KAAK,MAAQ,KAAK,YAAc,KAAK,YACvE,KAAA,SAEJ,KAAA,eAAiB,sBAAsB,KAAK,WAAW,KAAK,QAGrE,EAAA,UAAA,OAAA,WAES,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,WAAW,OAAQ,IAAK,CAEZ,mBAD3B,EAAO,KAAK,WAAW,IACb,cACZ,EAAK,eAQP,IAAA,EAAuC,GACvC,EAAa,GACd,IAAI,EAAI,EAAG,EAAI,KAAK,iBAAiB,OAAQ,IAAK,CAG9C,IAFC,IAAA,EAAO,KAAK,iBAAiB,GAC/B,EAAiB,GACZ,EAAI,EAAG,EAAI,EAAK,MAAM,KAAK,OAAQ,IACxC,EAAI,KAAK,EAAK,MAAM,KAAK,IAE7B,EAAW,KAAK,CAAC,KAAM,IAEtB,IAAI,EAAI,EAAG,EAAI,KAAK,iBAAiB,OAAQ,IACzC,KAAA,gBAAgB,KAAK,iBAAiB,GAAI,EAAc,GAG5D,IAAI,EAAI,EAAG,EAAI,KAAK,iBAAiB,OAAQ,KAM7C,KAAA,YAAc,KAAK,OAG5B,EAAA,UAAA,gBAAA,SAAgB,EACZ,EACA,GACI,IAAA,EAAQ,KAAK,WAAW,QAAQ,GAChC,IAAC,EAAa,GAAQ,CACtB,EAAa,IAAS,EAIjB,IADD,IAAA,EAAa,GACR,EAAI,EAAG,EAAI,EAAU,WAAW,OAAQ,IAAK,CAC5C,IAAA,EAAO,EAAU,WAAW,GAC9B,GAAA,EAAM,CACA,IAAA,EAAK,EAAK,YACZ,GAAC,EAEE,CACE,KAAA,gBAAgB,EAAK,YAAa,EAAc,GAM/C,IAAA,EAAU,KAAK,iBAAiB,QAAQ,GAC1C,GAAW,EAGX,EAAW,KAAK,EAAW,GAAS,KAAK,EAAK,WAE9C,EAAW,KAAK,EAAG,MAAM,KAAK,EAAK,gBAdvC,EAAW,MAAK,QAmBpB,EAAW,MAAK,GAIxB,EAAU,MAAM,KAAO,EAAU,SAAS,KAGtD,EApKA,GAsKe,EAAA,EAAA,QAAA,QAAA;;AC9GA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzDf,IAAA,EAAA,WASI,SAAA,EAAY,EAAW,EAAW,EAAwB,QAAxB,IAAA,IAAA,GAAA,QAAwB,IAAA,IAAA,EAAA,IACjD,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAEF,KAAA,KAAO,CACR,EAAG,EACH,EAAG,GAGF,KAAA,MAAQ,CACT,OAAQ,EACR,KAAM,CAAC,IAGN,KAAA,aAAe,GACf,KAAA,WAAa,GACb,KAAA,cAAgB,CACjB,CAAC,EAAG,EAAG,EAAG,IA4BtB,OAvBI,EAAA,UAAA,OAAA,SAAO,GACC,GAAA,KAAK,MAAM,SAAW,KAAK,MAAM,KAAK,GAEhC,MAAA,IAAI,MAAM,oDAEpB,EAAI,UAAa,KAAK,MAAM,OAAS,UAAY,UACjD,EAAI,YAAc,kBAClB,EAAI,YACJ,EAAI,IAAI,KAAK,SAAS,EAAG,KAAK,SAAS,EAAG,KAAK,KAAK,EAAI,EAAG,EAAa,EAAV,KAAK,IACnE,EAAI,OACJ,EAAI,UAGR,EAAA,UAAA,QAAA,SAAQ,EAAkB,GACtB,QAAQ,IAAI,sBACP,KAAA,MAAM,QAAU,KAAK,MAAM,OAC3B,KAAA,MAAM,KAAK,GAAK,KAAK,MAAM,QAIpC,EAAA,UAAA,SAAA,SAAS,GACE,MAAA,CAAC,KAAK,MAAM,SAE3B,EAvDA,GAyDe,EAAA,EAAA,QAAA,QAAA;;ACdA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1Cf,IAAA,EAAA,WASI,SAAA,EAAY,EAAW,EAAW,QAAA,IAAA,IAAA,EAAA,IACzB,KAAA,SAAW,CAAE,EAAG,EAAG,EAAG,GACtB,KAAA,KAAO,CAAE,EAAG,EAAM,EAAG,GACrB,KAAA,MAAQ,CAAE,KAAM,EAAC,IAEjB,KAAA,aAAe,CAAC,CAAC,EAAG,EAAG,EAAG,IAE1B,KAAA,cAAgB,CAAC,CAAC,EAAG,EAAG,EAAG,IAC3B,KAAA,WAAa,GAuB1B,OArBI,EAAA,UAAA,OAAA,SAAO,GACG,IAAA,EAAO,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EACrC,EAAM,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EAC1C,EAAI,UAAY,QAChB,EAAI,SAAS,EAAM,EAAK,KAAK,KAAK,EAAG,KAAK,KAAK,GAC/C,EAAI,UAAa,KAAK,MAAM,KAAK,GAAK,UAAY,UAClD,EAAI,SACA,EAAqB,GAAd,KAAK,KAAK,EACjB,EAAoB,GAAd,KAAK,KAAK,EACF,GAAd,KAAK,KAAK,EACI,GAAd,KAAK,KAAK,IAGlB,EAAA,UAAA,QAAA,SAAQ,EAAiB,KAGzB,EAAA,UAAA,SAAA,SAAS,GAGE,OAAA,GAEf,EAxCA,GA0Ce,EAAA,EAAA,QAAA,QAAA;;AC8FA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzIf,IAAA,EAAA,WAUI,SAAA,EAAY,EAAW,EAAW,EAAc,EAAyB,QAAzB,IAAA,IAAA,EAAqB,GAAL,QAAS,IAAA,IAAA,EAAiB,EAAM,GACvF,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAGF,KAAA,KAAO,CACR,EAAG,EACH,EAAG,GAGF,KAAA,MAAQ,CACT,KAAM,IAGL,KAAA,QAAU,EAEV,KAAA,aAAe,GAGf,IADC,IAAA,EAAU,GAAS,EAAI,GACpB,EAAI,EAAG,EAAI,EAAM,IACjB,KAAA,aAAa,KAAK,CACnB,GAAI,GAAW,EAAI,IAAO,EAAM,EAChC,GAAI,KAAK,KAAK,EAAE,IAEf,KAAA,aAAa,QAAQ,CACtB,EAAG,GAAW,EAAI,IAAO,EAAM,EAC/B,GAAI,KAAK,KAAK,EAAE,IAInB,KAAA,cAAgB,GAChB,IAAI,EAAI,EAAG,EAAI,EAAM,IACjB,KAAA,cAAc,KAAK,CACpB,GAAI,GAAW,GAAK,EAAK,GAAG,GAC5B,EAAG,KAAK,KAAK,EAAE,IAIlB,KAAA,cAAc,KAAK,CACpB,EAAgB,MAAZ,KAAK,KAAK,EACd,EAAG,IAGF,KAAA,WAAa,GAiF1B,OA9EI,EAAA,UAAA,QAAA,SAAQ,EAAkB,KAI1B,EAAA,UAAA,OAAA,SAAO,GACH,EAAI,OAEE,IAAA,EAAO,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EACrC,EAAM,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EAE1C,EAAI,UAAY,UAChB,EAAI,YACJ,EAAI,OAAO,EAAyB,GACpC,EAAI,OAAO,EAAO,KAAK,KAAK,EAAQ,GACpC,EAAI,OAAO,EAAmB,IAAZ,KAAK,KAAK,EAAQ,EAAM,KAAK,KAAK,GACpD,EAAI,OAAO,EAAmB,IAAZ,KAAK,KAAK,EAAQ,EAAM,KAAK,KAAK,GACpD,EAAI,YACJ,EAAI,OACJ,EAAI,SAEJ,EAAI,UAAY,SAChB,EAAI,aAAe,SACd,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,aAAa,OAAQ,IAAK,CAC3C,IAAA,EAAS,KAAK,aAAa,GAC/B,EAAI,UAAY,UAChB,EAAI,YACJ,EAAI,IAAI,KAAK,SAAS,EAAI,EAAO,EAAG,KAAK,SAAS,EAAI,EAAO,EAAG,EAAG,EAAG,EAAE,KAAK,IAC7E,EAAI,OACJ,EAAI,UAAY,QAChB,EAAI,SAAS,OAAO,GAAI,KAAK,SAAS,EAAI,EAAO,EAAG,KAAK,SAAS,EAAI,EAAO,EAAI,IAGhF,IAAI,EAAI,EAAG,EAAI,KAAK,cAAc,OAAQ,IAAK,CAC5C,EAAS,KAAK,cAAc,GAChC,EAAI,UAAY,UAChB,EAAI,YAAe,KAAK,MAAM,KAAK,GAAK,UAAY,UACpD,EAAI,UAAY,EAChB,EAAI,YACJ,EAAI,IAAI,KAAK,SAAS,EAAI,EAAO,EAAG,KAAK,SAAS,EAAI,EAAO,EAAG,EAAG,EAAG,EAAE,KAAK,IAC7E,EAAI,OACJ,EAAI,SAGJ,IAAA,EAAO,EAAG,EAAO,EAChB,IAAI,EAAI,EAAG,EAAI,KAAK,QAAS,IAAK,CAC7B,IAAA,EAAQ,KAAK,WAAW,GAAI,EAAQ,KAAK,WAAW,EAAI,KAAK,SACnE,IAAS,EAAM,YAAY,MAAM,KAAK,EAAM,UAAY,EAAI,IAAM,GAAK,GACvE,IAAS,EAAM,YAAY,MAAM,KAAK,EAAM,UAAY,EAAI,IAAM,GAAK,GAErE,IAAA,EAAW,KAAK,MAAM,KAAK,IAAkB,KAAd,KAAK,KAAK,EAAyB,GAAd,KAAK,KAAK,IACpE,EAAI,KAAO,EAAW,eACtB,EAAI,UAAY,QAChB,EAAI,SAAS,OAAO,GAAQ,MAAQ,OAAO,GAAO,KAAK,SAAS,EAAG,KAAK,SAAS,GAEjF,EAAI,WAGR,EAAA,UAAA,SAAA,SAAS,GAGA,IAFD,IAAA,EAAO,EAAG,EAAO,EAEZ,EAAI,EAAG,EAAI,KAAK,QAAS,IAC9B,GAAQ,OAAO,EAAK,KAAO,GAAK,GAChC,GAAQ,OAAO,EAAK,EAAI,KAAK,WAAa,GAAK,GAG7C,IAAA,EAAS,EAAO,EAClB,EAAa,MAAM,KAAK,QAAU,GACjC,IAAI,EAAI,EAAG,GAAK,KAAK,QAAS,IAC/B,EAAW,IAAM,EAAU,GAAK,GAAM,EAGnC,OAAA,GAGX,EAAA,UAAA,aAAA,WAES,KAAA,MAAM,KAAO,KAAK,SAAS,KAAK,WAAW,IAAI,SAAA,GAAS,QAAA,GAAO,EAAK,UAEjF,EAvIA,GAyIe,EAAA,EAAA,QAAA,QAAA;;ACpFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnDf,IAAA,EAAA,WAUI,SAAA,EACI,EACA,EACA,EACA,GAAyB,IAAA,OADzB,IAAA,IAAA,EAAA,SACA,IAAA,IAAA,EAAA,IANJ,KAAA,UAA2C,GAQlC,KAAA,YAAc,EACd,KAAA,SAAW,EACX,KAAA,UAAY,EAEZ,KAAA,MAAqB,QAAhB,EAAG,EAAQ,aAAK,IAAA,EAAA,EAAI,OA6BtC,OA1BI,EAAA,UAAA,IAAA,WAEQ,OAAC,KAAK,aAEH,KAAK,YAAY,MAAM,KAAK,KAAK,YAFV,GAKlC,EAAA,UAAA,YAAA,SAAY,EAAW,GACd,KAAA,UAAU,KAAK,CAAC,EAAG,EAAG,EAAG,KAGlC,EAAA,UAAA,OAAA,SAAO,EAA+B,GAC9B,GAAC,KAAK,YAAN,CACJ,EAAI,OACJ,EAAI,YAAc,KAAK,MACvB,EAAI,UAAY,EAChB,EAAI,YACJ,EAAI,OAAO,EAAK,EAAG,EAAK,GACnB,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,UAAU,OAAQ,IACvC,EAAI,OAAO,KAAK,UAAU,GAAG,EAAG,KAAK,UAAU,GAAG,GAEhD,IAAA,EAAY,KAAK,YAAY,cAAc,KAAK,UACtD,EAAI,OAAO,EAAU,EAAI,KAAK,YAAY,SAAS,EAAG,EAAU,EAAI,KAAK,YAAY,SAAS,GAC9F,EAAI,SACJ,EAAI,YAEZ,EAjDA,GAmDe,EAAA,EAAA,QAAA,QAAA;;ACwGf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,QAAA,QAAA,QAAA,OAAA,QAAA,aAAA,EAAA,IAAA,EAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GA7JA,EAAA,WAUI,SAAA,EAAY,EAAW,EAAW,EAAc,EAAkB,GACzD,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAGF,KAAA,KAAO,CACR,EAAG,EACH,EAAG,GAGF,KAAA,MAAQ,CACT,KAAM,EAAC,IAGN,KAAA,SAAW,EAAW,KAAK,GAAK,IAE/B,IAAA,EAAS,KAAK,IAAI,KAAK,UACvB,EAAO,KAAK,IAAI,KAAK,UAGlB,KAAA,aADG,GAAR,EACoB,CAChB,CACI,EAAG,IAAS,GAAI,EAAS,GAAI,GAC7B,EAAG,IAAS,GAAI,EAAS,GAAI,IAEjC,CACI,EAAG,GAAQ,GAAI,EAAS,GAAI,GAC5B,EAAG,IAAS,GAAI,EAAS,GAAI,KAIjB,CAAC,CACjB,EAAU,GAAP,EAAW,EACd,GAAW,GAAR,EAAY,IAIlB,KAAA,cAAgB,CACjB,CACI,GAAW,GAAR,EAAY,EACf,EAAU,GAAP,EAAW,IAIjB,KAAA,WAAa,GAmC1B,OA/BI,EAAA,UAAA,QAAA,SAAQ,EAAkB,KAM1B,EAAA,UAAA,OAAA,SAAO,GACH,EAAI,OAGJ,EAAI,UAAY,UAChB,EAAI,YAAc,QAClB,EAAI,UAAY,EAChB,EAAI,UAAU,KAAK,SAAS,EAAG,KAAK,SAAS,GAC7C,EAAI,OAAO,KAAK,UAEhB,EAAI,YAC6B,IAA7B,KAAK,aAAa,SAClB,EAAI,QAAsB,GAAf,KAAK,KAAK,GAAyB,GAAf,KAAK,KAAK,GACzC,EAAI,QAAsB,GAAf,KAAK,KAAK,EAAU,GAC/B,EAAI,OAAqB,GAAd,KAAK,KAAK,GAAwB,GAAf,KAAK,KAAK,GACxC,EAAI,OAAqB,GAAd,KAAK,KAAK,EAAS,GAC9B,EAAI,UAGH,KAAA,SAAS,GAEd,EAAI,WAIZ,EA1FA,GA4FA,EAAA,SAAA,GACI,SAAA,EAAY,EAAW,EAAW,EAAc,GAC5C,OAAA,EAAA,KAAA,KAAM,EAAG,EAAG,EAAM,EAAS,IAAE,KAerC,OAjBsB,EAAA,EAAA,GAIlB,EAAA,UAAA,SAAA,SAAS,GACL,EAAI,YACJ,EAAI,OAAqB,GAAd,KAAK,KAAK,EAAwB,IAAd,KAAK,KAAK,GACzC,EAAI,OAAqB,GAAd,KAAK,KAAK,EAAS,GAC9B,EAAI,IAAI,EAAG,EAAiB,GAAd,KAAK,KAAK,EAAS,EAAG,KAAK,IACzC,EAAI,OAAsB,IAAd,KAAK,KAAK,EAAwB,IAAd,KAAK,KAAK,GAC1C,EAAI,YACJ,EAAI,SACJ,EAAI,QAER,EAAA,UAAA,SAAA,SAAS,GACE,MAAA,CAAC,EAAK,IAAM,EAAK,KAEhC,EAjBA,CAAsB,GAiEtB,QAAA,QAAA,EA9CA,IAAA,EAAA,SAAA,GACI,SAAA,EAAY,EAAW,EAAW,EAAc,GAC5C,OAAA,EAAA,KAAA,KAAM,EAAG,EAAG,EAAM,EAAS,IAAE,KAgBrC,OAlBqB,EAAA,EAAA,GAIjB,EAAA,UAAA,SAAA,SAAS,GACC,IAAA,EAAI,KAAK,KAAK,EACpB,EAAI,YACJ,EAAI,OAAW,GAAJ,GAAc,GAAL,GACpB,EAAI,iBAAqB,GAAJ,EAAa,GAAJ,EAAS,EAAO,GAAJ,GAC1C,EAAI,kBAAsB,GAAL,EAAc,GAAJ,GAAc,GAAL,GAAe,GAAL,GAClD,EAAI,iBAAqB,EAAJ,GAAY,GAAL,EAAc,GAAJ,GAAc,GAAL,GAC/C,EAAI,YACJ,EAAI,SACJ,EAAI,QAER,EAAA,UAAA,SAAA,SAAS,GACE,MAAA,CAAC,EAAK,IAAM,EAAK,KAEhC,EAlBA,CAAqB,GA8CrB,QAAA,OAAA,EA1BA,IAAA,EAAA,SAAA,GACI,SAAA,EAAY,EAAW,EAAW,EAAc,GAC5C,OAAA,EAAA,KAAA,KAAM,EAAG,EAAG,EAAM,EAAS,IAAE,KAsBrC,OAxBsB,EAAA,EAAA,GAIlB,EAAA,UAAA,SAAA,SAAS,GACC,IAAA,EAAI,KAAK,KAAK,EAEpB,EAAI,YACJ,EAAI,OAAW,GAAJ,GAAc,IAAL,GACpB,EAAI,iBAAqB,GAAJ,EAAa,GAAJ,EAAS,EAAO,GAAJ,GAC1C,EAAI,kBAAsB,GAAL,EAAc,GAAJ,GAAc,GAAL,GAAe,IAAL,GAClD,EAAI,iBAAqB,EAAJ,GAAY,IAAL,EAAe,GAAJ,GAAc,IAAL,GAChD,EAAI,YACJ,EAAI,SACJ,EAAI,OAEJ,EAAI,YACJ,EAAI,QAAY,GAAL,GAAe,GAAL,GACrB,EAAI,iBAAqB,EAAJ,GAAY,GAAL,EAAc,GAAJ,GAAc,GAAL,GAC/C,EAAI,UAER,EAAA,UAAA,SAAA,SAAS,GACE,MAAA,CAAC,EAAK,KAAO,EAAK,KAEjC,EAxBA,CAAsB,GA0BtB,QAAA,QAAA,EAAA,IAAA,EAAA,SAAA,GACI,SAAA,EAAY,EAAW,EAAW,EAAc,GAC5C,OAAA,EAAA,KAAA,KAAM,EAAG,EAAG,EAAM,EAAS,IAAE,KAgCrC,OAlCkB,EAAA,EAAA,GAKd,EAAA,UAAA,SAAA,SAAS,GACC,IAAA,EAAI,KAAK,KAAK,EAEpB,EAAI,YACJ,EAAI,OAAO,GAAQ,GAAL,GACd,EAAI,OAAO,EAAG,GACd,EAAI,SAEJ,EAAI,YACJ,EAAI,OAAO,EAAO,GAAJ,GACd,EAAI,QAAY,IAAL,GAAgB,IAAL,GACtB,EAAI,OAAW,IAAJ,GAAe,IAAL,GACrB,EAAI,YACJ,EAAI,SACJ,EAAI,OAEJ,EAAI,YACJ,EAAI,IAAI,EAAO,GAAJ,EAAa,GAAJ,EAAS,EAAG,EAAE,KAAK,IACvC,EAAI,SACJ,EAAI,QAGR,EAAA,UAAA,OAAA,SAAO,GACH,EAAK,UAAU,OAAO,KAAK,KAAM,IAErC,EAAA,UAAA,QAAA,SAAQ,EAAiB,KACzB,EAAA,UAAA,SAAA,SAAS,GACE,MAAA,EAAE,EAAK,KAEtB,EAlCA,CAAkB,GAAlB,QAAA,IAAA;;AC3Ee,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhFf,IAAA,EAAA,WAcI,SAAA,EAAY,EAAW,EAAW,EAAyB,EAAyB,QAAzB,IAAA,IAAA,GAAA,QAAyB,IAAA,IAAA,EAAA,IAC3E,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAGF,KAAA,KAAO,CACR,EAAU,EAAP,EACH,EAAG,GAEF,KAAA,OAAS,EACT,KAAA,WAAa,EAEb,KAAA,MAAQ,CAET,KAAM,IAGL,KAAA,aAAe,GACf,KAAA,cAAgB,GAChB,KAAA,WAAa,GA4C1B,OAzCI,EAAA,UAAA,QAAA,SAAQ,EAAkB,KAI1B,EAAA,UAAA,OAAA,SAAO,GACH,EAAI,OAEE,IAAA,EAAO,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EACrC,EAAM,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EAE1C,EAAI,UAAY,UAChB,EAAI,YACJ,EAAI,OAAO,EAAoB,GAC/B,EAAI,OAAO,EAAO,KAAK,KAAK,EAAG,GAC/B,EAAI,OAAO,EAAO,KAAK,KAAK,EAAG,EAAM,KAAK,KAAK,GAC/C,EAAI,OAAO,EAAoB,EAAM,KAAK,KAAK,GAC/C,EAAI,YACJ,EAAI,OACJ,EAAI,SAIC,IADD,IAAA,EAAa,EACR,EAAI,EAAG,EAAI,KAAK,WAAW,OAAQ,IAAK,CACvC,IACA,GADO,KAAK,WAAW,GACT,MAAM,KAAK,GAAK,EAAI,IAAM,EAE9C,GAAe,KAAK,QAAU,GAAK,KAAK,WAAW,OAAO,GAAM,EAAQ,EAG5E,EAAI,UAAY,SAChB,EAAI,aAAe,SACnB,EAAI,KAAO,KAAK,MAAkB,EAAZ,KAAK,KAAK,EAAI,GAAK,eACzC,EAAI,UAAY,OAChB,EAAI,SAAS,OAAO,GAAa,KAAK,SAAS,EAAG,KAAK,SAAS,GAEhE,EAAI,WAGR,EAAA,UAAA,SAAA,SAAS,GACE,MAAA,IAEf,EA9EA,GAgFe,EAAA,EAAA,QAAA,QAAA;;ACoBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzGf,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,WACA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,cAmGe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAjGf,EAAA,SAAA,GACI,SAAA,EAAY,GAgGD,IAAA,EAAA,EAhGX,EACI,EAAA,KAAA,KAAM,IAAO,KACb,EAAO,MAAQ,IACf,EAAO,OAAS,IAEV,IAAA,EAAQ,IAAI,EAAJ,QAAU,IAAK,IAAK,GAClC,EAAK,WAAW,KAAK,GAEhB,IAAA,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAClB,IAAA,EAAM,IAAI,EAAJ,QAAa,EAAM,SAAS,EAAI,IAAQ,GAAF,EAAM,IACxD,EAAM,WAAW,QAAQ,IAAI,EAAJ,QAAS,EAAK,EAAG,CACtC,CAAC,EAAG,EAAI,SAAS,EAAI,KAAM,EAAG,IAAQ,GAAF,GACpC,CAAC,EAAG,EAAI,SAAS,EAAG,EAAG,IAAQ,GAAF,MAEjC,EAAK,WAAW,KAAK,GAEf,IAAA,EAAO,IAAI,EAAJ,QAAa,EAAM,SAAS,EAAI,IAAQ,GAAF,EAAM,IACzD,EAAM,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,CACpC,CAAC,EAAG,EAAK,SAAS,EAAI,KAAM,EAAG,IAAQ,GAAF,GACrC,CAAC,EAAG,EAAK,SAAS,EAAG,EAAG,IAAQ,GAAF,MAElC,EAAK,WAAW,KAAK,GAGpB,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAClB,IAAA,EAAS,IAAI,EAAJ,QAAc,EAAM,SAAS,EAAI,KAAS,GAAF,EAAM,KAC7D,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAO,EAAG,KAC1C,EAAK,WAAW,KAAK,GACrB,EAAK,iBAAiB,KAAK,GAG3B,IAAA,EAAc,GACd,EAAc,GACd,EAAc,GACd,EAAY,GACX,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAClB,IAAA,EAAO,IAAI,EAAJ,QAAa,IAAQ,GAAF,EAAM,IACtC,EAAY,KAAK,GAEX,IAAA,EAAO,IAAI,EAAJ,QAAa,IAAQ,GAAF,EAAM,IACtC,EAAY,KAAK,GAGX,IAAA,GAAM,EAAK,SAAS,EAAI,EAAK,SAAS,GAAG,EACzC,EAAK,EAAK,SAAS,EAAI,GACvB,EAAM,IAAI,EAAJ,QAAY,EAAK,GAAI,EAAI,GAAI,GACzC,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,KACtC,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,KAChC,IAAA,EAAM,IAAI,EAAJ,QAAY,EAAK,GAAI,EAAI,GAAI,GACzC,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,KACtC,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,KAEhC,IAAA,EAAS,IAAI,EAAJ,QAAc,EAAI,IAAK,IAGlC,GAFJ,EAAY,KAAK,GAEb,EAAI,EAAG,CAED,IAAA,EAAO,IAAI,EAAJ,QAAY,EAAK,GAAI,EAAK,GAAI,GAAI,GAC/C,EAAK,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,EAAG,KACtC,EAAK,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAE,GAAI,EAAG,KAE3C,IAAA,EAAO,IAAI,EAAJ,QAAY,EAAK,GAAI,EAAK,GAAI,GAAI,GAC/C,EAAK,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,EAAG,KACtC,EAAK,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAE,GAAI,EAAG,KAE3C,IAAA,EAAM,IAAI,EAAJ,OAAW,EAAK,GAAI,EAAK,GAAI,GAAI,GAC7C,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,EAAG,KACrC,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,KAEtC,EAAU,GAAK,EACf,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,KACzC,EAAK,WAAW,KAAK,EAAK,EAAM,QAEhC,EAAU,GAAK,EACf,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,EAAG,KAG5C,EAAK,WAAW,KAAK,EAAK,EAAK,GAG7B,IAAA,EAAa,IAAI,EAAJ,QAAc,IAAK,IAAK,IAC3C,EAAW,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,GAAI,EAAG,KACrD,EAAY,KAAK,IAEjB,EAAA,EAAK,YAAW,KAAI,MAAA,EAAA,EAAA,CAAC,GAAe,EAAgB,IAE9C,IAAA,EAAW,IAAI,EAAJ,QAAY,IAAK,GAAI,GAChC,EAAW,IAAI,EAAJ,QAAY,IAAK,GAAI,GAChC,EAAgB,IAAI,EAAJ,QAAY,IAAK,IAAK,GAAa,EAAO,IAQzD,OANP,EAAK,WAAW,KAAK,EAAU,EAAU,IAEzC,EAAA,EAAK,kBAAiB,KAAI,MAAA,EAAI,GAIvB,EAFf,OA/F+B,EAAA,EAAA,GA+F/B,EA/FA,CAA+B,EAA/B,SAiGe,EAAA,EAAA,QAAA,QAAA;;ACbA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtFf,IAAA,EAAA,WAUI,SAAA,EAAY,EAAW,EAAW,QAAA,IAAA,IAAA,EAAA,IACzB,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAGF,KAAA,KAAO,CACR,EAAG,EACH,EAAG,GAGF,KAAA,MAAQ,CACT,KAAM,EAAC,IAIL,IAAA,EAAgB,IAAP,EACV,KAAA,aAAe,CAChB,CAAC,GAAI,EAAQ,GAAI,GACjB,CAAC,EAAI,EAAQ,GAAI,IAGhB,KAAA,cAAgB,CACjB,CAAC,EAAG,EAAG,EAAG,EAAK,IAGd,KAAA,WAAa,GAgD1B,OA7CI,EAAA,UAAA,QAAA,SAAQ,EAAkB,KAI1B,EAAA,UAAA,OAAA,SAAO,GACH,EAAI,OAEE,IAAA,EAAO,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EACrC,EAAM,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EAC1C,EAAI,UAAU,EAAM,GAEpB,EAAI,UAAY,KAAK,MAAM,KAAK,GAAK,UAAY,UACjD,EAAI,YACJ,EAAI,OAAmB,GAAZ,KAAK,KAAK,EAAO,GAC5B,EAAI,OAAmB,EAAZ,KAAK,KAAK,EAAmB,GAAZ,KAAK,KAAK,GACtC,EAAI,OAAmB,GAAZ,KAAK,KAAK,EAAO,KAAK,KAAK,GACtC,EAAI,OAAmB,EAAZ,KAAK,KAAK,EAAmB,GAAZ,KAAK,KAAK,GACtC,EAAI,YACJ,EAAI,OACJ,EAAI,SAGJ,EAAI,UAAY,UAChB,EAAI,YACJ,EAAI,IAAkB,IAAd,KAAK,KAAK,EAAwB,IAAd,KAAK,KAAK,EAAwB,IAAd,KAAK,KAAK,EAAU,IAAI,KAAK,GAAG,IAAK,IAAI,KAAK,GAAG,KACjG,EAAI,OACJ,EAAI,SAMA,KAAK,WAAW,IAAM,KAAK,WAAW,GAAG,QACzC,EAAI,YACJ,EAAI,OAAqB,IAAd,KAAK,KAAK,EAAwB,IAAd,KAAK,KAAK,GACzC,EAAI,OAAqB,EAAd,KAAK,KAAK,EAAS,GAC9B,EAAI,UAGR,EAAI,WAGR,EAAA,UAAA,SAAA,SAAS,GACE,OAAA,EAAK,GAAK,CAAC,EAAK,IAAM,KAAK,MAAM,MAEhD,EApFA,GAsFe,EAAA,EAAA,QAAA,QAAA;;ACmDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA5If,IAAA,EAAA,WAUI,SAAA,EAAY,EAAW,EAAW,EAAc,EAAyB,QAAzB,IAAA,IAAA,EAAqB,GAAL,QAAS,IAAA,IAAA,EAAiB,EAAM,GACvF,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAGF,KAAA,KAAO,CACR,EAAG,EACH,EAAG,GAGF,KAAA,MAAQ,CACT,KAAM,IAGL,KAAA,QAAU,EAEV,KAAA,aAAe,GAGf,IADC,IAAA,EAAU,GAAS,EAAI,EAAO,GAC3B,EAAI,EAAG,EAAI,EAAM,IACjB,KAAA,aAAa,KAAK,CACnB,GAAI,GAAW,EAAI,IAAO,EAAM,EAChC,GAAI,KAAK,KAAK,EAAE,IAEf,KAAA,aAAa,QAAQ,CACtB,EAAG,GAAW,EAAI,IAAO,EAAM,EAC/B,GAAI,KAAK,KAAK,EAAE,IAInB,KAAA,cAAgB,GAChB,IAAI,EAAI,EAAG,EAAI,EAAM,IACjB,KAAA,cAAc,KAAK,CACpB,GAAI,GAAW,GAAK,EAAK,GAAG,GAC5B,EAAG,KAAK,KAAK,EAAE,IAIlB,KAAA,cAAc,KAAK,CACpB,EAAgB,MAAZ,KAAK,KAAK,EACd,EAAG,IAGF,KAAA,WAAa,GAoF1B,OAjFI,EAAA,UAAA,QAAA,SAAQ,EAAkB,KAI1B,EAAA,UAAA,OAAA,SAAO,GACH,EAAI,OAEE,IAAA,EAAO,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EACrC,EAAM,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EAE1C,EAAI,UAAY,UAChB,EAAI,YACJ,EAAI,OAAO,EAAyB,GACpC,EAAI,OAAO,EAAmB,IAAZ,KAAK,KAAK,EAAQ,GACpC,EAAI,OAAO,EAAmB,GAAZ,KAAK,KAAK,EAAQ,EAAkB,IAAZ,KAAK,KAAK,GACpD,EAAI,OAAO,EAAmB,IAAZ,KAAK,KAAK,EAAQ,GACpC,EAAI,OAAO,EAAO,KAAK,KAAK,EAAQ,GACpC,EAAI,OAAO,EAAmB,IAAZ,KAAK,KAAK,EAAQ,EAAM,KAAK,KAAK,GACpD,EAAI,OAAO,EAAmB,IAAZ,KAAK,KAAK,EAAQ,EAAM,KAAK,KAAK,GACpD,EAAI,YACJ,EAAI,OACJ,EAAI,SAEJ,EAAI,UAAY,SAChB,EAAI,aAAe,SACd,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,aAAa,OAAQ,IAAK,CAC3C,IAAA,EAAS,KAAK,aAAa,GAC/B,EAAI,UAAY,UAChB,EAAI,YACJ,EAAI,IAAI,KAAK,SAAS,EAAI,EAAO,EAAG,KAAK,SAAS,EAAI,EAAO,EAAG,EAAG,EAAG,EAAE,KAAK,IAC7E,EAAI,OACJ,EAAI,UAAY,QAChB,EAAI,SAAS,OAAO,GAAI,KAAK,SAAS,EAAa,IAAT,EAAO,EAAQ,KAAK,SAAS,EAAI,EAAO,EAAI,IAGrF,IAAI,EAAI,EAAG,EAAI,KAAK,cAAc,OAAQ,IAAK,CAC5C,EAAS,KAAK,cAAc,GAChC,EAAI,UAAY,UAChB,EAAI,YAAe,KAAK,MAAM,KAAK,GAAK,UAAY,UACpD,EAAI,UAAY,EAChB,EAAI,YACJ,EAAI,IAAI,KAAK,SAAS,EAAI,EAAO,EAAG,KAAK,SAAS,EAAI,EAAO,EAAG,EAAG,EAAG,EAAE,KAAK,IAC7E,EAAI,OACJ,EAAI,SAGJ,IAAA,EAAO,EAAG,EAAO,EAChB,IAAI,EAAI,EAAG,EAAI,KAAK,QAAS,IAAK,CAC7B,IAAA,EAAQ,KAAK,WAAW,GAAI,EAAQ,KAAK,WAAW,EAAI,KAAK,SACnE,IAAS,EAAM,YAAY,MAAM,KAAK,EAAM,UAAY,EAAI,IAAM,GAAK,GACvE,IAAS,EAAM,YAAY,MAAM,KAAK,EAAM,UAAY,EAAI,IAAM,GAAK,GAErE,IAAA,EAAW,KAAK,MAAM,KAAK,IAAkB,KAAd,KAAK,KAAK,EAAyB,GAAd,KAAK,KAAK,IACpE,EAAI,KAAO,EAAW,eACtB,EAAI,UAAY,QAChB,EAAI,SAAS,OAAO,GAAQ,MAAQ,OAAO,GAAO,KAAK,SAAS,EAAG,KAAK,SAAS,GAEjF,EAAI,WAGR,EAAA,UAAA,SAAA,SAAS,GAGA,IAFD,IAAA,EAAO,EAAG,EAAO,EAEZ,EAAI,EAAG,EAAI,KAAK,QAAS,IAC9B,GAAQ,OAAO,EAAK,KAAO,GAAK,GAChC,GAAQ,OAAO,EAAK,EAAI,KAAK,WAAa,GAAK,GAG7C,IAAA,EAAS,EAAO,EAClB,EAAa,MAAM,KAAK,QAAU,GACjC,IAAI,EAAI,EAAG,GAAK,KAAK,QAAS,IAC/B,EAAW,GAA4B,IAAtB,EAAU,GAAK,GAG7B,OAAA,GAGX,EAAA,UAAA,aAAA,WAES,KAAA,MAAM,KAAO,KAAK,SAAS,KAAK,WAAW,IAAI,SAAA,GAAS,QAAA,GAAO,EAAK,UAEjF,EA1IA,GA4Ie,EAAA,EAAA,QAAA,QAAA;;ACMA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhJf,IAAA,EAAA,WAUI,SAAA,EAAY,EAAW,EAAW,EAAc,EAAqB,QAArB,IAAA,IAAA,EAAA,UAAqB,IAAA,IAAA,EAAA,IAC5D,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAGF,KAAA,KAAO,CACR,EAAG,EACH,EAAG,GAGD,IAAA,EAAsB,MAAM,GAAM,IAAI,SAAA,GAAK,OAAA,IAC5C,KAAA,MAAQ,CACT,KAAM,EACN,OAAQ,GAEP,KAAA,QAAU,EAEV,KAAA,aAAe,CAChB,CAAC,EAAG,EAAG,GAAI,KAAK,KAAK,EAAE,EAAI,IAG1B,KAAA,cAAgB,GAEhB,IADC,IAAA,EAAU,EAAQ,EACf,EAAI,EAAG,EAAI,EAAM,IACjB,KAAA,cAAc,KAAK,CACpB,GAAI,EAAI,EAAK,EAAI,IAAO,EACxB,EAAG,KAAK,KAAK,EAAE,IAIlB,KAAA,WAAa,GAqG1B,OAlGI,EAAA,UAAA,QAAA,SAAQ,EAAkB,KAI1B,EAAA,UAAA,OAAA,SAAO,GACH,EAAI,OAEE,IAAA,EAAO,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EACrC,EAAM,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EAC1C,EAAI,UAAU,EAAM,GAEpB,EAAI,UAAY,UAChB,EAAI,YACA,IAAA,EAAI,KAAK,IAAkB,GAAd,KAAK,KAAK,EAAuB,GAAd,KAAK,KAAK,GACxC,EAAI,KAAK,KAAK,EAAG,EAAI,KAAK,KAAK,EACrC,EAAI,OAAS,GAAF,EAAO,GAClB,EAAI,MAAQ,EAAF,EAAO,EAAK,EAAF,EAAS,GAAF,EAAO,GAClC,EAAI,MAAQ,EAAF,EAAS,EAAF,EAAS,GAAF,EAAS,EAAF,EAAO,GACtC,EAAI,MAAM,EAAK,EAAF,EAAO,EAAK,GAAF,EAAO,GAC9B,EAAI,MAAM,EAAG,EAAK,GAAF,EAAO,EAAG,GAC1B,EAAI,YACJ,EAAI,OACJ,EAAI,SAGJ,EAAI,UAAU,EAAE,EAAG,GACnB,EAAI,YACJ,EAAI,OAAO,GAAI,GACf,EAAI,OAAO,GAAI,GACf,EAAI,QAAQ,GAAI,GAChB,EAAI,QAAQ,GAAI,GAChB,EAAI,SAGJ,EAAI,UAAY,UAChB,EAAI,KAAK,IAAI,EAAE,EAAG,EAAE,GACpB,EAAI,UAAU,EAAG,EAAE,GACnB,EAAI,YACJ,EAAI,IAAI,EAAG,EAAG,EAAG,EAAG,EAAE,KAAK,IAC3B,EAAI,OACJ,EAAI,SAGJ,EAAI,OAEC,IADC,IAAA,EAAQ,EAAE,KAAK,GAAK,KAAK,QACtB,EAAI,EAAG,EAAI,KAAK,QAAS,IAC9B,EAAI,YACJ,EAAI,OAAO,GAAI,GACf,EAAI,OAAO,EAAQ,IAAJ,EAAU,GACzB,EAAI,SAEJ,EAAI,OAAO,GAEf,EAAI,UAGJ,EAAI,OACJ,EAAI,OAAO,KAAK,MAAM,MAAQ,GAC9B,EAAI,WAAa,EACjB,EAAI,QAAU,QACd,EAAI,YACJ,EAAI,OAAO,EAAK,IAAF,GACd,EAAI,OAAO,EAAQ,IAAJ,GACf,EAAI,SACJ,EAAI,WAAa,EAAE,EACnB,EAAI,YACJ,EAAI,IAAI,EAAG,EAAG,EAAG,EAAG,EAAE,KAAK,IAC3B,EAAI,SACJ,EAAI,UAGC,IAAI,EAAI,EAAG,EAAI,KAAK,cAAc,OAAQ,IAAK,CAC1C,IAAA,EAAS,KAAK,cAAc,GAClC,EAAI,UAAa,GAAK,KAAK,MAAM,MAAS,UAAY,UACtD,EAAI,YACJ,EAAI,IAAI,EAAO,EAAG,EAAO,EAAG,EAAG,EAAG,EAAE,KAAK,IACzC,EAAI,OACJ,EAAI,SAGR,EAAI,WAGR,EAAA,UAAA,SAAA,SAAS,GAEA,IADD,IAAA,EAAS,GACJ,EAAI,EAAG,EAAI,KAAK,QAAS,IAC9B,EAAO,KAAK,GAAK,KAAK,MAAM,OAEzB,OAAA,GAGX,EAAA,UAAA,aAAA,WASW,IAAA,GARe,QAAtB,EAAI,KAAK,WAAW,UAAE,IAAA,OAAA,EAAA,EAAE,OACf,KAAA,MAAM,OAAS,KAAK,MAAM,MAAQ,GAAK,KAAK,QAE5C,KAAA,MAAM,OAAS,GAGhC,EA9IA,GAgJe,EAAA,EAAA,QAAA,QAAA;;ACjEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA9Ef,IAAA,EAAA,WAUI,SAAA,EAAY,EAAW,EAAW,QAAA,IAAA,IAAA,EAAA,IACzB,KAAA,SAAW,CACZ,EAAG,EACH,EAAG,GAGF,KAAA,KAAO,CACR,EAAQ,EAAL,EACH,EAAG,GAGF,KAAA,MAAQ,CACT,KAAM,EAAC,IAEL,IAAA,EAAgB,GAAP,EACV,KAAA,aAAe,CAChB,CAAC,EAAkB,GAAd,KAAK,KAAK,EAAM,EAAG,EAAG,GAC3B,CAAC,GAAI,EAAQ,GAAI,KAAK,KAAK,EAAE,GAC7B,CAAC,GAAI,EAAQ,GAAI,KAAK,KAAK,EAAE,IAG5B,KAAA,cAAgB,CACjB,CAAC,EAAG,EAAG,EAAG,EAAK,IAGd,KAAA,WAAa,GAyC1B,OAtCI,EAAA,UAAA,QAAA,SAAQ,EAAkB,KAI1B,EAAA,UAAA,OAAA,SAAO,GACH,EAAI,OAEE,IAAA,EAAO,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EACrC,EAAM,KAAK,SAAS,EAAI,KAAK,KAAK,EAAE,EAC1C,EAAI,UAAU,EAAM,GAEpB,EAAI,UAAY,UAChB,EAAI,YACJ,EAAI,OAAO,EAAG,GACd,EAAI,OAAmB,EAAZ,KAAK,KAAK,EAAO,GAC5B,EAAI,OAAmB,IAAZ,KAAK,KAAK,EAAQ,KAAK,KAAK,GACvC,EAAI,OAAmB,IAAZ,KAAK,KAAK,EAAQ,KAAK,KAAK,GACvC,EAAI,YACJ,EAAI,OACJ,EAAI,SAGE,IAAA,EAAK,KAAK,KAAK,EACrB,EAAI,UAAY,uBAChB,EAAI,YACJ,EAAI,IAAO,IAAH,EAAS,EAAM,IAAH,EAAS,EAAG,KAAK,IACrC,EAAI,OACJ,EAAI,UAAY,uBAChB,EAAI,YACJ,EAAI,IAAO,IAAH,EAAS,EAAM,IAAH,EAAS,EAAG,KAAK,IACrC,EAAI,OAEJ,EAAI,WAGR,EAAA,UAAA,SAAA,SAAS,GACE,MAAA,CAAC,EAAK,GAAK,EAAK,GAAK,EAAK,KAEzC,EA5EA,GA8Ee,EAAA,EAAA,QAAA,QAAA;;ACgXA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzaf,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,cACA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,iBAgae,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GA9Zf,EAAA,SAAA,GAOI,SAAA,EAAY,GAAZ,IAAA,EACI,EAAA,KAAA,KAAM,IAAO,KA4XjB,EAAA,YAAc,WAEJ,IAAA,EAAM,EAAK,QACjB,EAAI,OAGE,IAAA,EAAQ,EAAK,UAAU,MAAM,MAC/B,GAAA,GAAS,GAAK,EAAQ,EAAE,EAAK,QAAQ,EAAG,CAClC,IAAA,EAAK,EAAM,GAAM,EACvB,EAAK,mBAAmB,EAAI,EAAG,EAAI,EAAG,OAAQ,aAE1C,EAAI,GACJ,EAAK,mBAAmB,EAAE,EAAG,KAAK,IAAI,EAAE,EAAG,GAAI,OAAQ,YAI/D,EAAI,UAGA,GAAS,EAAI,EAAK,QAAU,IAC5B,EAAK,YAAY,MAAM,QAAS,EAChC,EAAK,YAAY,MAAM,KAAO,EAAC,KAhZnC,EAAO,MAAQ,IACf,EAAO,OAAS,IAKhB,EAAK,QADQ,EAGP,IAAA,EAAc,IAAI,EAAJ,QAAa,IAAK,IAAI,EAAO,IACjD,EAAK,YAAc,EACb,IAAA,EAAW,IAAI,EAAJ,IAAQ,EAAY,SAAS,EAAI,GAAI,GAAI,GAAI,IAC9D,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,IAC/C,EAAK,WAAW,KAAK,GAEf,IAEA,EAAW,IAAI,EAAJ,QAFF,IAEsB,IAAK,GAAI,GACxC,EAAW,IAAI,EAAJ,IAHF,IAGkB,IAAK,GAAI,GACpC,EAAW,IAAI,EAAJ,QAJF,IAIwB,KAEvC,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAG,CAC3C,CAAC,EAAG,IAAY,EAAG,IACnB,CAAC,EAAG,IAAa,EAAG,IACpB,CAAC,EAAG,IAAa,EAAG,KACpB,CAAC,EAVU,IAUC,EAAG,QAEnB,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,IAC/C,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,IAC5C,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,IAC5C,EAAK,WAAW,KAAK,EAAU,EAAU,GACzC,EAAK,iBAAiB,KAAK,GAKrB,IAAA,EAAY,IAAI,EAAJ,QAAU,IAAK,IAAK,GAAY,GAAI,IACtD,EAAU,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,EAAG,CAC/C,CAAC,EAAG,EAAU,SAAS,EAAG,EAAG,EAAU,SAAS,EAAI,IACpD,CAAC,EAAG,EAAU,SAAS,EAAG,EAAG,OAEjC,EAAK,UAAY,EAEX,IAAA,EAAa,IAAI,EAAJ,QAAe,IAAK,IArC1B,EAqCqC,IAAK,IAInD,EAAoB,GACxB,EAAK,eAAiB,IACtB,EAAK,iBAAmB,GACnB,IAAA,IAAI,EAAI,EAAG,EAAI,GAAU,IAAK,CACzB,IAAA,EAAM,IAAI,EAAJ,QAAc,EAAK,eAAiB,EAAK,iBAAiB,EAAG,IAAK,IAC9E,EAAkB,KAAK,GACvB,EAAK,iBAAiB,QAAQ,GAC9B,EAAK,WAAW,KAAK,GAInB,IAAA,EAAS,CAAC,MAAO,qBACjB,EAAc,CAAC,MAAO,2BACtB,EAAO,CAAC,MAAO,oBAEf,EAAO,CAAC,MAAO,0BACf,EAAY,CAAC,MAAO,0BAItB,EAAS,GACT,EAAS,GACR,IAAI,EAAI,EAAG,EA/DH,EA+Da,IAAK,CACrB,IAAA,EAAQ,IAAI,EAAJ,QAAa,IAAQ,GAAF,EAAM,IACvC,EAAK,WAAW,KAAK,GACrB,EAAO,KAAK,GAEX,IAAI,EAAI,EAAG,EApEH,EAoEa,IAAK,CACrB,EAAQ,IAAI,EAAJ,QAAa,IAAQ,GAAF,EAAM,KACvC,EAAK,WAAW,KAAK,GACrB,EAAO,KAAK,GAIX,IAAI,EAAI,EAAG,EA3EH,EA2Ea,IAAK,CACrB,IAAA,EAAI,EAGJ,GAFA,EAAM,EAAkB,EA7ErB,IA+EM,SAAS,EAAI,GAAK,GA/ExB,EA+EoC,GACvC,EAAK,EAAW,SAAS,EAAI,GACnC,EAAW,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,EAAG,CACxC,CAAC,EAAG,EAAW,SAAS,EAAI,EAAW,aAAa,GAAG,EAAI,GAAK,EAAE,EAAG,EAAG,EAAK,EAAE,GAC/E,CAAC,EAAG,GAAK,EAAE,EAAG,EAAG,EAAK,EAAE,GACxB,CAAC,EAAG,GAAK,EAAE,EAAG,EAAG,GACjB,CAAC,EAAG,EAAI,SAAS,EAAG,EAAG,IACxB,CAAC,MAAO,6BAGV,IAAI,EAAI,EAAG,EAzFH,EAyFa,IACtB,EAAW,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAO,GAAI,IAI/C,IAAA,EAAwB,GACvB,IAAI,EAAI,EAAG,EA/FH,EA+Fa,IAAK,CACjB,EAAW,SAAS,EAAI,EAAW,cAAc,GAAG,EAAxD,IACA,EAAI,EAAW,SAAS,EAAI,EAAW,cAAc,GAAG,GAExD,EAAS,IAAI,EAAJ,QAAe,EAAkB,EAnGvC,GAmG+C,SAAS,EAAG,EAAI,GAAI,KAErE,WAAW,KAAK,IAAI,EAAJ,QAAS,EArGvB,EAqGyC,CAC9C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,GAC/C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,EAAW,SAAS,EAAI,EAAW,KAAK,EAAE,EAAG,EAAG,EAAO,SAAS,EAAI,IACxE,CAAC,EAAG,EAAW,SAAS,EAAI,EAAW,KAAK,EAAE,EAAG,EAAG,EAAW,SAAS,IACzE,CAAC,MAAO,UAEL,IAAA,EAAS,EAAkB,EA5GxB,GA6GT,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,EAAG,CACvC,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,IAClD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,IAChD,IAEH,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAY,EAAG,CAC3C,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,OAEtD,EAAsB,KAAK,GAC3B,EAAK,WAAW,KAAK,GAMnB,IAAA,EAAU,GACX,IAAI,EAAI,EAAG,GAAK,GAAQ,IAAK,CACxB,EAAS,EAAkB,GA0B7B,IApBE,EAAS,IAAI,EAAJ,QAAe,EAAO,SAAS,GAAK,EArI1C,EAqIqD,GAAK,GAAI,EAAO,SAAS,EAAI,IAAK,KAEzF,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAG,CACzC,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,GAC/C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,IAAM,EAAE,EAAG,EAAG,EAAO,SAAS,EAAI,GAAK,EAAE,IAC9C,IAEC,GA7IK,GA6IQ,EAAI,GAEjB,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAsB,EA/IjD,GA+I4D,EAAG,GAAI,IAGxE,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,EAAG,CACvC,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,IAClD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,IAChD,IAGH,EAAI,EACJ,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAkB,EAAE,GAAI,EAAG,CACvD,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,IAClD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACpD,QACA,CACG,IAAA,EAAY,IAAI,EAAJ,QAAc,EAAO,SAAS,EAAI,GAAI,EAAO,SAAS,EAAI,GAAI,IAC1E,EAAO,EAAsB,GAAG,SAAS,EAAI,GAC7C,EAAM,IAAI,EAAJ,IAAQ,IAAK,EAAM,IAAK,IACpC,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAnKxB,EAmK0C,CAC3C,CAAC,EAAG,EAAW,SAAS,EAAI,EAAW,KAAK,EAAE,EAAG,EAAG,GACpD,CAAC,EAAG,EAAW,SAAS,EAAI,EAAW,KAAK,EAAE,EAAG,EAAG,EAAW,SAAS,IACzE,CAAC,MAAO,UAIX,EAAU,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,EAAG,GAAI,IAG/C,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAW,EAAG,GAAI,IAClD,EAAK,WAAW,KAAK,EAAK,GAC1B,EAAK,iBAAiB,KAAK,GAG/B,EAAK,WAAW,KAAK,GACrB,EAAQ,KAAK,GAkDb,IAAA,EAA+B,GAC9B,IAAI,EAAI,EAAG,EAtOH,EAsOa,IAAK,CACrB,EAAS,EAAkB,GAA3B,IAIA,EAHA,EAAQ,EAAO,IAGf,EAAS,IAAI,EAAJ,QAAe,EAAO,SAAS,EAAI,EAAG,EAAO,SAAS,EAAI,GAAI,KAEtE,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,EAAG,CAC5C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,GAC/C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,IAAK,EAAG,EAAO,SAAS,EAAI,IAChC,CAAC,EAAG,IAAK,EAAG,EAAU,SAAS,EAAI,IACnC,CAAC,EAAG,IAAa,EAAG,EAAU,SAAS,EAAI,IAC3C,CAAC,EAAG,IAAa,EAAG,EAAY,SAAS,GAAK,EAAY,SAAS,EA1O5D,IA0OyE,MACjF,IAGH,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,GAAI,IAGtC,EAAI,EACJ,EAAK,EAAU,SAAS,EAAI,GAC5B,EAAK,EAAM,SAAS,EAAI,GAC9B,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAO,EAAG,CACtC,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,GAAK,EAAE,GACzD,CAAC,EAAG,IAAM,EAAE,EAAG,EAAG,EAAO,SAAS,EAAI,GAAK,EAAE,GAC7C,CAAC,EAAG,IAAM,EAAE,EAAG,EAAG,EAAK,EAAE,GACzB,CAAC,EAAG,IAAc,EAAE,EAAG,EAAG,EAAK,EAAE,GACjC,CAAC,EAAG,IAAc,EAAE,EAAG,EAAG,EAAK,EAAE,GACjC,CAAC,EAAG,EAAM,SAAS,EAAG,EAAG,EAAK,EAAE,IACjC,IAEH,EAAK,WAAW,KAAK,GACrB,EAAe,KAAK,GACpB,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,IAKvC,IAAI,EAAI,EAAG,GA7QH,EA6Qc,IAAK,CACtB,EAAS,EAAkB,EA9QxB,GA8QH,IACA,EAAM,IAAI,EAAJ,QAAY,EAAO,SAAS,EAAG,EAAO,SAAS,EAAI,GAAI,GAAI,GAEvE,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,EAjR5B,GAiRqC,IAC9C,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,EAAG,CACzC,CAAC,EAAG,EAAI,SAAS,EAAI,EAAG,EAAG,EAAI,SAAS,EAAI,IAC5C,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,IAAK,EAAG,EAAI,SAAS,EAAI,IAC7B,CAAC,EAAG,IAAK,EAAG,EAAU,SAAS,EAAI,IACnC,CAAC,EAAG,IAAa,EAAG,EAAU,SAAS,EAAI,IAC3C,CAAC,EAAG,IAAa,EAAG,EAAY,SAAS,GAAK,EAAY,SAAS,EAhR5D,IAgRyE,MACjF,IAEH,EAAK,WAAW,KAAK,GACrB,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,IA2BnC,IAAA,EAA6B,GAC9B,IAAI,EAAI,EAAG,EAAI,GAAQ,IAAK,CACvB,IAAA,EAAU,EA1TP,EA0TkB,GAAK,GAC1B,EAAO,EAAkB,GAAK,GA3T3B,EA2TuC,EAAI,IAC9C,EAAM,IAAI,EAAJ,QAAgB,EAAK,SAAS,EAAI,EAAQ,IAAK,IAC3D,EAAK,WAAW,KAAK,GACrB,EAAK,iBAAiB,KAAK,GAG3B,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAW,GAAI,CACxC,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,IAAK,EAAG,EAAI,SAAS,EAAI,IAC7B,CAAC,EAAG,IAAK,EAAG,EAAU,SAAS,EAAI,IACnC,CAAC,EAAG,EAAU,SAAS,EAAI,EAAU,cAAc,IAAI,EAAG,EAAG,EAAU,SAAS,EAAI,KACrF,CAAC,MAAO,wBAIX,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,CAClC,CAAC,EAAG,EAAI,SAAS,EAFJ,GAEkB,EAAG,EAAI,SAAS,EAFlC,IAGb,CAAC,EAAG,EAAK,SAAS,EAHL,GAGoB,EAAQ,EAAG,EAAK,SAAS,EAH7C,GAG4D,MAG7E,EAAY,KAAK,GAIf,IAAA,EAAW,IAAI,EAAJ,QAAY,EAAO,GAAG,SAAS,EAAI,GAAI,EAAO,GAAG,SAAS,EAAG,GAAQ,EAAO,IACvF,EAAW,IAAI,EAAJ,QAAY,EAAO,GAAG,SAAS,EAAI,GAAI,EAAO,GAAG,SAAS,EAAG,GAAQ,EAAO,IACvF,EAAW,IAAI,EAAJ,QAAY,IAAK,IAAK,EAAY,MAAM,EAtV5C,IAsVsD,EAAO,IACpE,EAAW,IAAI,EAAJ,QAAY,IAAK,IAAK,EAAY,MAvVtC,EAuVkD,KAAS,EAAO,IAyDxE,OArDP,EAAK,WAAW,KAAK,EAAY,EAAW,EAAa,EAAU,EAAU,EAAU,GAqDhF,EAFf,OA5ZiC,EAAA,EAAA,GA4W7B,EAAA,UAAA,mBAAA,SAAmB,EAAc,EAAe,EAAe,GACrD,IAAA,EAAM,KAAK,QACX,EAAM,KAAK,eAAiB,EAAK,KAAK,iBAAoB,GAC1D,EAAM,KAAK,eAAiB,EAAM,KAAK,iBAAoB,GAC3D,EAAI,IACV,EAAI,UAAY,SAChB,EAAI,aAAe,SACnB,EAAI,UAAY,OAChB,EAAI,YAAc,EAClB,EAAI,UAAY,EAChB,EAAI,YACJ,EAAI,OAAO,EAAI,GACf,EAAI,OAAO,EAAK,GAAI,KACpB,EAAI,OAAO,EAAK,GAAI,KACpB,EAAI,OAAO,EAAI,GACf,EAAI,SAEJ,EAAI,YAAc,4BAClB,EAAI,UAAY,EAChB,EAAI,KAAO,iBACX,EAAI,WAAW,GAAO,EAAK,GAAI,EAAG,KAClC,EAAI,SAAS,GAAO,EAAK,GAAI,EAAG,MA2BxC,EA5ZA,CAAiC,EAAjC,SA8Ze,EAAA,EAAA,QAAA,QAAA;;AC7JA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvSf,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,cACA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,iBA8Re,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GA5Rf,EAAA,SAAA,GAOI,SAAA,EAAY,GAAZ,IAAA,EACI,EAAA,KAAA,KAAM,IAAO,KAyPjB,EAAA,YAAc,WACJ,IAAA,EAAM,EAAK,QAEX,EAAQ,EAAK,UAAU,MAAM,MAC/B,GAAA,GAAS,EAAG,CACN,IAAA,EAAI,GAAM,EAAQ,GAAM,GAC1B,GAAA,GAAK,EAAG,CACR,EAAI,UAAY,yBACV,IAAA,EAAQ,EAAK,SAAW,EAAK,WAAa,EAAK,GAE/C,EAAQ,EAAK,SAAY,GAC/B,EAAI,YACJ,EAAI,OAAO,EAHG,KAId,EAAI,OAAO,EAJG,KAKd,EAAI,OAAO,EALgB,KAM3B,EAAI,OAAO,EANgB,KAO3B,EAAI,QAIR,GAAS,EAAE,EAAK,QAAU,IAC1B,EAAK,YAAY,MAAM,QAAS,EAChC,EAAK,YAAY,MAAM,KAAO,EAAC,KA9QnC,EAAO,MAAQ,IACf,EAAO,OAAS,IAGhB,EAAK,QADQ,EAGP,IAAA,EAAc,IAAI,EAAJ,QAAa,IAAK,IAAI,EAAO,IACjD,EAAK,YAAc,EACb,IAAA,EAAW,IAAI,EAAJ,IAAQ,IAAK,GAAI,GAAI,IACtC,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,IAC/C,EAAK,WAAW,KAAK,GAEf,IAEA,EAAW,IAAI,EAAJ,QAFF,IAEsB,IAAK,GAAI,GACxC,EAAW,IAAI,EAAJ,IAHF,IAGkB,IAAK,GAAI,GACpC,EAAW,IAAI,EAAJ,QAJF,IAIwB,KAEvC,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAG,CAC3C,CAAC,EAAG,IAAY,EAAG,IACnB,CAAC,EAAG,IAAa,EAAG,IACpB,CAAC,EAAG,IAAa,EAAG,KACpB,CAAC,EAVU,IAUC,EAAG,QAEnB,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,IAC/C,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,IAC5C,EAAS,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,IAC5C,EAAK,WAAW,KAAK,EAAU,EAAU,GACzC,EAAK,iBAAiB,KAAK,GAIrB,IAAA,EAAY,IAAI,EAAJ,QAAU,IAAK,IAAK,GAAI,GAAI,IAC9C,EAAU,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAa,EAAG,CAC/C,CAAC,EAAG,EAAU,SAAS,EAAG,EAAG,EAAU,SAAS,EAAI,IACpD,CAAC,EAAG,IAAK,EAAG,EAAU,SAAS,EAAI,IACnC,CAAC,EAAG,IAAK,EAAG,OAEhB,EAAK,UAAY,EAEX,IAAA,EAAQ,IAAI,EAAJ,QAAU,IAAK,IArChB,EAqC2B,IAAK,IAKzC,EAAkB,GACtB,EAAK,SAAW,IAChB,EAAK,WAAa,GACb,IAAA,IAAI,EAAI,EAAG,EAAI,GAAU,IAAK,CACzB,IAAA,EAAM,IAAI,EAAJ,QAAc,EAAK,SAAW,EAAK,WAAW,EAAG,IAAK,IAClE,EAAgB,KAAK,GACrB,EAAK,iBAAiB,QAAQ,GAC9B,EAAK,WAAW,KAAK,GAInB,IAAA,EAAS,CAAC,MAAO,qBACjB,EAAc,CAAC,MAAO,0BACtB,EAAO,CAAC,MAAO,oBACf,EAAY,CAAC,MAAO,2BAGrB,IAAI,EAAI,EAAG,EA3DH,EA2Da,IAAK,CACrB,IAGA,GAFA,EAAM,EAAgB,EA7DnB,IA+DM,SAAS,EAAI,GAHlB,GA5DD,EA+DoC,GAC7C,EAAM,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAK,EAAG,CACnC,CAAC,EAAG,EAAM,SAAS,EAAI,EAAM,aAAa,GAAG,EAAG,EAAG,IAL7C,EAKqD,GAC3D,CAAC,EAAG,GANE,EAMK,EAAG,EAAG,IANX,EAMmB,GACzB,CAAC,EAAG,GAPE,EAOK,EAAG,EAAG,GACjB,CAAC,EAAG,EAAI,SAAS,EAAG,EAAG,IACxB,CAAC,MAAO,6BAIX,IAAA,EAAmB,GAClB,IAAI,EAAI,EAAG,GA1EH,EA0Ec,IAAK,CAGtB,IAAA,EAAI,EAAM,SAAS,EAAI,EAAM,cAAc,GAAG,GAE9C,EAAS,IAAI,EAAJ,QAAe,EAAgB,EA/ErC,GA+E6C,SAAS,EAAI,EAAG,EAAI,GAAI,KAEvE,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAO,IACvC,EAAiB,KAAK,GACtB,EAAK,WAAW,KAAK,GAIpB,IAAI,EAAI,EAAG,EAAI,GAAY,IAAK,CAC3B,IAAA,EAAS,EAAgB,IAKzB,EAAS,IAAI,EAAJ,QAAe,EAAO,SAAS,EAAG,EAAO,SAAS,EAAI,GAAI,KAElE,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAG,CACzC,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,GAC/C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,IAAM,EAAE,EAAG,EAAG,EAAO,SAAS,EAAI,GAAK,IAC5C,IAEC,EAAI,GACJ,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAgB,EAAE,GAAI,EAAG,CACrD,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,IAClD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,IAChD,IAEH,EAAO,WAAW,KAAK,MAEvB,GA9GK,EAgHL,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAiB,EAhH5C,GAgHuD,EAAG,GAAI,IAGnE,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,EAAG,CACvC,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,IAClD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,IAChD,IAGP,EAAK,WAAW,KAAK,GACrB,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,IAIxC,IAAA,EAAS,GACT,EAAS,GACR,IAAI,EAAI,EAAG,EAjIH,EAiIa,IAAK,CACrB,IAAA,EAAQ,IAAI,EAAJ,QAAa,IAAQ,GAAF,EAAM,IAAI,EAAO,IAClD,EAAK,WAAW,KAAK,GACrB,EAAM,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAO,IACtC,EAAO,KAAK,GAEX,IAAI,EAAI,EAAG,EAvIH,EAuIa,IAAK,CACrB,EAAQ,IAAI,EAAJ,QAAa,IAAQ,GAAF,EAAM,IAAI,EAAO,IAClD,EAAK,WAAW,KAAK,GACrB,EAAO,KAAK,GAIZ,IAAA,EAAoC,GAEnC,IAAI,EAAI,EAAG,EAhJH,EAgJa,IAAK,CACrB,EAAM,IAAI,EAAJ,QAAgB,EAAO,GAAG,SAAS,EAAI,EAAG,IAAK,IAC3D,EAAmB,KAAK,GACxB,EAAK,WAAW,KAAK,GACrB,EAAK,iBAAiB,KAAK,GAG1B,IAAI,EAAI,EAAG,EAvJH,EAuJa,IAAK,CACrB,EAAM,EAAmB,GAAzB,IACA,EAAK,IAAI,EAAJ,OAAW,EAAI,SAAS,EAAI,EAAG,EAAI,SAAS,EAAI,GAAI,GAAI,GAC7D,EAAS,IAAI,EAAJ,QAAe,EAAI,SAAS,EAAI,EAAG,EAAI,SAAS,EAAI,GAAI,IACvE,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAI,GAAI,IAAI,EAAJ,QAAS,EAAQ,IAEhD,IAAA,EAAW,CACb,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,GAC5C,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAS,SAAS,IAElD,EAAG,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAG,EAAU,CAAC,MAAO,+BAC3D,EAAG,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAG,CACrC,CAAC,EAAG,EAAG,SAAS,EAAI,GAAI,EAAG,EAAG,SAAS,EAAI,GAAK,EAAE,GAClD,CAAC,EAAG,EAAS,SAAS,EAAI,GAAI,EAAG,EAAG,SAAS,EAAI,GAAK,IACvD,IAIH,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAU,EAAG,EAAU,CAAC,MAAO,+BAG/D,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAO,GAAI,IAE3C,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAmB,EAAE,IAAM,KAAM,EAAG,CAChE,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,OAGjD,EAAK,WAAW,KAAK,EAAI,GAIvB,IAAA,EAAS,EAAmB,GAC7B,IAAI,EAAI,EAAG,GAzLH,EAyLc,IAAK,EACtB,EAAS,EAAiB,IAEzB,WAAW,QAAQ,IAAI,EAAJ,QAAS,EAAQ,EAAG,CAC1C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,GAC/C,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,IAAK,EAAG,EAAO,SAAS,EAAI,IAChC,CAAC,EAAG,IAAK,EAAG,EAAO,SAAS,EAAI,IAChC,CAAC,EAAG,EAAO,SAAS,EAAG,EAAG,EAAO,SAAS,EAAI,KAC/C,CAAC,MAAO,wBAGL,IAAA,EAAS,EAAgB,EArMtB,GAsMT,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAQ,EAAG,CACvC,CAAC,EAAG,EAAO,SAAS,EAAI,EAAG,EAAG,EAAO,SAAS,EAAI,IAClD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,IACnD,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,IAAM,EAAE,GACvC,CAAC,EAAG,EAAO,SAAS,EAAI,GAAI,EAAG,EAAO,SAAS,EAAI,KACpD,IAID,IAAA,EAA6B,GAC9B,IAAI,EAAI,EAAG,GAAK,GAAQ,IAAK,CACxB,IACA,EAAM,IAAI,EAAJ,QAAgB,EAAgB,GAAG,SAAS,EADzC,EACqD,IAAK,IACzE,EAAK,WAAW,KAAK,GACrB,EAAK,iBAAiB,KAAK,GAG3B,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAW,GAAI,CACxC,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,EAAI,SAAS,EAAI,GAAI,EAAG,EAAI,SAAS,EAAI,IAC7C,CAAC,EAAG,IAAK,EAAG,EAAI,SAAS,EAAI,IAC7B,CAAC,EAAG,IAAK,EAAG,EAAU,SAAS,EAAI,IACnC,CAAC,EAAG,EAAU,SAAS,EAAI,EAAU,cAAc,IAAI,EAAG,EAAG,EAAU,SAAS,EAAI,KACrF,CAAC,MAAO,wBAGL,IAAA,EAAO,EAAgB,GAE7B,EAAI,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,CAClC,CAAC,EAAG,EAAI,SAAS,EAFJ,GAEkB,EAAG,EAAI,SAAS,EAFlC,IAGb,CAAC,EAAG,EAAK,SAAS,EAHL,GAhBF,EAmB8B,EAAG,EAAK,SAAS,EAH7C,GAhBF,MAsBf,EAAY,KAAK,GAIf,IAAA,EAAW,IAAI,EAAJ,QAAY,IAAK,GAAI,GAAQ,EAAO,IAC/C,EAAW,IAAI,EAAJ,QAAY,IAAK,GAAI,GAAQ,EAAO,IAC/C,EAAa,IAAI,EAAJ,QAAY,IAAK,IAAK,GAAa,EAAO,IAmCtD,OAlCP,EAAW,KAAK,EAAI,EAAE,EAAW,KAAK,EAItC,EAAK,WAAW,KAAK,EAAO,EAAW,EAAa,EAAU,EAAU,GA8BjE,EAFf,OA1RoC,EAAA,EAAA,GA0RpC,EA1RA,CAAoC,EAApC,SA4Re,EAAA,EAAA,QAAA,QAAA;;AChQA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvCf,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,cAkCe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAhCf,EAAA,SAAA,GACI,SAAA,EAAY,GA+BD,IAAA,EAAA,EA/BX,EACI,EAAA,KAAA,KAAM,IAAO,KAEP,EAAa,IAAI,EAAJ,QAAe,IAAK,IAAK,GAC5C,EAAK,WAAW,KAAK,GAEhB,IAAA,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAClB,IAAA,EAAM,IAAI,EAAJ,QAAa,GAAO,GAAF,EAAM,IACpC,EAAW,WAAW,QAAQ,IAAI,EAAJ,QAAS,EAAK,EAAG,CAC3C,CAAC,EAAG,MAAU,GAAF,EAAM,EAAG,IAAQ,GAAF,GAC3B,CAAC,EAAG,GAAO,GAAF,EAAM,EAAG,IAAQ,GAAF,MAE5B,EAAK,WAAW,KAAK,GAEf,IAAA,EAAO,IAAI,EAAJ,QAAa,IAAQ,GAAF,EAAM,IACtC,EAAW,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAM,EAAG,KAC7C,EAAK,WAAW,KAAK,GAEnB,IAAA,EAAa,GACd,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAClB,IAAA,EAAS,IAAI,EAAJ,QAAc,IAAQ,GAAF,EAAM,KACzC,EAAO,WAAW,KAAK,IAAI,EAAJ,QAAS,EAAY,EAAG,KAC/C,EAAW,KAAK,GASb,OAPP,EAAA,EAAK,kBAAiB,KAAI,MAAA,EAAI,IAC9B,EAAA,EAAK,YAAW,KAAI,MAAA,EAAI,GAExB,EAAK,WAAW,KAAK,IAAI,EAAJ,QAAY,IAAK,IAAK,GAAY,IAIhD,EAFf,OA9BoC,EAAA,EAAA,GA8BpC,EA9BA,CAAoC,EAApC,SAgCe,EAAA,EAAA,QAAA,QAAA;;ACuCL,aA7EV,IAAA,EAAA,EAAA,QAAA,uBAGA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,4BAEA,EAAA,EAAA,QAAA,4BAuEU,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArEV,SAAS,IAEE,OAD2B,SAAS,cAAc,UAK7D,IAAM,EAAe,CAAC,IAAM,KAAM,KAAM,IAAM,IAAK,IAAK,KAExD,SAAS,EAAkB,EAAY,GAC7B,IAAA,EAAU,SAAS,eAAe,GACpC,IAAC,EACK,MAAA,IAAI,MAAM,oBAAsB,EAAK,eAGzC,IAAA,EAAS,IACf,EAAQ,YAAY,GAEd,IAAA,EAAc,IAAI,EAAK,GAC7B,EAAY,SACZ,EAAO,iBAAiB,QAAS,SAAS,GACtC,EAAY,QAAQ,EAAM,QAAS,EAAM,WAGvC,IAAA,EAAW,SAAS,cAAc,OAuBjC,OAtBP,EAAS,UAAY,mGAGU,EAAE,6CAA4C,EAAa,OAAS,GAAC,4FAI5E,EAAE,gDACD,EAAE,+CACJ,EAAE,wBAEzB,EAAS,cAAc,UAAY,GAAK,iBAAiB,SAAU,SAAS,GACxE,EAAY,WAAa,EAAa,OAAQ,EAAM,OAA4B,UAEpF,EAAQ,YAAY,GAEpB,EAAS,cAAc,UAAY,GAAK,iBAAiB,QAAS,EAAY,MAAM,KAAK,IACzF,EAAS,cAAc,WAAa,GAAK,iBAAiB,QAAS,EAAY,OAAO,KAAK,IAC3F,EAAS,cAAc,SAAW,GAAK,iBAAiB,QAAS,EAAY,OAAO,KAAK,IAEzF,EAAY,SAEL,EAKX,IAAI,EAAkC,GAUtC,SAAS,IAEA,IAAA,IAAI,EAAI,EAAG,EAAI,EAAiB,OAAQ,IAAK,CAC1B,EAAiB,GACzB,SAEhB,sBAAsB,GAf1B,EAAiB,KAAK,EAAkB,QAAS,EAAV,UACvC,EAAiB,KAAK,EAAkB,aAAc,EAAf,UAIvC,EAAiB,KAAK,EAAkB,kBAAmB,EAApB,UACvC,EAAiB,KAAK,EAAkB,eAAgB,EAAjB,UAWvC","file":"main.61aeab40.js","sourceRoot":"../src","sourcesContent":["// Exploration.ts\n//\n// This might be something a little more interesting\n\nimport Component, {StateObject} from './Component';\n\nclass Exploration {\n    public canvas: HTMLCanvasElement;\n    public context: CanvasRenderingContext2D;\n    public components: Array<Component>;\n    // The idea is that all components update their state recursively starting here\n    public outputComponents: Array<Component>;\n\n    public paused: boolean = false;\n    public updateTime: number = 1000;\n    public lastUpdated: number = Date.now();\n    public animationFrame: any;\n\n    // Can possibly have an afterRender property\n    public afterRender: (() => void) | null | undefined;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d')!;\n        this.components = [];\n        this.outputComponents = [];\n\n        // default\n        canvas.width = canvas.height = 400;\n\n        // TS-safe way of putting a random debug name\n        let id = Math.floor(Math.random() * 1e6);\n        Object.defineProperty(window, \"exploration\" + id, {\n            value: this,\n        });\n        console.log(id, this);\n    }\n\n    // todo: addComponent() maybe?\n\n    render() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        for (let i = 0; i < this.components.length; i++) {\n            this.context.save();\n            // render wires first\n            const comp = this.components[i];\n            for (let j = 0; j < comp.inputWires.length; j++) {\n                const position = {\n                    x: comp.position.x + comp.inputSockets[j].x,\n                    y: comp.position.y + comp.inputSockets[j].y,\n                };\n                comp.inputWires[j]?.render(this.context, position);\n            }\n            this.components[i].render(this.context);\n            this.context.restore();\n        }\n\n        if (typeof this.afterRender === \"function\") {\n            this.afterRender();\n        }\n    }\n\n    onClick(canvasX: number, canvasY: number) {\n        for (let i = 0; i < this.components.length; i++) {\n            const component = this.components[i];\n            const offsetX = canvasX - component.position.x;\n            const offsetY = canvasY - component.position.y;\n            if (Math.abs(offsetX) < component.size.x/2 && Math.abs(offsetY) < component.size.y/2) {\n                component.onClick(offsetX, offsetY);\n            }\n        }\n\n        // Right now I have nothing better than re-updating the whole tree\n        this.update();\n    }\n\n    pause() {\n        this.paused = true;\n        cancelAnimationFrame(this.animationFrame);\n    }\n\n    resume() {\n        this.paused = false;\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    updateLoop() {\n        // Not paused or turned off, and been long enough since last update\n        if (!this.paused && this.updateTime > 0 && Date.now() - this.lastUpdated > this.updateTime) {\n            this.update();\n        }\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    update() {\n        // call beforeUpdate if needed\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            if (typeof comp.beforeUpdate === \"function\") {\n                comp.beforeUpdate();\n            }\n        }\n\n        // Recursively loop backwards through the tree\n        // stores a hash of component indices because we have to check the same component multiple times\n        // We hash anything that is listed as an output component\n\n        const visitedNodes: {[i: number]: boolean} = {};\n        const savedState = [];\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            const comp = this.outputComponents[i];\n            let old: boolean[] = [];\n            for (let j = 0; j < comp.state.bits.length; j++) {\n                old.push(comp.state.bits[j]);\n            }\n            savedState.push({bits: old});\n        }\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            this.updateComponent(this.outputComponents[i], visitedNodes, savedState);\n        }\n\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            //console.log(\"After Update: \", this.outputComponents[i].position, savedState[i].bits, this.outputComponents[i].state.bits)\n        }\n\n        //console.warn(\"UPDATE FINISHED\");\n\n        this.lastUpdated = Date.now();\n    }\n\n    updateComponent(component: Component,\n        visitedNodes: {[i: number]: boolean},\n        savedState: StateObject[]) {\n        let index = this.components.indexOf(component); // if this gets too slow I can add IDs\n        if (!visitedNodes[index]) {\n            visitedNodes[index] = true; // prevents infinite loops, although cyclic explorations are invalid anyway\n            // has not been visited, so we need to evaluate it\n            //console.log(\"visiting \" + String(index), component);\n            let parentBits = [];\n            for (let i = 0; i < component.inputWires.length; i++) {\n                const wire = component.inputWires[i];\n                if (wire) {\n                    const to = wire.toComponent;\n                    if (!to) {\n                        parentBits.push(false); // null = 0\n                    } else {\n                        this.updateComponent(wire.toComponent, visitedNodes, savedState);\n\n\n                        // all we need is this one bit\n                        // (note: null or missing wires give a 0)\n                        // did we save it?\n                        const ocIndex = this.outputComponents.indexOf(to);\n                        if (ocIndex >= 0) {\n                            //console.log(\"Using saved state\", ocIndex, savedState[ocIndex].bits);\n                            // Use the stored state instead of updating immediately\n                            parentBits.push(savedState[ocIndex].bits[wire.toOutput]);\n                        } else {\n                            parentBits.push(to.state.bits[wire.toOutput]);\n                        }\n                    }\n                } else {\n                    // no wire = 0\n                    parentBits.push(false);\n                }\n            }\n            // Update the component's state.\n            component.state.bits = component.evaluate(parentBits);\n        }\n    }\n};\n\nexport default Exploration;\n","// InputBit.ts\n// Can be clicked to change state\n\nimport Component from './Component';\n\nclass InputBit implements Component {\n    state: {bits: boolean[], active: boolean};\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: [];\n    inputWires: [];\n    outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    constructor(x: number, y: number, value: boolean = false, size: number = 20) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            active: value,\n            bits: [value],\n        };\n\n        this.inputSockets = []; // it is input, it needs no input from elsewhere\n        this.inputWires = [];\n        this.outputSockets = [\n            {x: 0, y: 0}\n        ];\n    }\n    beforeUpdate: undefined;\n\n    render(ctx: CanvasRenderingContext2D) {\n        if (this.state.active !== this.state.bits[0]) {\n            // panic\n            throw new Error(\"[InputBit.render] State does not match bit array\");\n        }\n        ctx.fillStyle = (this.state.active ? \"#33ff33\" : \"#990000\");\n        ctx.strokeStyle = \"2px solid black\";\n        ctx.beginPath();\n        ctx.arc(this.position.x, this.position.y, this.size.x / 2, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n    };\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        console.log(\"[InputBit] clicked\");\n        this.state.active = !this.state.active;\n        this.state.bits[0] = this.state.active;\n        // bits will be updated when everything is\n    };\n\n    evaluate(_: boolean[]): boolean[] {\n        return [this.state.active];\n    }\n}\n\nexport default InputBit;\n","// OutputBit.ts\n// Need a good way to distinguish from InputBits\n\nimport Component from './Component';\nimport Wire from './Wire';\n\nclass OutputBit implements Component {\n    state: { bits: boolean[] };\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: { x: number; y: number; }[];\n    outputSockets: { x: number; y: number; }[];\n    inputWires: Wire[];\n    beforeUpdate: undefined;\n\n    constructor(x: number, y: number, size: number = 20) {\n        this.position = { x: x, y: y };\n        this.size = { x: size, y: size };\n        this.state = { bits: [false] };\n\n        this.inputSockets = [{x: 0, y: 0}];\n        // this might be convenient\n        this.outputSockets = [{x: 0, y: 0}];\n        this.inputWires = [];\n    }\n    render(ctx: CanvasRenderingContext2D): void {\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(left, top, this.size.x, this.size.y);\n        ctx.fillStyle = (this.state.bits[0] ? \"#33ff33\" : \"#990000\");\n        ctx.fillRect(\n            left + this.size.x * 0.1,\n            top + this.size.y * 0.1,\n            this.size.x * 0.8,\n            this.size.y * 0.8\n        );\n    };\n    onClick(offsetX: number, offsetY: number): void {\n        return;\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        //console.log(bits);\n        //console.log(\"evaluating\", this.position);\n        return bits;\n    };\n}\n\nexport default OutputBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Adder implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x, this.position.y + socket.y - 15);\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = \"#333333\";\n            ctx.strokeStyle = (this.state.bits[i] ? '#33ff33' : '#990000');\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += (wire1.toComponent.state.bits[wire1.toOutput] ? 1 : 0) * (1 << i);\n            num2 += (wire2.toComponent.state.bits[wire2.toOutput] ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(String(num1) + \" + \" + String(num2), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        const answer = num1 + num2;\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) > 0;\n        }\n        //console.log(answerBits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        this.state.bits = this.evaluate(this.inputWires.map(wire => (wire ? wire.get() : false)));\n    }\n}\n\nexport default Adder;\n","// Wire.ts\n\nimport Component from \"./Component\"\n\ntype WireOptions = {color?: string};\n\n// not sure a wire really is a component but it uses them\nclass Wire {\n    // I use \"from\" and \"to\" because \"input\" and \"output\" are ambiguous\n    toComponent: Component;\n    toOutput: number;\n\n    color: string;\n\n    // in case you want the wire to bend\n    waypoints: Array<{x: number, y: number}> = [];\n\n    constructor(\n        to: Component,\n        toOutput: number,\n        waypoints: {x: number, y: number}[] = [],\n        options: WireOptions = {}\n    ) {\n        this.toComponent = to;\n        this.toOutput = toOutput;\n        this.waypoints = waypoints;\n\n        this.color = options.color ?? \"#333\";\n    }\n\n    get(): boolean {\n        // empty wire is zero\n        if (!this.toComponent) return false;\n        // coerce undefined to false\n        return this.toComponent.state.bits[this.toOutput] || false;\n    }\n\n    addWaypoint(x: number, y: number) {\n        this.waypoints.push({x: x, y: y});\n    }\n\n    render(ctx: CanvasRenderingContext2D, from: {x: number, y: number}) {\n        if (!this.toComponent) return;\n        ctx.save();\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(from.x, from.y);\n        for (let i = 0; i < this.waypoints.length; i++) {\n            ctx.lineTo(this.waypoints[i].x, this.waypoints[i].y);\n        }\n        const endOffset = this.toComponent.outputSockets[this.toOutput];\n        ctx.lineTo(endOffset.x + this.toComponent.position.x, endOffset.y + this.toComponent.position.y);\n        ctx.stroke();\n        ctx.restore();\n    }\n}\n\nexport default Wire;\n","// Gates.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nabstract class Gate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public rotation: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number, rotation: number, bits: number) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        this.rotation = rotation * Math.PI / 180;\n\n        const cosine = Math.cos(this.rotation);\n        const sine = Math.sin(this.rotation);\n        // transform [±0.3, -0.5]\n        if (bits == 2) {\n            this.inputSockets = [\n                {\n                    x: size * (-0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine - 0.2*sine),\n                },\n                {\n                    x: size * (0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine + 0.2*sine)\n                }\n            ];\n        } else {\n            this.inputSockets = [{\n                x: size * 0.5*sine,\n                y: size * -0.5*cosine,\n            }]\n        }\n\n        this.outputSockets = [\n            {\n                x: size * -0.4*sine,\n                y: size * 0.4*cosine,\n            }\n        ];\n\n        this.inputWires = [];\n    }\n    beforeUpdate: undefined;\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    abstract drawGate(ctx: CanvasRenderingContext2D): void;\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.strokeStyle = \"black\";\n        ctx.lineWidth = 2;\n        ctx.translate(this.position.x, this.position.y);\n        ctx.rotate(this.rotation);\n        // draw the wires coming in\n        ctx.beginPath();\n        if (this.inputSockets.length === 2) {\n            ctx.moveTo(this.size.x * -0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * -0.2, 0);\n            ctx.moveTo(this.size.x * 0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * 0.2, 0);\n            ctx.stroke();\n        }\n\n        this.drawGate(ctx);\n\n        ctx.restore();\n    }\n\n    abstract evaluate(bits: boolean[]): boolean[];\n}\n\nclass AndGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.lineTo(this.size.x * 0.4, 0);\n        ctx.arc(0, 0, this.size.x * 0.4, 0, Math.PI);\n        ctx.lineTo(-this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] && bits[1]];\n    };\n}\n\nclass OrGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0, s * -0.2, s * 0.4, s * -0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] || bits[1]];\n    };\n}\n\nclass XorGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        // do the or's path...\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0, s * -0.15, s * 0.4, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n        // and the extra thing\n        ctx.beginPath();\n        ctx.moveTo(s * -0.4, s * -0.5);\n        ctx.quadraticCurveTo(s * 0, s * -0.3, s * 0.4, s * -0.5);\n        ctx.stroke();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] !== bits[1]];\n    };\n}\n// Doesn't extend Gate because it only has 1 input and is smaller\nclass Not extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 1);\n    }\n\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.y;\n        // wire in\n        ctx.beginPath();\n        ctx.moveTo(0, s * -0.5);\n        ctx.lineTo(0, 0);\n        ctx.stroke();\n        // triangle for the not\n        ctx.beginPath();\n        ctx.moveTo(0, s * 0.2);\n        ctx.lineTo(s * -0.25, s * -0.35);\n        ctx.lineTo(s * 0.25, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n\n        ctx.beginPath();\n        ctx.arc(0, s * 0.3, s * 0.1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.fill();\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        Gate.prototype.render.call(this, ctx);\n    };\n    onClick(offsetX: number, offsetY: number) {};\n    evaluate(bits: boolean[]): boolean[] {\n        return [!bits[0]];\n    };\n}\n\nexport {AndGate, OrGate, XorGate, Not};\n","// Display.ts\n//\n// Given a set of bits, displays its value as a signed or unsigned integer.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Display implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public signed: boolean;\n    public components: Component[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    // note that I'm thinking about using this for InputBits, OutputBits, and RegisterBits\n    // and those only have one state to get\n    constructor(x: number, y: number, components: Component[], signed: boolean = false, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size * 2,\n            y: size\n        };\n        this.signed = signed;\n        this.components = components;\n\n        this.state = {\n            // unused\n            bits: [],\n        };\n        // unused, it doesn't use wires because they make visual clutter\n        this.inputSockets = [];\n        this.outputSockets = [];\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,               top);\n        ctx.lineTo(left + this.size.x, top);\n        ctx.lineTo(left + this.size.x, top + this.size.y);\n        ctx.lineTo(left,               top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // get the state\n        let totalValue = 0;\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            const value = (comp.state.bits[0] ? 1 : 0) << i;\n            // use 2's complement if signed on the last bit\n            totalValue += (this.signed && i == this.components.length-1) ? -value : value;\n        }\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.font = Math.round(this.size.y*4/5) + \"px monospace\";\n        ctx.fillStyle = \"#000\";\n        ctx.fillText(String(totalValue), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        return [];\n    }\n}\n\nexport default Display;\n","// AdderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\nimport Display from './Display';\n\nclass AdderExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 600;\n        canvas.height = 400;\n\n        const adder = new Adder(120, 200, 4);\n        this.components.push(adder);\n\n        for (let i = 0; i < 4; i++) {\n            const bit = new InputBit(adder.position.x - 100 + i*25, 30);\n            adder.inputWires.unshift(new Wire(bit, 0, [\n                {x: bit.position.x + 12.5, y: 120 - i*20},\n                {x: bit.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit);\n\n            const bit2 = new InputBit(adder.position.x + 100 - i*25, 30);\n            adder.inputWires.push(new Wire(bit2, 0, [\n                {x: bit2.position.x - 12.5, y: 120 - i*20},\n                {x: bit2.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit2);\n        }\n\n        for (let i = 0; i < 4; i++) {\n            const output = new OutputBit(adder.position.x + 37.5 - i*25, 300);\n            output.inputWires.push(new Wire(adder, i, []));\n            this.components.push(output);\n            this.outputComponents.push(output);\n        }\n\n        let rightInputA = [];\n        let rightInputB = [];\n        let rightOutput = [];\n        let carryOuts = [];\n        for (let i = 0; i < 4; i++) {\n            const bitA = new InputBit(530 - i*80, 30);\n            rightInputA.push(bitA);\n\n            const bitB = new InputBit(570 - i*80, 90);\n            rightInputB.push(bitB);\n\n            // full adder\n            const x1 = (bitA.position.x + bitB.position.x)/2;\n            const y1 = bitB.position.y + 60;\n            const and = new AndGate(x1 - 20, y1, 24, 0);\n            and.inputWires.push(new Wire(bitA, 0, []));\n            and.inputWires.push(new Wire(bitB, 0, []));\n            const xor = new XorGate(x1 + 20, y1, 24, 0);\n            xor.inputWires.push(new Wire(bitA, 0, []));\n            xor.inputWires.push(new Wire(bitB, 0, []));\n\n            const outBit = new OutputBit(x1, 300, 20);\n            rightOutput.push(outBit);\n\n            if (i > 0) {\n                // need a second phase of the adder\n                const and2 = new AndGate(x1 - 10, y1 + 50, 24, 0);\n                and2.inputWires.push(new Wire(xor, 0, []));\n                and2.inputWires.push(new Wire(carryOuts[i-1], 0, []));\n\n                const xor2 = new XorGate(x1 + 15, y1 + 70, 24, 0);\n                xor2.inputWires.push(new Wire(xor, 0, []));\n                xor2.inputWires.push(new Wire(carryOuts[i-1], 0, []));\n\n                const or2 = new OrGate(x1 - 20, y1 + 80, 24, 0);\n                or2.inputWires.push(new Wire(and, 0, []));\n                or2.inputWires.push(new Wire(and2, 0, []));\n\n                carryOuts[i] = or2;\n                outBit.inputWires.push(new Wire(xor2, 0, []));\n                this.components.push(or2, and2, xor2);\n            } else {\n                carryOuts[i] = and;\n                outBit.inputWires.push(new Wire(xor, 0, []));\n            }\n\n            this.components.push(and, xor, outBit);\n        }\n\n        const finalCarry = new OutputBit(250, 250, 20);\n        finalCarry.inputWires.push(new Wire(carryOuts[3], 0, []));\n        rightOutput.push(finalCarry);\n\n        this.components.push(finalCarry, ...rightInputA, ...rightInputB);\n\n        const displayA = new Display(570, 30, rightInputA);\n        const displayB = new Display(570, 90, rightInputB);\n        const displayResult = new Display(400, 350, rightOutput, false, 40);\n\n        this.components.push(displayA, displayB, displayResult);\n\n        this.outputComponents.push(...rightOutput);\n    }\n}\n\nexport default AdderExploration;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass RegisterBit implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        // [0] is the off switch and [1] is the on switch\n        const offset = size * 0.44;\n        this.inputSockets = [\n            {x: -offset, y: -offset},\n            {x:  offset, y: -offset}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = this.state.bits[0] ? \"#33ff33\" : \"#990000\";\n        ctx.beginPath();\n        ctx.moveTo(this.size.x*0.5, 0);\n        ctx.lineTo(this.size.x*1.0, this.size.y*0.5);\n        ctx.lineTo(this.size.x*0.5, this.size.y);\n        ctx.lineTo(this.size.x*0.0, this.size.y*0.5);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // red input\n        ctx.fillStyle = \"#ccffff\";\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.25, this.size.y * 0.25, this.size.x * 0.25, 135*Math.PI/180, 315*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();\n        /*ctx.fillStyle = \"#33ff33\";\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.75, this.size.y * 0.25, this.size.x * 0.25, -135*Math.PI/180, 45*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();*/\n        if (this.inputWires[0] && this.inputWires[0].get()) {\n            ctx.beginPath();\n            ctx.moveTo(this.size.x * 0.75, this.size.y * 0.25);\n            ctx.lineTo(this.size.x * 1.0, 0);\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return bits[0] ? [bits[1]] : this.state.bits;\n    }\n}\n\nexport default RegisterBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass Subtractor implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits + 1);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x*0.46, top);\n        ctx.lineTo(left + this.size.x*0.5,  top + this.size.x*0.05);\n        ctx.lineTo(left + this.size.x*0.54, top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x*0.95, this.position.y + socket.y + 10);\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = \"#333333\";\n            ctx.strokeStyle = (this.state.bits[i] ? '#33ff33' : '#990000');\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += (wire1.toComponent.state.bits[wire1.toOutput] ? 1 : 0) * (1 << i);\n            num2 += (wire2.toComponent.state.bits[wire2.toOutput] ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(String(num1) + \" - \" + String(num2), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        const answer = num1 - num2;\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) != 0;\n        }\n        //console.log(answerBits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        this.state.bits = this.evaluate(this.inputWires.map(wire => (wire ? wire.get() : false)));\n    }\n}\n\nexport default Subtractor;\n","// Clock.ts\n//\n// These clocks can have an arbitrary period.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass ChoiceGate implements Component {\n    public state: {bits: boolean[], clock: number};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    //\n    constructor(x: number, y: number, bits: number, width: number = 100, height: number = 50) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n        // because .fill() isn't supported?!\n        const bitArray: boolean[] = Array(bits).map(_ => false);\n        this.state = {\n            bits: bitArray,\n            clock: -1,\n        };\n        this.numBits = bits;\n        // \"power supply\" or more accurately a way to reset the clock\n        this.inputSockets = [\n            {x: 0, y: -this.size.y/2 - 1},\n        ];\n\n        this.outputSockets = [];\n        const spacing = width / bits;\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: (i - bits/2 + 1/2) * spacing,\n                y: this.size.y/2,\n            });\n        }\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        let r = Math.min(this.size.y * 0.2, this.size.x * 0.1);\n        const w = this.size.x, h = this.size.y;\n        ctx.moveTo(w*0.5, 0);\n        ctx.arcTo(w*1.0, 0, w*1.0, h*0.5, r);\n        ctx.arcTo(w*1.0, h*1.0, w*0.5, h*1.0, r);\n        ctx.arcTo(0, h*1.0, 0, h*0.5, r);\n        ctx.arcTo(0, 0, w*0.5, 0, r);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // power\n        ctx.translate(w/2, 0); // move origin to top-middle\n        ctx.beginPath();\n        ctx.moveTo(2, -5);\n        ctx.lineTo(2, -1);\n        ctx.lineTo(-2, -1);\n        ctx.lineTo(-2, -5);\n        ctx.stroke();\n\n        // clock\n        ctx.fillStyle = \"#e0e0e4\";\n        r = Math.min(w/3, h/3);\n        ctx.translate(0, h/2); // move origin to center\n        ctx.beginPath();\n        ctx.arc(0, 0, r, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n\n        // ticks\n        ctx.save();\n        const angle = 2*Math.PI / this.numBits;\n        for (let i = 0; i < this.numBits; i++) {\n            ctx.beginPath();\n            ctx.moveTo(0, -r);\n            ctx.lineTo(0, -r * 0.8 + 1);\n            ctx.stroke();\n\n            ctx.rotate(angle);\n        }\n        ctx.restore();\n\n        // hand\n        ctx.save();\n        ctx.rotate(this.state.clock * angle);\n        ctx.lineWidth *= 3;\n        ctx.lineCap = \"round\";\n        ctx.beginPath();\n        ctx.moveTo(0, r*0.25);\n        ctx.lineTo(0, -r * 0.8);\n        ctx.stroke();\n        ctx.lineWidth *= 5/3;\n        ctx.beginPath();\n        ctx.arc(0, 0, 1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.restore();\n\n        // outputs\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            const socket = this.outputSockets[i];\n            ctx.fillStyle = (i == this.state.clock) ? \"#33ff33\" : \"#990000\";\n            ctx.beginPath();\n            ctx.arc(socket.x, socket.y, 5, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // Evaluation: the clock's state is set on\n    evaluate(bits: boolean[]): boolean[] {\n        let result = [];\n        for (let i = 0; i < this.numBits; i++) {\n            result.push(i == this.state.clock);\n        }\n        return result;\n    }\n\n    beforeUpdate() {\n        if (this.inputWires[0]?.get()) {\n            this.state.clock = (this.state.clock + 1) % this.numBits;\n        } else {\n            this.state.clock = -1;\n        }\n    }\n}\n\nexport default ChoiceGate;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nclass ChoiceGate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: (Wire | null)[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size*2,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n        const offset = size * 0.5;\n        this.inputSockets = [\n            {x: -this.size.x * 1/3, y: 0},\n            {x: -offset, y: -this.size.y/2},\n            {x: +offset, y: -this.size.y/2}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick(_offsetX: number, _offsetY: number): void {\n        return;\n    };\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(this.size.x*1.0, 0);\n        ctx.lineTo(this.size.x*0.67, this.size.y);\n        ctx.lineTo(this.size.x*0.33, this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // red input\n        const sx = this.size.x;\n        ctx.fillStyle = \"rgb(0, 204, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.25, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n        ctx.fillStyle = \"rgb(153, 0, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.75, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] ? bits[1] : bits[2]];\n    }\n}\n\nexport default ChoiceGate;\n","// DividerExploration.ts\n\n/*\n\nsteps:\n1. Start with dividend (numerator) in RIGHT half of remainder register\n2. Shift the remainder left\n3. Send the LEFT half in for subtraction\n4. If the result is negative, write it, else keep the remainder as is\n5. Put the opposite of the sign bit on the new 1 position\n6. Go back to step 2, although when the larger clock strikes, record the results (I expect it to be 2*6+3 or 3*6+5 cycles).\n\nnext steps:\n- carry from the subtractor needs to enter the choice gates\n- on purple, we get the subtraction results, and if the sign bit is off, we insert it into the register\n- also on purple, that sign bit needs to shift the LEFT\n\nI think I need to totally reconfigure the remainder part\n\nRemainder register:\n- If power button is off, set to zero (6-12) or numerator (0-5)\n- If power button is on:\n    - on purple we may receive a subtraction, but this only applies to bits 6-12\n    - on green we need to shift left, setting a carry bit. (This will require an additional register.)\n\n\n\n*/\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Subtractor from './Subtractor';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, OrGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\n\nclass DividerExploration extends Exploration {\n    countdown: Clock;\n    remainderRight: number;\n    remainderSpacing: number;\n    startButton: InputBit;\n    numBits: number;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 800;\n        canvas.height = 600;\n\n        // A lot of the same stuff happens compared to Multiplier...\n\n        const BITS = 6;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(695, 40, false, 50);\n        this.startButton = startButton;\n        const startNot = new Not(startButton.position.x - 50, 40, 30, 90);\n        startNot.inputWires.push(new Wire(startButton, 0));\n        this.components.push(startNot);\n\n        const clockX = 690;\n\n        const clockAnd = new AndGate(clockX, 100, 25, 0);\n        const clockNot = new Not(clockX, 150, 25, 0);\n        const clockBit = new OutputBit(clockX, 200);\n\n        clockAnd.inputWires.push(new Wire(clockNot, 0, [\n            {x: clockX - 5, y: 75},\n            {x: clockX - 20, y: 75},\n            {x: clockX - 20, y: 175},\n            {x: clockX, y: 175}\n        ]));\n        clockAnd.inputWires.push(new Wire(startButton, 0));\n        clockBit.inputWires.push(new Wire(clockNot, 0));\n        clockNot.inputWires.push(new Wire(clockAnd, 0));\n        this.components.push(clockAnd, clockNot, clockBit);\n        this.outputComponents.push(clockBit);\n\n        // ironic that I called the above a \"clock\"\n        // when the clock strikes 2*BITS + 4 it will end the operation\n        // but I add one more to avoid confusion\n        const countdown = new Clock(750, 230, 2*BITS + 4, 80, 50);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: countdown.position.x, y: 40},\n        ]));\n        this.countdown = countdown;\n\n        const subtractor = new Subtractor(210, 180, BITS, 260, 80);\n        //this.outputComponents.push(subtractor);\n\n        // Also not really a register.\n        let remainderRegister = [];\n        this.remainderRight = 680;\n        this.remainderSpacing = 52;\n        for (let i = 0; i < 2*BITS+1; i++) {\n            const reg = new OutputBit(this.remainderRight - this.remainderSpacing*i, 460, 20);\n            remainderRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.25)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n        const blue = {color: \"rgba(32, 64, 128, 0.8)\"};\n        const blueFaded = {color: \"rgba(32, 64, 128, 0.4)\"};\n        const yellow = {color: \"rgba(160, 160, 0)\"};\n\n        // Input Numbers (N/D). D = divisor, N = dividend\n        let inputN = [];\n        let inputD = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(340 - i*25, 40);\n            this.components.push(input);\n            inputN.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(340 - i*25, 110);\n            this.components.push(input);\n            inputD.push(input);\n        }\n\n        // Wires from the registers to the subtractor.\n        for (let i = 0; i < BITS; i++) {\n            const d = 3;\n            const bit = remainderRegister[i + BITS];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            const y2 = subtractor.position.y - 70;\n            subtractor.inputWires.push(new Wire(bit, 0, [\n                {x: subtractor.position.x + subtractor.inputSockets[i].x - 30 + d*i, y: y2 + d*i},\n                {x: 10 + d*i, y: y2 + d*i},\n                {x: 10 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\"}));\n        }\n        // The other subtractor registers (to the divisor)\n        for (let i = 0; i < BITS; i++) {\n            subtractor.inputWires.push(new Wire(inputD[i], 0));\n        }\n\n        // Choice Gates coming out of the subtractor (writes if subtracted).\n        let subtractorChoiceGates = [];\n        for (let i = 0; i < BITS; i++) {\n            const x = subtractor.position.x + subtractor.outputSockets[i].x;\n            const y = subtractor.position.y + subtractor.outputSockets[0].y; // put them all on the same line\n            // space them a bit\n            const choice = new ChoiceGate(remainderRegister[i+BITS].position.x, y + 50, 10);\n            // choice depends on whether or not the carry bit is positive or negative\n            choice.inputWires.push(new Wire(subtractor, BITS, [\n                {x: choice.position.x - 15, y: choice.position.y},\n                {x: choice.position.x - 15, y: choice.position.y - 20},\n                {x: subtractor.position.x - subtractor.size.x/2, y: choice.position.y - 20},\n                {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y},\n            ], {color: \"#888\"}));\n            // if negative, we just re-use the remainder register\n            const regBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(regBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: choice.position.x + 20, y: choice.position.y - 10},\n                {x: choice.position.x + 20, y: regBit.position.y},\n            ], purple));\n            // otherwise we use the subtraction\n            choice.inputWires.push(new Wire(subtractor, i, [\n                {x: choice.position.x + 5, y: choice.position.y - 30},\n            ]));\n            subtractorChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Remainder Register\n        // includes many wires\n        // also includes register for holding the quotient input\n        const fullRow = [];\n        for (let i = 0; i <= 2*BITS; i++) {\n            const regBit = remainderRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            // This is the middle (full) row\n            const choice = new ChoiceGate(regBit.position.x + (i < BITS ? 5 : -1), regBit.position.y - 100, 14);\n            // Selection Wire (from clock's NOT)\n            choice.inputWires.push(new Wire(clockAnd, 0, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 40},\n                {x: 580 - 2*i, y: choice.position.y - 50 - 1*i},\n            ], purpleFaded));\n            // Purple action\n            if (i >= BITS && i < 2*BITS) {\n                // Upper Half of the Register: Conditionally connect to the subtractor.\n                choice.inputWires.push(new Wire(subtractorChoiceGates[i - BITS], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: choice.position.x - 7, y: choice.position.y - 25},\n                    {x: regBit.position.x - 19, y: choice.position.y - 25},\n                    {x: regBit.position.x - 19, y: regBit.position.y},\n                ], purple));\n            }\n            // Shifting\n            if (i > 0) {\n                choice.inputWires.push(new Wire(remainderRegister[i-1], 0, [\n                    {x: choice.position.x + 7, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: regBit.position.y + 0},\n                ], teal));\n            } else {\n                const holdWrite = new OutputBit(choice.position.x + 30, choice.position.y - 25, 20);\n                const notY = subtractorChoiceGates[0].position.y - 20;\n                const not = new Not(500, notY, 30, -90);\n                not.inputWires.push(new Wire(subtractor, BITS, [\n                    {x: subtractor.position.x - subtractor.size.x/2, y: notY},\n                    {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y}\n                ], {color: \"#888\"}));\n                // set on green\n                //holdWrite.inputWires.push(new Wire(clockNot, 0, [], teal));\n                // value is negated result of subtraction\n                holdWrite.inputWires.push(new Wire(not, 0, [], teal));\n                // maybe?\n                //choice.inputWires[1] = new Wire(holdWrite, 0, [], purple);\n                choice.inputWires.push(new Wire(holdWrite, 0, [], teal));\n                this.components.push(not, holdWrite);\n                this.outputComponents.push(holdWrite);\n            }\n\n            this.components.push(choice);\n            fullRow.push(choice);\n        }\n\n        // Computing the Quotient\n\n        // The second input register that is actually a register.\n        /*let divisorRegister: RegisterBit[] = [];\n        let divisorRegisterChoice = [];\n        for (let i = 0; i < BITS; i++) {\n            const reg = new RegisterBit(inputD[i].position.x - 4, 150, 20);\n            subtractor.inputWires.push(new Wire(reg, 0));\n            divisorRegister.push(reg);\n            this.components.push(reg);\n            this.outputComponents.push(reg);\n        }\n        // Wiring Divisor (denominator) to the Registers\n        for (let i = 0; i < BITS; i++) {\n            const reg = divisorRegister[i];\n            const or = new OrGate(reg.position.x - 9, reg.position.y - 25, 20, 0);\n            const choice = new ChoiceGate(reg.position.x + 9, reg.position.y - 55, 12);\n            reg.inputWires.push(new Wire(or, 0), new Wire(choice, 0));\n\n            const wirePath = [\n                {x: reg.position.x - 13, y: choice.position.y},\n                {x: reg.position.x - 13, y: startNot.position.y},\n            ];\n            or.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n            or.inputWires.push(new Wire(clockNot, 0, [\n                {x: or.position.x + 10, y: or.position.y - 18 - i/2},\n                {x: clockNot.position.x - 40, y: or.position.y - 18 - i},\n            ], tealFaded));\n\n            // choice gate is [0] ? [1] : [2]\n            // the selection comes first\n            choice.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n\n            // If the clock is off, the registers need to use the input bits\n            choice.inputWires.push(new Wire(inputD[i], 0));\n            // Else, move up\n            choice.inputWires.push(new Wire(divisorRegister[i+1] || null, 0, [\n                {x: reg.position.x + 15, y: choice.position.y - 15},\n                {x: reg.position.x - 22, y: choice.position.y - 15},\n                {x: reg.position.x - 22, y: reg.position.y + 10},\n            ]));\n\n            this.components.push(or, choice);\n        }*/\n\n        // Wiring Dividend to seed the remainder register\n        // (blue wires)\n        let dividendChoice: ChoiceGate[] = [];\n        for (let i = 0; i < BITS; i++) {\n            const regBit = remainderRegister[i];\n            const inBit = inputN[i];\n\n            // This is the one close to the lowest 6 registers\n            const choice = new ChoiceGate(regBit.position.x + 3, regBit.position.y - 50, 12);\n            // Wire coming from the start button\n            choice.inputWires.push(new Wire(startButton, 0, [\n                {x: choice.position.x - 15, y: choice.position.y},\n                {x: choice.position.x - 15, y: choice.position.y + 15},\n                {x: 770, y: choice.position.y + 15},\n                {x: 770, y: countdown.position.y + 40},\n                {x: clockX - 30, y: countdown.position.y + 40},\n                {x: clockX - 30, y: startButton.position.y + (startButton.position.x - clockX + 30)},\n            ], blue));\n\n            // If power is on, make it come from the teal/purple stuff\n            choice.inputWires.push(new Wire(fullRow[i], 0));\n\n            // Otherwise, set it to the input\n            const d = 3;\n            const y1 = countdown.position.y + 50;\n            const y2 = inBit.position.y + 30;\n            choice.inputWires.push(new Wire(inBit, 0, [\n                {x: choice.position.x + 6, y: choice.position.y - 10 - d*i},\n                {x: 760 - d*i, y: choice.position.y - 10 - d*i},\n                {x: 760 - d*i, y: y1 + d*i},\n                {x: clockX - 40 - d*i, y: y1 + d*i},\n                {x: clockX - 40 - d*i, y: y2 + d*i},\n                {x: inBit.position.x, y: y2 + d*i},\n            ], blueFaded));\n\n            this.components.push(choice);\n            dividendChoice.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Clearing the \"remainder\" (heh heh) of the register\n        // (blue wires)\n        for (let i = 0; i <= BITS; i++) {\n            const regBit = remainderRegister[i + BITS];\n            const and = new AndGate(regBit.position.x, regBit.position.y - 50, 24, 0);\n            // similar to above, use the full row if the power is on\n            and.inputWires.push(new Wire(fullRow[i+BITS], 0));\n            and.inputWires.push(new Wire(startButton, 0, [\n                {x: and.position.x + 5, y: and.position.y - 20},\n                {x: and.position.x + 13, y: and.position.y - 20},\n                {x: and.position.x + 13, y: and.position.y + 15},\n                {x: 770, y: and.position.y + 15},\n                {x: 770, y: countdown.position.y + 40},\n                {x: clockX - 30, y: countdown.position.y + 40},\n                {x: clockX - 30, y: startButton.position.y + (startButton.position.x - clockX + 30)},\n            ], blue));\n\n            this.components.push(and);\n            regBit.inputWires.push(new Wire(and, 0));\n        }\n\n        // Control Wire from the final register bit to the subtractor's output\n        /*const regLSB = divisorRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = subtractorChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 282, y: choice.position.y - 20},\n                {x: 282, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"rgb(127, 127, 127)\"}));\n            choice.inputWires.unshift(null);\n\n            // Else wire\n            const outBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: outBit.position.y - 19},\n            ], purpleFaded));\n        }*/\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i < 2*BITS; i++) {\n            const offset = (i < BITS ? 5 : -10);\n            const from = remainderRegister[i + (i >= BITS ? 1 : 0)];\n            const bit = new RegisterBit(from.position.x + offset, 580, 25);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 14th clock cycle\n            bit.inputWires.push(new Wire(countdown, 14, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: 790, y: bit.position.y - 30},\n                {x: 790, y: countdown.position.y + 40},\n                {x: countdown.position.x + countdown.outputSockets[14].x, y: countdown.position.y + 40},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const diagonal = 15;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayN = new Display(inputN[0].position.x + 50, inputN[0].position.y, inputN, false, 30);\n        const displayD = new Display(inputD[0].position.x + 50, inputD[0].position.y, inputD, false, 30);\n        const displayQ = new Display(557, 540, finalAnswer.slice(0, BITS), false, 30);\n        const displayR = new Display(200, 540, finalAnswer.slice(BITS, 2*BITS), false, 30);\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(subtractor, countdown, startButton, displayN, displayD, displayQ, displayR);\n    }\n\n    drawRemainderGuide(left: number, right: number, color: string, text: string) {\n        const ctx = this.context;\n        const x1 = (this.remainderRight - left*this.remainderSpacing) - 15;\n        const x2 = (this.remainderRight - right*this.remainderSpacing) + 15;\n        const y = 480;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"none\";\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x1 + 10, y + 10);\n        ctx.lineTo(x2 - 10, y + 10);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.33)\";\n        ctx.fillStyle = color;\n        ctx.font = \"30px monospace\";\n        ctx.strokeText(text, (x1 + x2)/2, y + 25);\n        ctx.fillText(text, (x1 + x2)/2, y + 25);\n    }\n\n    afterRender = () => {\n        // display the quotient\n        const ctx = this.context;\n        ctx.save();\n\n        // get the clock cycle\n        const cycle = this.countdown.state.clock;\n        if (cycle >= 0 && cycle < 2*this.numBits+3) {\n            const n = (cycle+1) >> 1;\n            this.drawRemainderGuide(n + 5, n + 0, \"#33c\", \"Remainder\");\n\n            if (n > 1) {\n                this.drawRemainderGuide(n-2, Math.max(n-7, 0), \"#990\", \"Quotient\");\n            }\n        }\n\n        ctx.restore();\n\n        // not sure where to put this\n        if (cycle == 2 * this.numBits + 3) {\n            this.startButton.state.active = false;\n            this.startButton.state.bits = [false];\n        }\n    }\n}\n\nexport default DividerExploration;\n","// MultiplierExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, OrGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\n\nclass MultiplierExploration extends Exploration {\n    countdown: Clock;\n    regSpacing: number;\n    regRight: number;\n    numBits: number;\n    startButton: InputBit;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 800;\n        canvas.height = 600;\n\n        const BITS = 6;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(760, 40, false, 50);\n        this.startButton = startButton;\n        const startNot = new Not(680, 40, 30, 90);\n        startNot.inputWires.push(new Wire(startButton, 0));\n        this.components.push(startNot);\n\n        const clockX = 755;\n\n        const clockAnd = new AndGate(clockX, 100, 25, 0);\n        const clockNot = new Not(clockX, 150, 25, 0);\n        const clockBit = new OutputBit(clockX, 200);\n\n        clockAnd.inputWires.push(new Wire(clockNot, 0, [\n            {x: clockX - 5, y: 75},\n            {x: clockX - 20, y: 75},\n            {x: clockX - 20, y: 175},\n            {x: clockX, y: 175}\n        ]));\n        clockAnd.inputWires.push(new Wire(startButton, 0));\n        clockBit.inputWires.push(new Wire(clockNot, 0));\n        clockNot.inputWires.push(new Wire(clockAnd, 0));\n        this.components.push(clockAnd, clockNot, clockBit);\n        this.outputComponents.push(clockBit);\n\n        // ironic that I called the above a \"clock\"\n        // when the clock strikes 2*BITS + 1 it will end the operation\n        const countdown = new Clock(730, 260, 14, 80, 50);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: 705, y: countdown.position.y - 40},\n            {x: 705, y: 40},\n        ]));\n        this.countdown = countdown;\n\n        const adder = new Adder(180, 190, BITS, 270, 90);\n        //this.outputComponents.push(adder);\n\n        // The \"Register\" that really isn't.\n        // The Add and Shift steps should be successfully separated...\n        let productRegister = [];\n        this.regRight = 730;\n        this.regSpacing = 55;\n        for (let i = 0; i < 2*BITS+1; i++) {\n            const reg = new OutputBit(this.regRight - this.regSpacing*i, 430, 20);\n            productRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.4)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n\n        // Wires from the registers to the adder.\n        for (let i = 0; i < BITS; i++) {\n            const d = 3;\n            const bit = productRegister[i + BITS];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            adder.inputWires.push(new Wire(bit, 0, [\n                {x: adder.position.x + adder.inputSockets[i].x, y: 110 + d*i},\n                {x: 10 + d*i, y: 110 + d*i},\n                {x: 10 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\"}));\n        }\n\n        // And Gates coming out of the adder (for the clock).\n        let adderChoiceGates = [];\n        for (let i = 0; i <= BITS; i++) {\n            // and gate\n            //const x = adder.position.x + adder.outputSockets[i].x;\n            const y = adder.position.y + adder.outputSockets[0].y; // put them all on the same line\n            // space them a bit\n            const choice = new ChoiceGate(productRegister[i+BITS].position.x + 7, y + 50, 10);\n            // this will be input 0 temporarily but we will unshift later\n            choice.inputWires.push(new Wire(adder, i));\n            adderChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Multiplication Register\n        for (let i = 0; i < 2*BITS + 1; i++) {\n            const regBit = productRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            const choice = new ChoiceGate(regBit.position.x, regBit.position.y - 60, 14);\n            // Selection Wire (from clock's NOT)\n            choice.inputWires.push(new Wire(clockNot, 0, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 24},\n                {x: 630 - 2*i, y: choice.position.y - 60 - i},\n            ], tealFaded));\n            // Shifting\n            if (i < 2*BITS) {\n                choice.inputWires.push(new Wire(productRegister[i+1], 0, [\n                    {x: regBit.position.x - 7, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: regBit.position.y},\n                ], teal));\n            } else {\n                choice.inputWires.push(null);\n            }\n            if (i >= BITS) {\n                // Upper Half of the Register: Conditionally connect to the adder.\n                choice.inputWires.push(new Wire(adderChoiceGates[i - BITS], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: regBit.position.x + 7, y: choice.position.y - 20},\n                    {x: regBit.position.x + 20, y: choice.position.y - 20},\n                    {x: regBit.position.x + 20, y: regBit.position.y},\n                ], purple));\n            }\n\n            this.components.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Input Numbers (A and B).\n        let inputA = [];\n        let inputB = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(320 - i*30, 60, false, 25);\n            this.components.push(input);\n            adder.inputWires.push(new Wire(input, 0));\n            inputA.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(630 - i*50, 60, false, 25);\n            this.components.push(input);\n            inputB.push(input);\n        }\n\n        // The second input register that is actually a register.\n        let multiplierRegister: RegisterBit[] = [];\n        let multiplierRegisterChoice = [];\n        for (let i = 0; i < BITS; i++) {\n            const reg = new RegisterBit(inputB[i].position.x - 4, 170, 20);\n            multiplierRegister.push(reg);\n            this.components.push(reg);\n            this.outputComponents.push(reg);\n        }\n        // Wiring to the Registers\n        for (let i = 0; i < BITS; i++) {\n            const reg = multiplierRegister[i];\n            const or = new OrGate(reg.position.x - 9, reg.position.y - 25, 20, 0);\n            const choice = new ChoiceGate(reg.position.x + 9, reg.position.y - 60, 12);\n            reg.inputWires.push(new Wire(or, 0), new Wire(choice, 0));\n\n            const wirePath = [\n                {x: reg.position.x - 13, y: choice.position.y},\n                {x: reg.position.x - 13, y: startNot.position.y},\n            ];\n            or.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n            or.inputWires.push(new Wire(clockNot, 0, [\n                {x: or.position.x + 10, y: or.position.y - 18 - i/2},\n                {x: clockNot.position.x - 40, y: or.position.y - 18 - i},\n            ], tealFaded));\n\n            // choice gate is [0] ? [1] : [2]\n            // the selection comes first\n            choice.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n\n            // If the clock is off, the registers need to use the input bits\n            choice.inputWires.push(new Wire(inputB[i], 0));\n            // Otherwise hold\n            choice.inputWires.push(new Wire(multiplierRegister[i+1] || null, 0, [\n                {x: reg.position.x + 15, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y + 10},\n            ]));\n\n            this.components.push(or, choice);\n        }\n\n        // Control Wire from the final register bit to the adder's output\n        const regLSB = multiplierRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = adderChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 400, y: choice.position.y - 20},\n                {x: 400, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"rgb(127, 127, 127)\"}));\n\n            // Else wire\n            const outBit = productRegister[i + BITS];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 4, y: choice.position.y - 10},\n                {x: choice.position.x + 11, y: choice.position.y - 10},\n                {x: outBit.position.x + 18, y: 305 + 2*i},\n                {x: outBit.position.x + 18, y: outBit.position.y - 18},\n            ], purpleFaded));\n        }\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i <= 2*BITS; i++) {\n            const offset = 5;\n            const bit = new RegisterBit(productRegister[i].position.x + offset, 530, 30);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 12th clock cycle\n            bit.inputWires.push(new Wire(countdown, 12, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: 780, y: bit.position.y - 30},\n                {x: 780, y: countdown.position.y + 40},\n                {x: countdown.position.x + countdown.outputSockets[12].x, y: countdown.position.y + 40},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const from = productRegister[i];\n            const diagonal = 16;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayA = new Display(245, 25, inputA, false, 30);\n        const displayB = new Display(510, 20, inputB, false, 30);\n        const displayEnd = new Display(400, 575, finalAnswer, false, 48);\n        displayEnd.size.x = 2*displayEnd.size.y;\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(adder, countdown, startButton, displayA, displayB, displayEnd);\n    }\n\n    afterRender = () => {\n        const ctx = this.context;\n\n        const cycle = this.countdown.state.clock;\n        if (cycle >= 0) {\n            const n = 5 - ((cycle + 1) >> 1);\n            if (n >= 0) {\n                ctx.fillStyle = \"rgba(255,255,255,0.75)\";\n                const west = (this.regRight - this.regSpacing * n) - 20;\n                const north = 340, south = 480;\n                const east = (this.regRight) + 22;\n                ctx.beginPath();\n                ctx.moveTo(west, north);\n                ctx.lineTo(east, north);\n                ctx.lineTo(east, south);\n                ctx.lineTo(west, south);\n                ctx.fill();\n            }\n        }\n\n        if (cycle == 2*this.numBits + 1) {\n            this.startButton.state.active = false;\n            this.startButton.state.bits = [false];\n        }\n    }\n}\n\nexport default MultiplierExploration;\n","// SubtractorExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Subtractor from './Subtractor';\nimport Wire from './Wire';\nimport Display from './Display';\n\nclass SubtractorExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n\n        const subtractor = new Subtractor(200, 200, 4);\n        this.components.push(subtractor);\n\n        for (let i = 0; i < 4; i++) {\n            const bit = new InputBit(40 + i*40, 30);\n            subtractor.inputWires.unshift(new Wire(bit, 0, [\n                {x: 112.5 + i*25, y: 120 - i*20},\n                {x: 40 + i*40, y: 120 - i*20},\n            ]));\n            this.components.push(bit);\n\n            const bit2 = new InputBit(360 - i*40, 40);\n            subtractor.inputWires.push(new Wire(bit2, 0, []));\n            this.components.push(bit2);\n        }\n        const outputBits = [];\n        for (let i = 0; i < 5; i++) {\n            const output = new OutputBit(245 - i*30, 300);\n            output.inputWires.push(new Wire(subtractor, i, []));\n            outputBits.push(output);\n        }\n        this.outputComponents.push(...outputBits);\n        this.components.push(...outputBits);\n\n        this.components.push(new Display(200, 330, outputBits, true));\n    }\n}\n\nexport default SubtractorExploration;\n","\nimport Exploration from './Exploration';\n//import TestExploration from './TestExploration';\nimport AdderExploration from './AdderExploration';\nimport ChoiceExploration from './ChoiceExploration';\nimport ClockExploration from './ClockExploration';\nimport DividerExploration from './DividerExploration';\nimport MultiplierExploration from './MultiplierExploration';\nimport RegisterExploration from './RegisterExploration';\nimport SubtractorExploration from './SubtractorExploration';\n\nfunction createCanvas(): HTMLCanvasElement {\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    return canvas;\n}\n\n// in milliseconds\nconst UPDATE_TIMES = [4000, 2500, 1600, 1000, 630, 400, 250]\n\nfunction createExploration(id: string, type: typeof Exploration): Exploration {\n    const element = document.getElementById(id);\n    if (!element) {\n        throw new Error(\"Document element \" + id + \" not found.\");\n    }\n\n    const canvas = createCanvas();\n    element.appendChild(canvas);\n\n    const exploration = new type(canvas);\n    exploration.update();\n    canvas.addEventListener(\"click\", function(event) {\n        exploration.onClick(event.offsetX, event.offsetY);\n    });\n\n    const controls = document.createElement(\"div\");\n    controls.innerHTML = `\n        <form>\n            <p><strong>Speed:</strong> Slow\n                <input id=\"speed-${id}\" name=\"speed\" type=\"range\" min=\"0\" max=\"${UPDATE_TIMES.length - 1}\" />\n                Fast\n            </p>\n        </form>\n        <button id=\"pause-${id}\">Pause</button>\n        <button id=\"resume-${id}\">Resume</button>\n        <button id=\"step-${id}\">Step</button>\n    `;\n    controls.querySelector(\"#speed-\" + id)!.addEventListener(\"change\", function(event) {\n        exploration.updateTime = UPDATE_TIMES[Number((event.target as HTMLInputElement).value)];\n    });\n    element.appendChild(controls);\n\n    controls.querySelector(\"#pause-\" + id)!.addEventListener(\"click\", exploration.pause.bind(exploration));\n    controls.querySelector(\"#resume-\" + id)!.addEventListener(\"click\", exploration.resume.bind(exploration));\n    controls.querySelector(\"#step-\" + id)!.addEventListener(\"click\", exploration.update.bind(exploration));\n\n    exploration.resume();\n\n    return exploration;\n}\n\n\n// Explorations\nlet ALL_EXPLORATIONS: Exploration[] = [];\nALL_EXPLORATIONS.push(createExploration('adder', AdderExploration));\nALL_EXPLORATIONS.push(createExploration('subtractor', SubtractorExploration));\n//ALL_EXPLORATIONS.push(createExploration('choice', ChoiceExploration));\n//ALL_EXPLORATIONS.push(createExploration('clock', ClockExploration));\n\nALL_EXPLORATIONS.push(createExploration('multiplier-full', MultiplierExploration));\nALL_EXPLORATIONS.push(createExploration('divider-full', DividerExploration));\n//ALL_EXPLORATIONS.push(createExploration('3', RegisterExploration));\n\nfunction renderLoop() {\n    // TODO: Put this in exploration\n    for (let i = 0; i < ALL_EXPLORATIONS.length; i++) {\n        const exploration = ALL_EXPLORATIONS[i];\n        exploration.render();\n    }\n    requestAnimationFrame(renderLoop);\n}\nrenderLoop();\n"]}