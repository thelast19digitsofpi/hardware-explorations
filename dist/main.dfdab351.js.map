{"version":3,"sources":["Exploration.ts","dark.ts","InputBit.ts","OutputBit.ts","Adder.ts","Wire.ts","Gates.ts","Display.ts","AdderExploration.ts","AdderFailExploration.ts","Text.ts","BinaryExploration.ts","ChoiceGate.ts","UserGates.ts","AnswerChecker.ts","ChoiceExploration.ts","Clock.ts","ClockExploration.ts","RegisterBit.ts","Subtractor.ts","Countdown.ts","DividerExploration.ts","FullAdderGates.ts","FullSubtractorGates.ts","GateExploration.ts","HalfAdderBuild.ts","MakeALUExploration.ts","MultiplierExploration.ts","MultiplierNaiveExploration.ts","OnesComplementExploration.ts","RegisterExploration.ts","SignMagnitudeExploration.ts","SubtractorExploration.ts","TwosCompAdderExploration.ts","FullAdderAnswer.ts","CountdownExploration.ts","main.ts"],"names":[],"mappings":"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","file":"main.dfdab351.js","sourceRoot":"../src","sourcesContent":["// Exploration.ts\n//\n// This might be something a little more interesting\n\nimport Component, {StateObject} from './Component';\n\nclass Exploration {\n    public canvas: HTMLCanvasElement;\n    public context: CanvasRenderingContext2D;\n    public components: Array<Component>;\n    // The idea is that all components update their state recursively starting here\n    public outputComponents: Array<Component>;\n\n    public animated: boolean = false; // assume not unless proven otherwise\n\n    public paused: boolean = false;\n    public updateTime: number = 1000;\n    public lastUpdated: number = Date.now();\n    public animationFrame: any;\n\n    // Can possibly have an afterRender property\n    public afterRender: (() => void) | null | undefined;\n\n    constructor(canvas: HTMLCanvasElement, width: number = 400, height: number = 400) {\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d')!;\n        this.components = [];\n        this.outputComponents = [];\n\n        // sizing\n        canvas.width = width;\n        canvas.height = height;\n\n        // TS-safe way of putting a random debug name\n        let id = Math.floor(Math.random() * 1e6);\n        Object.defineProperty(window, \"exploration\" + id, {\n            value: this,\n        });\n        console.log(id, this);\n    }\n\n    // todo: addComponent() maybe?\n\n    render(isDark: boolean) {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        for (let i = 0; i < this.components.length; i++) {\n            this.context.save();\n            // render wires first\n            const comp = this.components[i];\n            for (let j = 0; j < comp.inputWires.length; j++) {\n                const position = {\n                    x: comp.position.x + comp.inputSockets[j].x,\n                    y: comp.position.y + comp.inputSockets[j].y,\n                };\n                comp.inputWires[j]?.render(this.context, position, isDark);\n            }\n            this.components[i].render(this.context, isDark);\n            this.context.restore();\n        }\n\n        if (typeof this.afterRender === \"function\") {\n            this.afterRender();\n        }\n    }\n\n    onClick(canvasX: number, canvasY: number) {\n        let needsUpdate: boolean = false;\n        for (let i = 0; i < this.components.length; i++) {\n            const component = this.components[i];\n            const offsetX = canvasX - component.position.x;\n            const offsetY = canvasY - component.position.y;\n            if (Math.abs(offsetX) < component.size.x/2 && Math.abs(offsetY) < component.size.y/2 && component.onClick) {\n                needsUpdate ||= component.onClick(offsetX, offsetY);\n            }\n        }\n\n        if (needsUpdate && !this.animated) {\n            // Non-animated ones re-update the whole tree\n            this.update();\n        }\n    }\n\n    pause() {\n        this.paused = true;\n        cancelAnimationFrame(this.animationFrame);\n    }\n\n    resume() {\n        this.paused = false;\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    updateLoop() {\n        // Not paused or turned off, and been long enough since last update\n        if (!this.paused && this.updateTime > 0 && Date.now() - this.lastUpdated > this.updateTime) {\n            this.update();\n        }\n        this.animationFrame = requestAnimationFrame(this.updateLoop.bind(this));\n    }\n\n    update() {\n        // call beforeUpdate if needed\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            if (typeof comp.beforeUpdate === \"function\") {\n                comp.beforeUpdate();\n            }\n        }\n\n        // Recursively loop backwards through the tree\n        // stores a hash of component indices because we have to check the same component multiple times\n        // We hash anything that is listed as an output component\n\n        const visitedNodes: {[i: number]: boolean} = {};\n        const savedState = [];\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            const comp = this.outputComponents[i];\n            let old: boolean[] = [];\n            for (let j = 0; j < comp.state.bits.length; j++) {\n                old.push(comp.state.bits[j]);\n            }\n            savedState.push({bits: old});\n        }\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            this.updateComponent(this.outputComponents[i], visitedNodes, savedState);\n        }\n\n        for (let i = 0; i < this.outputComponents.length; i++) {\n            //console.log(\"After Update: \", this.outputComponents[i].position, savedState[i].bits, this.outputComponents[i].state.bits)\n        }\n\n        //console.warn(\"UPDATE FINISHED\");\n\n        this.lastUpdated = Date.now();\n    }\n\n    updateComponent(component: Component,\n        visitedNodes: {[i: number]: boolean},\n        savedState: StateObject[]) {\n        let index = this.components.indexOf(component); // if this gets too slow I can add IDs\n        if (!visitedNodes[index]) {\n            visitedNodes[index] = true; // prevents infinite loops, although cyclic explorations are invalid anyway\n            // has not been visited, so we need to evaluate it\n            //console.log(\"visiting \" + String(index), component);\n            let parentBits = [];\n            for (let i = 0; i < component.inputWires.length; i++) {\n                const wire = component.inputWires[i];\n                if (wire) {\n                    const to = wire.toComponent;\n                    if (!to) {\n                        parentBits.push(false); // null = 0\n                    } else {\n                        this.updateComponent(wire.toComponent, visitedNodes, savedState);\n\n\n                        // all we need is this one bit\n                        // (note: null or missing wires give a 0)\n                        // did we save it?\n                        const ocIndex = this.outputComponents.indexOf(to);\n                        if (ocIndex >= 0) {\n                            //console.log(\"Using saved state\", ocIndex, savedState[ocIndex].bits);\n                            // Use the stored state instead of updating immediately\n                            parentBits.push(savedState[ocIndex].bits[wire.toOutput]);\n                        } else {\n                            parentBits.push(to.state.bits[wire.toOutput]);\n                        }\n                    }\n                } else {\n                    // no wire = 0\n                    parentBits.push(false);\n                }\n            }\n            // Update the component's state.\n            component.state.bits = component.evaluate(parentBits);\n        }\n    }\n};\n\nexport default Exploration;\n","// dark.ts\n\n// order of params is important here\nfunction getBitColor(bit: boolean, dark: boolean) {\n    if (dark) {\n        return bit ? \"#00aa00\" : \"#770000\";\n    } else {\n        return bit ? \"#33ff33\" : \"#990000\";\n    }\n}\n\nfunction getApplianceColor(dark: boolean) {\n    return dark ? \"#333333\" : \"#cccccc\";\n}\n\nfunction getStrokeColor(dark: boolean) {\n    return dark ? \"#aaa\" : \"#222\";\n}\n\nfunction getTextColor(dark: boolean) {\n    return dark ? \"#888\" : \"#333\";\n}\n\nexport {getBitColor, getApplianceColor, getStrokeColor, getTextColor};\n","// InputBit.ts\n// Can be clicked to change state\n\nimport Component from './Component';\nimport { getBitColor, getStrokeColor } from './dark';\n\nclass InputBit implements Component {\n    state: {bits: boolean[]};\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: [];\n    inputWires: [];\n    outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // If this bit is toggled, all linked bits are toggled as well\n    linkedBits: InputBit[];\n\n    constructor(x: number, y: number, value: boolean = false, size: number = 20) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            bits: [value],\n        };\n\n        this.inputSockets = []; // it is input, it needs no input from elsewhere\n        this.inputWires = [];\n        this.outputSockets = [\n            {x: 0, y: 0}\n        ];\n\n        this.linkedBits = [];\n    }\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.fillStyle = getBitColor(this.state.bits[0], isDark);\n        ctx.strokeStyle = \"2px solid \" + getStrokeColor(isDark);\n        ctx.beginPath();\n        ctx.arc(this.position.x, this.position.y, this.size.x / 2, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n    };\n\n    onClick(_offsetX: number, _offsetY: number): boolean {\n        console.log(\"[InputBit] clicked\");\n        this.state.bits[0] = !this.state.bits[0];\n\n        // also update everything else\n        for (let otherBit of this.linkedBits) {\n            otherBit.state.bits[0] = this.state.bits[0];\n        }\n        // bits will be updated when everything is\n        return true;\n    };\n\n    evaluate(_: boolean[]): boolean[] {\n        return this.state.bits;\n    }\n}\n\nexport default InputBit;\n","// OutputBit.ts\n// Need a good way to distinguish from InputBits\n\nimport Component from './Component';\nimport { getBitColor } from './dark';\nimport Wire from './Wire';\n\nclass OutputBit implements Component {\n    state: { bits: boolean[] };\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: { x: number; y: number; }[];\n    outputSockets: { x: number; y: number; }[];\n    inputWires: Wire[];\n    beforeUpdate: undefined;\n\n    constructor(x: number, y: number, size: number = 20) {\n        this.position = { x: x, y: y };\n        this.size = { x: size, y: size };\n        this.state = { bits: [false] };\n\n        this.inputSockets = [{x: 0, y: 0}];\n        // this might be convenient\n        this.outputSockets = [{x: 0, y: 0}];\n        this.inputWires = [];\n    }\n    render(ctx: CanvasRenderingContext2D, isDark: boolean): void {\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(left, top, this.size.x, this.size.y);\n        ctx.fillStyle = getBitColor(this.state.bits[0], isDark);\n        ctx.fillRect(\n            left + this.size.x * 0.1,\n            top + this.size.y * 0.1,\n            this.size.x * 0.8,\n            this.size.y * 0.8\n        );\n    };\n    onClick: undefined;\n    evaluate(bits: boolean[]): boolean[] {\n        //console.log(bits);\n        //console.log(\"evaluating\", this.position);\n        return bits;\n    };\n}\n\nexport default OutputBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport { getBitColor, getStrokeColor, getTextColor } from \"./dark\";\nimport Wire from \"./Wire\";\n\nclass Adder implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: (Wire | null)[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        // carry input\n        this.inputSockets.push({\n            x: this.size.x * 3/8,\n            y: 0,\n        });\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick: undefined;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = isDark ? \"#333333\" : \"#cccccc\";\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = isDark ? \"#223388\" : \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            /*ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x, this.position.y + socket.y - 15);*/\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = isDark ? \"#666666\" : \"#333333\";\n            ctx.strokeStyle = getBitColor(this.state.bits[i], isDark);\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += ((wire1 && wire1.toComponent.state.bits[wire1.toOutput]) ? 1 : 0) * (1 << i);\n            num2 += ((wire2 && wire2.toComponent.state.bits[wire2.toOutput]) ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = getTextColor(isDark);\n        ctx.fillText(String(num1) + \" + \" + String(num2), this.position.x, this.position.y);\n\n        const carryWire = this.inputWires[2*this.numBits];\n        if (carryWire && carryWire.get()) {\n            ctx.font = Math.round(textSize*0.5) + \"px monospace\";\n            ctx.fillText(\"(+1 carry in)\", this.position.x, this.position.y + this.size.y*0.25);\n        }\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        // add plus the carry\n        const answer = num1 + num2 + (bits[2*this.numBits] ? 1 : 0);\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) > 0;\n        }\n        if (this.position.x === 430 && this.numBits === 4) console.log(\"Adder gives \", answerBits, \"with input\", bits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        let inputs = [];\n        for (let i = 0; i <= 2*this.numBits; i++) {\n            const wire = this.inputWires[i];\n            inputs.push(wire ? wire.get() : false);\n        }\n        console.log(\"num inputs: \", inputs.length);\n        this.state.bits = this.evaluate(inputs);\n    }\n}\n\nexport default Adder;\n","// Wire.ts\n\nimport Component from \"./Component\"\n\ntype WireOptions = {color?: string, darkColor?: string};\n\n// not sure a wire really is a component but it uses them\nclass Wire {\n    // I use \"from\" and \"to\" because \"input\" and \"output\" are ambiguous\n    toComponent: Component | null | undefined;\n    toOutput: number;\n\n    color: string | undefined;\n    darkColor: string | undefined;\n\n    // in case you want the wire to bend\n    waypoints: Array<{x: number, y: number, node?: boolean}> = [];\n\n    constructor(\n        to: Component | null | undefined,\n        toOutput: number,\n        waypoints: {x: number, y: number, node?: boolean}[] = [],\n        options: WireOptions = {}\n    ) {\n        this.toComponent = to;\n        this.toOutput = toOutput;\n        this.waypoints = waypoints;\n\n        this.color = options.color;\n        this.darkColor = options.darkColor;\n    }\n\n    get(): boolean {\n        // empty wire is zero\n        if (!this.toComponent) return false;\n        // coerce undefined to false\n        return this.toComponent.state.bits[this.toOutput] || false;\n    }\n\n    addWaypoint(x: number, y: number) {\n        this.waypoints.push({x: x, y: y});\n    }\n\n    render(ctx: CanvasRenderingContext2D, from: {x: number, y: number}, isDark: boolean) {\n        if (!this.toComponent) return;\n        ctx.save();\n        if (isDark && this.darkColor) {\n            ctx.strokeStyle = this.darkColor;\n        } else if (this.color) {\n            ctx.strokeStyle = this.color;\n        } else {\n            ctx.strokeStyle = (isDark ? \"#606468\" : \"#333\");\n        }\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(from.x, from.y);\n        for (let i = 0; i < this.waypoints.length; i++) {\n            ctx.lineTo(this.waypoints[i].x, this.waypoints[i].y);\n        }\n        const endOffset = this.toComponent.outputSockets[this.toOutput];\n        if (!endOffset) {\n            console.error(this, this.toComponent, this.toOutput);\n        }\n        ctx.lineTo(endOffset.x + this.toComponent.position.x, endOffset.y + this.toComponent.position.y);\n        ctx.stroke();\n\n        ctx.lineWidth = 6;\n        for (let i = 0; i < this.waypoints.length; i++) {\n            if (this.waypoints[i].node) {\n                ctx.beginPath();\n                ctx.arc(this.waypoints[i].x, this.waypoints[i].y, 1, 0, 2*Math.PI);\n                ctx.stroke();\n            }\n        }\n        ctx.restore();\n    }\n}\n\nexport default Wire;\n","// Gates.ts\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\nabstract class Gate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public rotation: number;\n    public symbol: string = \"\";\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number, rotation: number, bits: number) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        this.rotation = rotation * Math.PI / 180;\n\n        const cosine = Math.cos(this.rotation);\n        const sine = Math.sin(this.rotation);\n        // transform [±0.3, -0.5]\n        if (bits == 2) {\n            this.inputSockets = [\n                {\n                    x: size * (-0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine - 0.2*sine),\n                },\n                {\n                    x: size * (0.2*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine + 0.2*sine)\n                }\n            ];\n        } else {\n            this.inputSockets = [{\n                x: size * 0.5*sine,\n                y: size * -0.5*cosine,\n            }]\n        }\n\n        this.outputSockets = [\n            {\n                x: size * -0.4*sine,\n                y: size * 0.4*cosine,\n            }\n        ];\n\n        this.inputWires = [];\n    }\n    beforeUpdate: undefined;\n\n    onClick(_offsetX: number, _offsetY: number): boolean {\n        return false;\n    };\n\n    abstract drawGate(ctx: CanvasRenderingContext2D): void;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        // base\n        ctx.fillStyle = isDark ? \"#333\" : \"#ccc\";\n        ctx.strokeStyle = isDark ? \"#aaa\" : \"black\";\n        ctx.lineWidth = 2;\n        ctx.translate(this.position.x, this.position.y);\n        ctx.rotate(this.rotation);\n        // draw the wires coming in\n        ctx.beginPath();\n        if (this.inputSockets.length === 2) {\n            ctx.moveTo(this.size.x * -0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * -0.2, 0);\n            ctx.moveTo(this.size.x * 0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * 0.2, 0);\n            ctx.stroke();\n        }\n\n        this.drawGate(ctx);\n\n        ctx.rotate(-this.rotation);\n        ctx.font = Math.round(this.size.y * 0.6) + \"px monospace\";\n        ctx.fillStyle = isDark ? \"#939699\" : \"#333\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(this.symbol, 0, 0);\n\n        ctx.restore();\n    }\n\n    abstract evaluate(bits: boolean[]): boolean[];\n}\n\nclass AndGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n        this.symbol = \"&\";\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.lineTo(this.size.x * 0.4, 0);\n        ctx.arc(0, 0, this.size.x * 0.4, 0, Math.PI);\n        ctx.lineTo(-this.size.x * 0.4, -this.size.y * 0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] && bits[1]];\n    };\n}\n\nclass OrGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n        this.symbol = \"O\";\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.4);\n        ctx.quadraticCurveTo(s * 0, s * -0.2, s * 0.4, s * -0.4);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] || bits[1]];\n    };\n}\n\nclass XorGate extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 2);\n        this.symbol = \"X\";\n    }\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.x;\n        // do the or's path...\n        ctx.beginPath();\n        ctx.moveTo(s * 0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n        ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.35);\n        ctx.quadraticCurveTo(s * 0, s * -0.15, s * 0.4, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n        // and the extra thing\n        ctx.beginPath();\n        ctx.moveTo(s * -0.4, s * -0.5);\n        ctx.quadraticCurveTo(s * 0, s * -0.3, s * 0.4, s * -0.5);\n        ctx.stroke();\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] !== bits[1]];\n    };\n}\n\nclass Not extends Gate {\n    constructor(x: number, y: number, size: number, degrees: number) {\n        super(x, y, size, degrees, 1);\n    }\n\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.y;\n        // wire in\n        ctx.beginPath();\n        ctx.moveTo(0, s * -0.5);\n        ctx.lineTo(0, 0);\n        ctx.stroke();\n        // triangle for the not\n        ctx.beginPath();\n        ctx.moveTo(0, s * 0.2);\n        ctx.lineTo(s * -0.25, s * -0.35);\n        ctx.lineTo(s * 0.25, s * -0.35);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n\n        ctx.beginPath();\n        ctx.arc(0, s * 0.3, s * 0.1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.fill();\n    }\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        Gate.prototype.render.call(this, ctx, isDark);\n    };\n    evaluate(bits: boolean[]): boolean[] {\n        return [!bits[0]];\n    };\n}\n\nexport {AndGate, OrGate, XorGate, Not};\n","// Display.ts\n//\n// Given a set of bits, displays its value as a signed or unsigned integer.\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\ntype DisplaySigned = (boolean | \"signmag\" | \"1comp\" | \"2comp\");\n\nclass Display implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public signed: DisplaySigned;\n    public components: Component[];\n    beforeUpdate: undefined;\n\n    // I think this only works on components with exactly 1 output\n    constructor(x: number, y: number, components: Component[], signed: DisplaySigned = false, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size * 2,\n            y: size\n        };\n        this.signed = signed;\n        this.components = components;\n\n        this.state = {\n            // unused\n            bits: [],\n        };\n        // unused, it doesn't use wires because they make visual clutter\n        this.inputSockets = [];\n        this.outputSockets = [];\n        this.inputWires = [];\n    }\n\n    onClick: undefined;\n\n    getValue() {\n        let totalValue: number = 0;\n        for (let i = 0; i < this.components.length; i++) {\n            const comp = this.components[i];\n            const value = (comp.state.bits[0] ? 1 : 0) << i;\n            // use 2's complement if signed on the last bit\n            if (i == this.components.length - 1) {\n                if (this.signed === \"signmag\") {\n                    // MSB flips sign if on\n                    totalValue *= (value == 0) ? 1 : -1;\n                } else if (this.signed === \"1comp\") {\n                    // 1's complement is equivalent to MSB value -2^n+1\n                    totalValue -= (value ? value - 1 : 0);\n                } else if (this.signed === true || this.signed === \"2comp\") {\n                    // 2's complement is equivalent to MSB value -2^n\n                    totalValue -= value;\n                } else {\n                    // unsigned\n                    totalValue += value;\n                }\n            } else {\n                // all other bits are normal\n                totalValue += value;\n            }\n        }\n        let displayText = String(totalValue);\n        // negative zero\n        if (displayText === \"0\" && this.components[this.components.length - 1].state.bits[0]) {\n            displayText = \"-0\";\n        }\n        return displayText;\n    }\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = isDark ? \"#333\" : \"#cccccc\";\n        ctx.strokeStyle = isDark ? \"#999\" : \"#000\";\n        ctx.beginPath();\n        ctx.moveTo(left,               top);\n        ctx.lineTo(left + this.size.x, top);\n        ctx.lineTo(left + this.size.x, top + this.size.y);\n        ctx.lineTo(left,               top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // get the state\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.font = Math.round(this.size.y*4/5) + \"px monospace\";\n        ctx.fillStyle = isDark ? \"#909396\" : \"#000\";\n\n\n        ctx.fillText(this.getValue(), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(_: boolean[]): boolean[] {\n        return [];\n    }\n}\n\nexport default Display;\n","// AdderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport {AndGate, OrGate, XorGate} from './Gates';\nimport Display from './Display';\n\nclass AdderExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 640, 400);\n\n        const adder = new Adder(520, 200, 4);\n        this.components.push(adder);\n\n        for (let i = 0; i < 4; i++) {\n            const bit = new InputBit(adder.position.x - 100 + i*25, 30);\n            adder.inputWires.unshift(new Wire(bit, 0, [\n                {x: bit.position.x + 12.5, y: 120 - i*20},\n                {x: bit.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit);\n\n            const bit2 = new InputBit(adder.position.x + 100 - i*25, 30);\n            adder.inputWires.push(new Wire(bit2, 0, [\n                {x: bit2.position.x - 12.5, y: 120 - i*20},\n                {x: bit2.position.x, y: 120 - i*20},\n            ]));\n            this.components.push(bit2);\n        }\n\n        for (let i = 0; i < 5; i++) {\n            const output = new OutputBit(adder.position.x + 37.5 - i*25, 300);\n            output.inputWires.push(new Wire(adder, i, []));\n            this.components.push(output);\n            this.outputComponents.push(output);\n        }\n\n        // colors are nice\n        const blue = {color: \"rgba(96,96,160,1)\"};\n\n        const fakeCarry = new InputBit(370, 200, false, 20);\n        this.components.push(fakeCarry);\n\n        let rightInputA = [];\n        let rightInputB = [];\n        let rightOutput = [];\n        let carryOuts = [];\n        for (let i = 0; i < 4; i++) {\n            const bitA = new InputBit(290 - i*70, 30);\n            rightInputA.push(bitA);\n\n            const bitB = new InputBit(bitA.position.x + 40, 90);\n            rightInputB.push(bitB);\n\n            // full adder\n            const x1 = (bitA.position.x + bitB.position.x)/2;\n            const y1 = bitB.position.y + 60;\n            const and = new AndGate(x1 - 18, y1, 24, 0);\n            and.inputWires.push(new Wire(bitA, 0, []));\n            and.inputWires.push(new Wire(bitB, 0, []));\n            const xor = new XorGate(x1 + 18, y1, 24, 0);\n            xor.inputWires.push(new Wire(bitA, 0, []));\n            xor.inputWires.push(new Wire(bitB, 0, []));\n\n            const outBit = new OutputBit(x1, 300, 20);\n            rightOutput.push(outBit);\n\n            if (i >= 0) {\n                const previous = (i == 0) ? fakeCarry : carryOuts[i-1];\n                // need a second phase of the adder\n                const and2 = new AndGate(x1, y1 + 50, 24, 0);\n                and2.inputWires.push(new Wire(xor, 0, []));\n                and2.inputWires.push(new Wire(previous, 0, [\n                    {x: and2.position.x + 5, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: previous.position.y + 15},\n                    {x: previous.position.x, y: previous.position.y + 15},\n                ], blue));\n\n                const xor2 = new XorGate(x1 + 20, y1 + 80, 24, 0);\n                xor2.inputWires.push(new Wire(xor, 0, []));\n                xor2.inputWires.push(new Wire(previous, 0, [\n                    {x: xor2.position.x + 5, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: and2.position.y - 15},\n                    {x: and2.position.x + 38, y: previous.position.y + 15},\n                    {x: previous.position.x, y: previous.position.y + 15},\n                ], blue));\n\n                const or2 = new OrGate(x1 - 15, y1 + 80, 24, 0);\n                or2.inputWires.push(new Wire(and, 0, []));\n                or2.inputWires.push(new Wire(and2, 0, []));\n\n                carryOuts[i] = or2;\n                outBit.inputWires.push(new Wire(xor2, 0, []));\n                this.components.push(or2, and2, xor2);\n            } else {\n                carryOuts[i] = and;\n                outBit.inputWires.push(new Wire(xor, 0, []));\n            }\n\n            this.components.push(and, xor, outBit);\n        }\n\n        const finalCarry = new OutputBit(30, 250, 20);\n        finalCarry.inputWires.push(new Wire(carryOuts[3], 0, []));\n        rightOutput.push(finalCarry);\n\n        this.components.push(finalCarry, ...rightInputA, ...rightInputB);\n\n        const displayA = new Display(35, 30, rightInputA);\n        const displayB = new Display(35, 90, rightInputB);\n        const displayResult = new Display(200, 350, rightOutput, false, 40);\n\n        this.components.push(displayA, displayB, displayResult);\n\n        this.outputComponents.push(...rightOutput);\n    }\n}\n\nexport default AdderExploration;\n","// AdderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport {AndGate, OrGate, XorGate} from './Gates';\nimport Display from './Display';\n\nclass AdderFailExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 400, 300);\n\n        const adder = new Adder(200, 170, 4);\n        this.components.push(adder);\n\n        let inputA = [];\n        let inputB = [];\n\n        for (let i = 0; i < 4; i++) {\n            const y = 105 - i*15;\n            const bitA = new InputBit(adder.position.x - 100 + i*25, 30);\n            adder.inputWires.unshift(new Wire(bitA, 0, [\n                {x: bitA.position.x + 12.5, y: 105 - i*15},\n                {x: bitA.position.x, y: 105 - i*15},\n            ]));\n            inputA.unshift(bitA);\n\n            const bitB = new InputBit(adder.position.x + 100 - i*25, 30);\n            adder.inputWires.push(new Wire(bitB, 0, [\n                {x: bitB.position.x - 12.5, y: 105 - i*15},\n                {x: bitB.position.x, y: 105 - i*15},\n            ]));\n            inputB.push(bitB);\n        }\n\n        let outputBits = [];\n        for (let i = 0; i < 4; i++) {\n            const output = new OutputBit(adder.position.x + 37.5 - i*25, 260);\n            output.inputWires.push(new Wire(adder, i, []));\n            outputBits.push(output);\n        }\n\n        this.components.push(...inputA, ...inputB, ...outputBits);\n\n        const displayA = new Display(35, 30, inputA, \"signmag\");\n        const displayB = new Display(365, 30, inputB, \"signmag\");\n        const displayResult = new Display(320, 260, outputBits, \"signmag\", 40);\n\n        this.components.push(displayA, displayB, displayResult);\n\n        this.outputComponents.push(...outputBits);\n    }\n}\n\nexport default AdderFailExploration;\n","// Text.ts\n//\n// Simple text display\n\nimport Component from './Component';\n\ninterface TextOptions {\n    color?: string | (() => string);\n}\n\nclass Text implements Component {\n    state = {bits: []};\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets = [];\n    outputSockets = [];\n    inputWires = [];\n    onClick = undefined;\n    evaluate = () => [];\n    beforeUpdate = undefined;\n\n    text: string | (() => string);\n    options: TextOptions;\n\n    constructor(x: number, y: number, size: number, text: string | (() => string), options: TextOptions = {}) {\n        this.position = {x: x, y: y};\n        this.size = {x: 0, y: size};\n        this.text = text;\n        this.options = options;\n    }\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n        const message = (typeof this.text === \"function\" ? this.text() : this.text);\n        ctx.font = `${this.size.y}px monospace`;\n        // if function, call it; if string, use it; if undefined, default to #333\n        ctx.fillStyle = (\n            typeof this.options.color === \"function\" ? this.options.color() :\n            typeof this.options.color === \"string\" ? this.options.color :\n            (isDark ? \"#909396\" : \"#333\"));\n        // positioning\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(message, this.position.x, this.position.y);\n        ctx.restore();\n    }\n}\n\nexport default Text;\n","// BinaryExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\n\nclass BinaryExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 480, 240);\n\n        const NUM_BITS = 6;\n        let bitArray = [];\n        for (let i = 0; i < NUM_BITS; i++) {\n            const bit = new InputBit(440 - 80*i, 80, false, 30);\n            bitArray.push(bit);\n\n            const text = new Text(bit.position.x, bit.position.y / 2, 30, String(2**i));\n            this.components.push(text);\n        }\n\n        this.components.push(...bitArray);\n        this.outputComponents.push(...bitArray);\n\n        const display = new Display(240, 160, bitArray, false, 48);\n        this.components.push(display);\n        this.outputComponents.push(display);\n    }\n}\n\nexport default BinaryExploration;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport { getApplianceColor, getStrokeColor } from \"./dark\";\nimport Wire from \"./Wire\";\n\nclass ChoiceGate implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: (Wire | null)[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size*2,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n        const offset = size * 0.5;\n        this.inputSockets = [\n            {x: -this.size.x * 1/3, y: 0},\n            {x: -offset, y: -this.size.y/2},\n            {x: +offset, y: -this.size.y/2}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick: undefined;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = getApplianceColor(isDark);\n        ctx.strokeStyle = getStrokeColor(isDark);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(this.size.x*1.0, 0);\n        ctx.lineTo(this.size.x*0.67, this.size.y);\n        ctx.lineTo(this.size.x*0.33, this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // red input\n        const sx = this.size.x;\n        ctx.fillStyle = \"rgb(0, 204, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.25, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n        ctx.fillStyle = \"rgb(153, 0, 0, 0.75)\";\n        ctx.beginPath();\n        ctx.arc(sx*0.75, 1, sx*0.15, 0, Math.PI);\n        ctx.fill();\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return [bits[0] ? bits[1] : bits[2]];\n    }\n}\n\nexport default ChoiceGate;\n","// NotSwitch.ts\n//\n// Switch between NOT gate and simple wire\n\nimport Component from \"./Component\";\nimport Wire from \"./Wire\";\n\n// NOTE: Make this abstract\n\nabstract class UserGate implements Component {\n    public state: {\n        bits: boolean[],\n        whichGate: number,\n    };\n    public numGates: number;\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public rotation: number;\n    public symbol: string = \"\";\n\n    constructor(x: number, y: number, size: number, rotation: number, bits: number, numGates: number) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size\n        };\n\n        this.state = {\n            bits: [false],\n            whichGate: 0,\n        };\n        this.numGates = numGates;\n\n        this.rotation = rotation * Math.PI / 180;\n\n        const cosine = Math.cos(this.rotation);\n        const sine = Math.sin(this.rotation);\n        // transform [±0.3, -0.5]\n        if (bits == 2) {\n            this.inputSockets = [\n                {\n                    x: size * (-0.15*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine - 0.15*sine),\n                },\n                {\n                    x: size * (0.15*cosine + 0.5*sine),\n                    y: size * (-0.5*cosine + 0.15*sine)\n                }\n            ];\n        } else {\n            this.inputSockets = [{\n                x: size * 0.5*sine,\n                y: size * -0.5*cosine,\n            }]\n        }\n\n        this.outputSockets = [\n            {\n                x: size * -0.5*sine,\n                y: size * 0.5*cosine,\n            }\n        ];\n\n        this.inputWires = [];\n    }\n    onClick(offsetX: number, offsetY: number): boolean {\n        // rotate them\n        const cosine = Math.cos(this.rotation);\n        const sine = Math.sin(this.rotation);\n        // the sizes are both the same\n        const realX = (offsetX * cosine + offsetY * sine) / this.size.x;\n        const realY = (offsetY * cosine - offsetY * sine) / this.size.y;\n        if (-0.3 < realY && realY < 0.3) {\n            if (-0.5 < realX && realX < -0.3) {\n                this.state.whichGate = (this.state.whichGate - 1 + this.numGates) % this.numGates;\n                return true;\n            }\n            if (0.3 < realX && realX < 0.5) {\n                this.state.whichGate = (this.state.whichGate + 1) % this.numGates;\n                return true;\n            }\n        }\n        return false;\n    };\n    beforeUpdate: undefined;\n\n\n    abstract drawGate(ctx: CanvasRenderingContext2D): void;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        // base\n        ctx.fillStyle = isDark ? \"#222\" : \"#ddd\";\n        ctx.strokeStyle = isDark ? \"#aaa\" : \"black\";\n        ctx.lineWidth = 2;\n        ctx.translate(this.position.x, this.position.y);\n        ctx.rotate(this.rotation);\n        // draw the wires coming in\n        ctx.beginPath();\n        if (this.inputSockets.length === 2) {\n            ctx.moveTo(this.size.x * -0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * -0.2, 0);\n            ctx.moveTo(this.size.x * 0.2, this.size.y * -0.5);\n            ctx.lineTo(this.size.x * 0.2, 0);\n            ctx.stroke();\n        }\n\n        // this is new\n        const sx = this.size.x, sy = this.size.y;\n        ctx.beginPath();\n        ctx.moveTo(0,        sy * -0.5);\n        ctx.lineTo(sx *  0.4, sy * -0.5);\n        ctx.arcTo (sx *  0.5, sy * -0.5, sx *  0.5, sy * -0.4, sy * 0.1);\n        ctx.lineTo(sx *  0.5, sy *  0.4);\n        ctx.arcTo (sx *  0.5, sy *  0.5, sx *  0.4, sy *  0.5, sy * 0.1);\n        ctx.lineTo(sx * -0.4, sy *  0.5);\n        ctx.arcTo (sx * -0.5, sy *  0.5, sx * -0.5, sy *  0.4, sy * 0.1);\n        ctx.lineTo(sx * -0.5, sy * -0.4);\n        ctx.arcTo (sx * -0.5, sy * -0.5, sx * -0.4, sy * -0.5, sy * 0.1);\n        ctx.closePath();\n\n        ctx.stroke();\n        ctx.fill();\n\n        this.drawGate(ctx);\n\n        // arrow buttons\n        ctx.fillStyle = isDark ? \"#939699\" : \"#333\";\n        ctx.beginPath();\n        ctx.moveTo(sx * 0.5, 0);\n        ctx.lineTo(sx * 0.3, sy * -0.3);\n        ctx.lineTo(sx * 0.3, sy * +0.3);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.moveTo(sx * -0.5, 0);\n        ctx.lineTo(sx * -0.3, sy * -0.3);\n        ctx.lineTo(sx * -0.3, sy * +0.3);\n        ctx.fill();\n\n        ctx.rotate(-this.rotation);\n        ctx.font = Math.round(this.size.y * 0.4) + \"px monospace\";\n        ctx.fillStyle = isDark ? \"#939699\" : \"#333\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(this.symbol, 0, 0);\n\n        ctx.restore();\n    };\n\n    abstract evaluate(bits: boolean[]): boolean[];\n};\n\n// binary, as in operator, as in takes two inputs (and/or/xor)\nclass BinarySwitch extends UserGate {\n    constructor(x: number, y: number, size: number, rotation: number) {\n        super(x, y, size, rotation, 2, 3);\n    }\n    beforeUpdate: undefined;\n\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.y * 0.6;\n        // wire in\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, this.size.y * +0.5);\n        const xOffset = this.size.x * 0.15;\n        ctx.moveTo(-xOffset, 0);\n        ctx.lineTo(-xOffset, this.size.y * -0.5);\n        ctx.moveTo(xOffset, 0);\n        ctx.lineTo(xOffset, this.size.y * -0.5);\n        ctx.stroke();\n\n        switch (this.state.whichGate) {\n            case 0: // and\n                ctx.beginPath();\n                ctx.moveTo(s * 0.4, -s * 0.4);\n                ctx.lineTo(s * 0.4, 0);\n                ctx.arc(0, 0, s * 0.4, 0, Math.PI);\n                ctx.lineTo(-s * 0.4, -s * 0.4);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n\n                this.symbol = \"&\";\n                break;\n            case 1: // or\n                ctx.beginPath();\n                ctx.moveTo(s * 0.4, s * -0.4);\n                ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n                ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.4);\n                ctx.quadraticCurveTo(s * 0, s * -0.2, s * 0.4, s * -0.4);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n\n                this.symbol = \"O\";\n                break;\n            case 2: // xor\n                // do the or's path...\n                ctx.beginPath();\n                ctx.moveTo(s * 0.4, s * -0.35);\n                ctx.quadraticCurveTo(s * 0.4, s * 0.1, 0, s * 0.4);\n                ctx.quadraticCurveTo(s * -0.4, s * 0.1, s * -0.4, s * -0.35);\n                ctx.quadraticCurveTo(s * 0, s * -0.15, s * 0.4, s * -0.35);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n                // and the extra thing\n                ctx.beginPath();\n                ctx.moveTo(s * -0.4, s * -0.5);\n                ctx.quadraticCurveTo(s * 0, s * -0.3, s * 0.4, s * -0.5);\n                ctx.stroke();\n                this.symbol = \"X\";\n                break;\n        }\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        switch (this.state.whichGate) {\n            case 0:\n                return [bits[0] && bits[1]];\n            case 1:\n                return [bits[0] || bits[1]];\n            case 2:\n                return [bits[0] !== bits[1]];\n            default:\n                throw new Error(`Invalid state ${this.state.whichGate}`);\n        }\n    };\n}\n\nclass NotSwitch extends UserGate {\n    constructor(x: number, y: number, size: number, rotation: number) {\n        super(x, y, size, rotation, 1, 2);\n        this.state = {\n            bits: [false],\n            whichGate: 0,\n        }\n    }\n    beforeUpdate: undefined;\n\n    drawGate(ctx: CanvasRenderingContext2D) {\n        const s = this.size.y * 0.75;\n        // wire in\n        ctx.beginPath();\n        ctx.moveTo(0, this.size.y * -0.5);\n        ctx.lineTo(0, this.size.y * +0.5);\n        ctx.stroke();\n\n        if (this.state.whichGate === 1) {\n            // triangle for the not\n            ctx.beginPath();\n            ctx.moveTo(0, s * 0.2);\n            ctx.lineTo(s * -0.25, s * -0.35);\n            ctx.lineTo(s * 0.25, s * -0.35);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n            ctx.beginPath();\n            ctx.arc(0, s * 0.3, s * 0.1, 0, 2*Math.PI);\n            ctx.stroke();\n            ctx.fill();\n        }\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        return [(this.state.whichGate === 1) ? !bits[0] : bits[0]];\n    }\n}\n\nexport {NotSwitch, BinarySwitch};\n","// AnswerChecker.ts\n//\n// Runs through all possible combinations of given input bits.\n\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Component, { StateObject } from './Component';\nimport Wire from './Wire';\nimport Exploration from './Exploration';\nimport { getApplianceColor } from './dark';\n\n\ntype CheckFunctionType = (arg0: boolean[]) => boolean[];\n\nclass AnswerChecker implements Component {\n    state: StateObject;\n    position: { x: number; y: number; };\n    size: { x: number; y: number; };\n    inputSockets: { x: number; y: number; }[];\n    outputSockets: { x: number; y: number; }[];\n    inputWires: (Wire | null)[];\n    beforeUpdate: (() => void) | null | undefined;\n\n    timer: number;\n\n    // arrays mean you can have 2 inputs always be the same\n    inputs: (InputBit | InputBit[])[];\n    outputs: OutputBit[];\n    checkFunction: CheckFunctionType;\n    exploration: Exploration;\n\n    constructor(exploration: Exploration, x: number, y: number, inputs: (InputBit | InputBit[])[], outputs: OutputBit[], checkFunction: CheckFunctionType) {\n        this.exploration = exploration;\n        this.position = {\n            x: x,\n            y: y,\n        };\n        this.size = {\n            x: 160,\n            y: 90,\n        };\n        this.inputSockets = [];\n        this.outputSockets = [];\n        this.inputWires = [];\n\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.checkFunction = checkFunction;\n\n        this.state = {\n            bits: [],\n\n            running: false,\n            counter: -1,\n            win: false,\n            lose: false,\n            loseCorrectAnswer: [],\n            loseWrongAnswer: [],\n        };\n\n        this.timer = -1;\n    }\n\n    onClick(offsetX: number, offsetY: number) {\n        if (offsetX >= -60 && offsetX <= 60 && Math.abs(offsetY + 17) <= 20) {\n            this.launch();\n            return true;\n        }\n\n        return false;\n    }\n\n    launch() {\n        if (this.state.running) {\n            clearTimeout(this.timer);\n            this.state.running = false;\n            this.state.counter = -1;\n        } else {\n            this.state.running = true;\n            this.state.win = false;\n            this.state.lose = false;\n            this.state.counter = -1;\n            this.nextTest();\n        }\n    }\n\n    nextTest() {\n        this.state.counter++;\n        console.log(\"testing with\", this.state.counter);\n        if (this.state.counter >= (1 << this.inputs.length)) {\n            this.state.win = true;\n            this.state.running = false;\n            return;\n        }\n\n        // set all the bits\n        let inputBits = [];\n        for (let i = 0; i < this.inputs.length; i++) {\n            const bit = Boolean((this.state.counter >> i) & 1);\n            // it's either a single input or an array\n            let array = this.inputs[i];\n            if (array instanceof InputBit) {\n                array = [array];\n            }\n            for (let j = 0; j < array.length; j++) {\n                array[j].state.bits[0] = bit;\n            }\n            inputBits.push(bit);\n        }\n\n        // update the exploration\n        this.exploration.update();\n\n        // check it\n        const outputBits = this.checkFunction(inputBits);\n        for (let i = 0; i < this.outputs.length; i++) {\n            if (outputBits[i] != this.outputs[i].state.bits[0]) {\n                this.state.lose = true;\n                this.state.running = false;\n                this.state.loseCorrectAnswer = outputBits;\n                this.state.loseWrongAnswer = this.outputs.map(x => x.state.bits[0]);\n                return;\n            }\n        }\n\n        // if it survived...\n        let timeDelay = 1000;\n        let escalation = 2;\n        while (escalation < this.state.counter-1) {\n            escalation++;\n        }\n        timeDelay = 1000 / (escalation - 1);\n        this.timer = window.setTimeout(this.nextTest.bind(this), timeDelay);\n    }\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = getApplianceColor(isDark);\n        ctx.beginPath();\n        let r = Math.min(this.size.y * 0.2, this.size.x * 0.1);\n        const w = this.size.x, h = this.size.y;\n        ctx.moveTo(w*0.5, 0);\n        ctx.arcTo(w*1.0, 0, w*1.0, h*0.5, r);\n        ctx.arcTo(w*1.0, h*1.0, w*0.5, h*1.0, r);\n        ctx.arcTo(0, h*1.0, 0, h*0.5, r);\n        ctx.arcTo(0, 0, w*0.5, 0, r);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // test button\n        // red = stopped or failed, green = win, yellow = running\n        if (this.state.win) {\n            ctx.fillStyle = isDark ? \"#228822\" : \"#33cc33\";\n            ctx.strokeStyle = isDark ? \"#006600\" : \"#009900\";\n        } else if (this.state.running) {\n            ctx.fillStyle = isDark ? \"#999922\" : \"#eeee22\";\n            ctx.strokeStyle = isDark ? \"#666600\" : \"#999900\";\n        } else {\n            ctx.fillStyle = isDark ? \"#993333\" : \"#cc3333\";\n            ctx.strokeStyle = isDark ? \"#660000\" : \"#990000\";\n        }\n        ctx.lineWidth = 6;\n        ctx.beginPath();\n        const y = 28;\n        r = 30;\n        ctx.moveTo(80, y-20);\n        ctx.lineTo(120, y-20);\n        ctx.arc(120, y, 20, -Math.PI/2, Math.PI/2);\n        ctx.lineTo(40, y+20);\n        ctx.arc(40, y, 20, Math.PI/2, 3*Math.PI/2);\n        ctx.closePath();\n\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.fillStyle = isDark ? \"#999\" : \"#000\";\n        ctx.font = \"30px monospace\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(this.state.running ? \"STOP\" : \"TEST\", 80, y+9);\n\n        ctx.font = \"20px sans-serif\";\n        let message: string;\n        if (this.state.win) {\n            message = \"Good job!\";\n        } else if (this.state.lose) {\n            message = \"\";\n            ctx.font = (this.inputs.length < 4 ? \"16\" : \"14\") + \"px sans-serif\";\n            ctx.fillText(\"Oops! That should\", 80, 67);\n            const correct = this.state.loseCorrectAnswer.map(Number).join(\"\");\n            const wrong = this.state.loseWrongAnswer.map(Number).join(\"\");\n            ctx.fillText(\"be [\" + correct + \"], not [\" + wrong + \"].\", 80, 84);\n        } else if (this.state.running) {\n            message = `${this.state.counter + 1} of ${1 << this.inputs.length}`;\n        } else {\n            message = \"are you ready?\";\n            ctx.font = \"18px sans-serif\";\n        }\n        ctx.fillText(message, 80, 76);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]) {\n        return [];\n    }\n}\n\nexport default AnswerChecker;\n","// ChoiceExploration\n//\n// Exploration that shows how a multiplexer works.\n// I called it a \"choice gate\" because \"multiplexer\" and \"multiplier\" look too similar.\n\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport ChoiceGate from './ChoiceGate';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\nimport { BinarySwitch, NotSwitch } from './UserGates';\nimport AnswerChecker from './AnswerChecker';\n\nclass ChoiceExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n\n        const inputChoice = new InputBit(20, 100, false, 30);\n        const inputIf = new InputBit(90, 70, false, 30);\n        const inputElse = new InputBit(150, 70, false, 30);\n\n\n        const inverterLeft = new NotSwitch(50, 135, 40, 0);\n        this.components.push(inverterLeft);\n        inverterLeft.inputWires.push(new Wire(inputChoice, 0, [\n            {x: inverterLeft.position.x, y: inputChoice.position.y, node: true},\n            {x: inputChoice.position.x, y: inputChoice.position.y},\n        ]));\n\n        const inverterRight = new NotSwitch(125, 135, 40, 0);\n        this.components.push(inverterRight);\n        inverterRight.inputWires.push(new Wire(inputChoice, 0, [\n            {x: inverterRight.position.x, y: inputChoice.position.y},\n            {x: inputChoice.position.x, y: inputChoice.position.y},\n        ]));\n\n        // recursive components are a bit weird\n        const andIf = new BinarySwitch(inverterLeft.position.x + 9, 210, 60, 0);\n        const andElse = new BinarySwitch(141, 210, 60, 0);\n        const or = new BinarySwitch(100, 300, 60, 0);\n\n        andIf.inputWires = [\n            new Wire(inverterLeft, 0, []),\n            new Wire(inputIf, 0, [\n                {x: andIf.position.x + 9, y: 170},\n                {x: inputIf.position.x, y: 170},\n            ]),\n        ];\n        andElse.inputWires = [\n            new Wire(inverterRight, 0, [\n                {x: andElse.position.x - 9, y: 170},\n                {x: inverterRight.position.x, y: 170},\n            ]),\n            new Wire(inputElse, 0, [\n                {x: andElse.position.x + 9, y: 170},\n                {x: inputElse.position.x, y: 170},\n            ]),\n        ];\n        or.inputWires = [\n            new Wire(andIf, 0, []),\n            new Wire(andElse, 0, []),\n        ];\n        this.components.push(andIf, andElse, or);\n        this.components.push(inputChoice, inputIf, inputElse);\n\n        // for people to debug their circuits\n        const helpLeft = new OutputBit(andIf.position.x, andIf.position.y + 35, 10);\n        helpLeft.inputWires.push(new Wire(andIf, 0));\n        const helpRight = new OutputBit(andElse.position.x, andElse.position.y + 35, 10);\n        helpRight.inputWires.push(new Wire(andElse, 0));\n        this.components.push(helpLeft, helpRight);\n        this.outputComponents.push(helpLeft, helpRight);\n\n        const output = new OutputBit(100, 345, 30);\n        output.inputWires.push(new Wire(or, 0))\n        this.components.push(output);\n        this.outputComponents.push(output);\n\n        // the simplified version\n        const inputChoice2 = new InputBit(240, 160, false, 30);\n        const inputIf2 = new InputBit(280, 120, false, 30);\n        const inputElse2 = new InputBit(320, 120, false, 30);\n        const choice = new ChoiceGate(300, 200, 40);\n        const output2 = new OutputBit(300, 250, 30);\n        choice.inputWires.push(new Wire(inputChoice2, 0, [\n            {x: inputChoice2.position.x, y: choice.position.y},\n        ]));\n        choice.inputWires.push(new Wire(inputIf2, 0));\n        choice.inputWires.push(new Wire(inputElse2, 0));\n        output2.inputWires.push(new Wire(choice, 0));\n\n        this.components.push(choice, output2, inputChoice2, inputIf2, inputElse2);\n        this.outputComponents.push(output2);\n\n        const checker = new AnswerChecker(this, 310, 350, [\n            [inputChoice, inputChoice2],\n            [inputIf, inputIf2],\n            [inputElse, inputElse2]\n        ], [output], function(bits: boolean[]) {\n            return [bits[0] ? bits[1] : bits[2]];\n        });\n        this.components.push(checker);\n        this.outputComponents.push(checker);\n    }\n\n}\n\nexport default ChoiceExploration;\n","// Clock.ts\n//\n// These clocks can have an arbitrary period.\n\nimport Component from \"./Component\";\nimport { getApplianceColor, getBitColor } from \"./dark\";\nimport Wire from \"./Wire\";\n\nclass Clock implements Component {\n    public state: {bits: boolean[], clock: number};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    //\n    constructor(x: number, y: number, width: number = 50, height: number = 50) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n        // because .fill() isn't supported?!\n        const bitArray: boolean[] = Array(2).map(_ => false);\n        this.state = {\n            bits: bitArray,\n            clock: -1,\n        };\n        this.numBits = 2;\n        // \"power supply\" or more accurately a way to reset the clock\n        this.inputSockets = [\n            {x: 0, y: -this.size.y/2 - 1},\n        ];\n\n        this.outputSockets = [];\n        const spacing = width / 2;\n        for (let i = 0; i < 2; i++) {\n            this.outputSockets.push({\n                x: (i - 1/2) * spacing,\n                y: this.size.y/2,\n            });\n        }\n\n        this.inputWires = [];\n    }\n\n    onClick: undefined;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = getApplianceColor(isDark);\n        ctx.beginPath();\n        let r = Math.min(this.size.y * 0.2, this.size.x * 0.1);\n        const w = this.size.x, h = this.size.y;\n        ctx.moveTo(w*0.5, 0);\n        ctx.arcTo(w*1.0, 0, w*1.0, h*0.5, r);\n        ctx.arcTo(w*1.0, h*1.0, w*0.5, h*1.0, r);\n        ctx.arcTo(0, h*1.0, 0, h*0.5, r);\n        ctx.arcTo(0, 0, w*0.5, 0, r);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // power\n        ctx.translate(w/2, 0); // move origin to top-middle\n        ctx.beginPath();\n        ctx.moveTo(2, -5);\n        ctx.lineTo(2, -1);\n        ctx.lineTo(-2, -1);\n        ctx.lineTo(-2, -5);\n        ctx.stroke();\n\n        // clock\n        ctx.fillStyle = isDark ? \"#555555\" : \"#e0e0e4\";\n        r = Math.min(w/3, h/3);\n        ctx.translate(0, h/2); // move origin to center\n        ctx.beginPath();\n        ctx.arc(0, 0, r, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n\n        // ticks\n        ctx.save();\n        const angle = 2*Math.PI / this.numBits;\n        for (let i = 0; i < this.numBits; i++) {\n            ctx.beginPath();\n            ctx.moveTo(0, -r);\n            ctx.lineTo(0, -r * 0.8 + 1);\n            ctx.stroke();\n\n            ctx.rotate(angle);\n        }\n        ctx.restore();\n\n        // hand\n        ctx.save();\n        ctx.rotate(this.state.clock * angle);\n        ctx.lineWidth *= 3;\n        ctx.lineCap = \"round\";\n        ctx.beginPath();\n        ctx.moveTo(0, r*0.25);\n        ctx.lineTo(0, -r * 0.8);\n        ctx.stroke();\n        ctx.lineWidth *= 5/3;\n        ctx.beginPath();\n        ctx.arc(0, 0, 1, 0, 2*Math.PI);\n        ctx.stroke();\n        ctx.restore();\n\n        // outputs\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            const socket = this.outputSockets[i];\n            ctx.fillStyle = getBitColor(i == this.state.clock, isDark);\n            ctx.beginPath();\n            ctx.arc(socket.x, socket.y, 8, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // Evaluation: the clock's state is set on\n    evaluate(bits: boolean[]): boolean[] {\n        let result = [];\n        for (let i = 0; i < this.numBits; i++) {\n            result.push(i == this.state.clock);\n        }\n        return result;\n    }\n\n    beforeUpdate() {\n        if (this.inputWires[0]?.get()) {\n            this.state.clock = (this.state.clock + 1) % this.numBits;\n        } else {\n            this.state.clock = -1;\n        }\n    }\n}\n\nexport default Clock;\n","// ClockExploration.ts\n//\n// Exploration of a clock, more meant to illustrate the time-based explorations.\n\nimport Component from './Component';\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\n\n// pass the components and output components arrays\nfunction makeClock(x: number, y: number, components: Component[], outputComponents: Component[]) {\n    const clock = new Clock(x, y, 100, 60);\n    const powerButton = new InputBit(x, y - 100, true, 40);\n    clock.inputWires.push(new Wire(powerButton, 0));\n    components.push(clock, powerButton);\n    for (let i = 0; i < 2; i++) {\n        const output = new OutputBit(x + clock.outputSockets[i].x, y + 100);\n        output.inputWires.push(new Wire(clock, i));\n        components.push(output);\n        outputComponents.push(output);\n    }\n}\n\nclass ClockExploration extends Exploration {\n    animated: boolean = true;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 300, 300);\n        makeClock(150, 150, this.components, this.outputComponents);\n    }\n\n}\n\nexport default ClockExploration;\n","// RegisterBit.ts\n//\n// Has an \"on\" input and an \"off\" input.\n// Does nothing if both are on or both are off.\n\nimport Component from \"./Component\";\nimport { getBitColor, getStrokeColor } from \"./dark\";\nimport Wire from \"./Wire\";\n\nclass RegisterBit implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    beforeUpdate: undefined;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, size: number = 30) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: size,\n            y: size,\n        };\n\n        this.state = {\n            bits: [false],\n        };\n\n        // [0] is the off switch and [1] is the on switch\n        const offset = size * 0.45;\n        this.inputSockets = [\n            {x: -offset, y: -offset},\n            {x:  offset, y: -offset}\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: size/2},\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick: undefined;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = getBitColor(this.state.bits[0], isDark);\n        ctx.beginPath();\n        ctx.moveTo(this.size.x*0.5, 0);\n        ctx.lineTo(this.size.x*1.0, this.size.y*0.5);\n        ctx.lineTo(this.size.x*0.5, this.size.y);\n        ctx.lineTo(this.size.x*0.0, this.size.y*0.5);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // load input\n        ctx.fillStyle = isDark ? \"#446666\" : \"#ccffff\";\n        ctx.strokeStyle = getStrokeColor(isDark);\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.25, this.size.y * 0.25, this.size.x * 0.25, 135*Math.PI/180, 315*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();\n        /*ctx.fillStyle = \"#33ff33\";\n        ctx.beginPath();\n        ctx.arc(this.size.x * 0.75, this.size.y * 0.25, this.size.x * 0.25, -135*Math.PI/180, 45*Math.PI/180);\n        ctx.fill();\n        ctx.stroke();*/\n        if (this.inputWires[0] && this.inputWires[0].get()) {\n            ctx.beginPath();\n            ctx.moveTo(this.size.x * 0.75, this.size.y * 0.25);\n            ctx.lineTo(this.size.x * 1.0, 0);\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n    // If the \"set\" input is on, change to the \"what\" input\n    evaluate(bits: boolean[]): boolean[] {\n        return bits[0] ? [bits[1]] : this.state.bits;\n    }\n}\n\nexport default RegisterBit;\n","// Adder.ts\n\nimport Component from \"./Component\";\nimport { getApplianceColor } from \"./dark\";\nimport Wire from \"./Wire\";\n\nclass Subtractor implements Component {\n    public state: {bits: boolean[]};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    // bits=8 means an 8-bit plus 8-bit\n    constructor(x: number, y: number, bits: number, width: number = bits*50, height: number = width/2) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n\n        this.state = {\n            bits: [],\n        };\n\n        this.numBits = bits;\n\n        this.inputSockets = [];\n        // spacing between the bits\n        const spacing = width / (2 * bits + 1);\n        for (let i = 0; i < bits; i++) {\n            this.inputSockets.push({\n                x: -spacing * (i + 0.5) + width/2,\n                y: -this.size.y/2,\n            });\n            this.inputSockets.unshift({\n                x: spacing * (i + 0.5) - width/2,\n                y: -this.size.y/2,\n            });\n        }\n\n        this.outputSockets = [];\n        for (let i = 0; i < bits; i++) {\n            this.outputSockets.push({\n                x: -spacing * (i - (bits-1)/2),\n                y: this.size.y/2,\n            });\n        }\n        // carry\n        this.outputSockets.push({\n            x: -this.size.x*0.375,\n            y: 0,\n        });\n\n        this.inputWires = [];\n    }\n\n    onClick: undefined;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        // base\n        ctx.fillStyle = getApplianceColor(isDark);\n        ctx.beginPath();\n        ctx.moveTo(left,                    top);\n        ctx.lineTo(left + this.size.x*0.46, top);\n        ctx.lineTo(left + this.size.x*0.5,  top + this.size.x*0.05);\n        ctx.lineTo(left + this.size.x*0.54, top);\n        ctx.lineTo(left + this.size.x,      top);\n        ctx.lineTo(left + this.size.x*0.75, top + this.size.y);\n        ctx.lineTo(left + this.size.x*0.25, top + this.size.y);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        for (let i = 0; i < this.inputSockets.length; i++) {\n            let socket = this.inputSockets[i];\n            ctx.fillStyle = \"#3333cc\";\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.fillStyle = \"black\";\n            ctx.fillText(String(i), this.position.x + socket.x*0.95, this.position.y + socket.y + 10);\n        }\n\n        for (let i = 0; i < this.outputSockets.length; i++) {\n            let socket = this.outputSockets[i];\n            ctx.fillStyle = \"#333333\";\n            ctx.strokeStyle = (this.state.bits[i] ? '#33ff33' : '#990000');\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(this.position.x + socket.x, this.position.y + socket.y, 6, 0, 2*Math.PI);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let num1 = 0, num2 = 0;\n        for (let i = 0; i < this.numBits; i++) {\n            const wire1 = this.inputWires[i], wire2 = this.inputWires[i + this.numBits];\n            num1 += ((wire1 && wire1.get()) ? 1 : 0) * (1 << i);\n            num2 += ((wire2 && wire2.get()) ? 1 : 0) * (1 << i);\n        }\n        const textSize = Math.round(Math.min(this.size.x * 0.125, this.size.y * 0.5));\n        ctx.font = textSize + \"px monospace\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(String(num1) + \" - \" + String(num2), this.position.x, this.position.y);\n\n        ctx.restore();\n    }\n\n    evaluate(bits: boolean[]): boolean[] {\n        let num1 = 0, num2 = 0;\n        // cheating here but that's not the point\n        for (let i = 0; i < this.numBits; i++) {\n            num1 += Number(bits[i]) * (1 << i);\n            num2 += Number(bits[i + this.numBits]) * (1 << i);\n        }\n\n        const answer = num1 - num2;\n        let answerBits = Array(this.numBits + 1);\n        for (let i = 0; i <= this.numBits; i++) {\n            answerBits[i] = (answer & (1 << i)) != 0;\n        }\n        //console.log(answerBits);\n        return answerBits;\n    }\n\n    beforeUpdate() {\n        // The simulation was having some bugs without this\n        this.state.bits = this.evaluate(this.inputWires.map(wire => (wire ? wire.get() : false)));\n    }\n}\n\nexport default Subtractor;\n","// Countdown.ts\n//\n// These clocks can have an arbitrary period.\n\nimport Component from \"./Component\";\nimport { getApplianceColor, getBitColor, getTextColor } from \"./dark\";\nimport Wire from \"./Wire\";\n\nclass Countdown implements Component {\n    public state: {bits: boolean[], count: number};\n    public position: {x: number, y: number};\n    public size: {x: number, y: number};\n    public inputSockets: {x: number, y: number}[];\n    public inputWires: Wire[];\n    public outputSockets: {x: number, y: number}[];\n    public numBits: number;\n\n    public startValue: number;\n\n    //\n    constructor(x: number, y: number, cap: number, width: number = 60, height: number = 50) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n\n        this.size = {\n            x: width,\n            y: height,\n        };\n        // because .fill() isn't supported?!\n        const bitArray: boolean[] = Array(2).map(_ => false);\n        this.state = {\n            bits: bitArray,\n            count: cap,\n        };\n        this.startValue = cap;\n        this.numBits = 2;\n        // \"power supply\" or more accurately a way to reset the clock\n        this.inputSockets = [\n            {x: 0, y: -this.size.y/2 - 1},\n            {x: -this.size.x/2, y: -this.size.y/2},\n        ];\n\n        this.outputSockets = [\n            {x: 0, y: this.size.y/2}\n        ];\n\n        this.inputWires = [];\n    }\n\n    onClick: undefined;\n\n    render(ctx: CanvasRenderingContext2D, isDark: boolean) {\n        ctx.save();\n\n        const left = this.position.x - this.size.x/2;\n        const top = this.position.y - this.size.y/2;\n        ctx.translate(left, top);\n        // base\n        ctx.fillStyle = getApplianceColor(isDark);\n        ctx.beginPath();\n        let r = Math.min(this.size.y * 0.2, this.size.x * 0.1);\n        const w = this.size.x, h = this.size.y;\n        ctx.moveTo(w*0.5, 0);\n        ctx.arcTo(w*1.0, 0, w*1.0, h*0.5, r);\n        ctx.arcTo(w*1.0, h*1.0, w*0.5, h*1.0, r);\n        ctx.arcTo(0, h*1.0, 0, h*0.5, r);\n        ctx.arcTo(0, 0, w*0.5, 0, r);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // clock icon\n        r = Math.min(w/8, h/8);\n        ctx.beginPath();\n        ctx.arc(0, 0, r, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(r*0.6, 0);\n        ctx.lineTo(0, 0);\n        ctx.lineTo(0, -r);\n        ctx.stroke();\n\n        // power\n        ctx.translate(w/2, 0); // move origin to top-middle\n        ctx.beginPath();\n        ctx.moveTo(2, -5);\n        ctx.lineTo(2, -1);\n        ctx.lineTo(-2, -1);\n        ctx.lineTo(-2, -5);\n        ctx.stroke();\n\n        r *= 0.8;\n        ctx.lineWidth *= 2;\n        ctx.lineJoin = \"round\";\n        ctx.beginPath();\n        ctx.moveTo(r*0.4, r*0.5);\n        ctx.lineTo(-r*0.8, r*1.5);\n        ctx.lineTo(r*0.8, r*1.5);\n        ctx.lineTo(-r*0.4, r*2.5);\n        ctx.stroke();\n\n        ctx.lineWidth /= 2;\n\n        // clock\n        ctx.fillStyle = getTextColor(isDark);\n        ctx.font = String(Math.round(this.size.y * 0.6)) + \"px monospace\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(this.state.count.toString(), 0, h*0.50);\n\n        ctx.translate(0, h/2);\n\n        // outputs\n        ctx.fillStyle = getBitColor(this.state.count == 0, isDark);\n        ctx.beginPath();\n        ctx.arc(0, h/2, 5, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.restore();\n    }\n    // Evaluation: we give a \"1\" output when it expires\n    evaluate(bits: boolean[]): boolean[] {\n        return [this.state.count == 0];\n    }\n\n    beforeUpdate() {\n        // 0 = the power button, if off it resets\n        if (this.inputWires[0]?.get()) {\n            // 1 = the clock input, if off it holds\n            if (this.inputWires[1]?.get()) {\n                this.state.count--;\n                if (this.state.count < 0) this.state.count = 0;\n            }\n        } else {\n            this.state.count = this.startValue;\n        }\n    }\n}\n\nexport default Countdown;\n","// DividerExploration.ts\n\n/*\n\nsteps:\n1. Start with dividend (numerator) in RIGHT half of remainder register\n2. Shift the remainder left\n3. Send the LEFT half in for subtraction\n4. If the result is negative, write it, else keep the remainder as is\n5. Put the opposite of the sign bit on the new 1 position\n6. Go back to step 2, although when the larger clock strikes, record the results (I expect it to be 2*6+3 or 3*6+5 cycles).\n\nnext steps:\n- carry from the subtractor needs to enter the choice gates\n- on purple, we get the subtraction results, and if the sign bit is off, we insert it into the register\n- also on purple, that sign bit needs to shift the LEFT\n\nI think I need to totally reconfigure the remainder part\n\nRemainder register:\n- If power button is off, set to zero (6-12) or numerator (0-5)\n- If power button is on:\n    - on purple we may receive a subtraction, but this only applies to bits 6-12\n    - on green we need to shift left, setting a carry bit. (This will require an additional register.)\n\n\n\n*/\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Subtractor from './Subtractor';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\nimport Countdown from './Countdown';\n\nclass DividerExploration extends Exploration {\n    countdown: Countdown;\n    remainderRight: number;\n    remainderSpacing: number;\n    startButton: InputBit;\n    numBits: number;\n\n    animated: boolean = true;\n    remainderRegister: OutputBit[];\n    clock: Clock;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 720;\n        canvas.height = 600;\n\n        // A lot of the same stuff happens compared to Multiplier...\n\n        const BITS = 5;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(660, 40, false, 50);\n        this.startButton = startButton;\n\n        // probably more user friendly\n        const thisExploration = this;\n        startButton.onClick = function() {\n            thisExploration.update(); // get the bits ready\n            startButton.constructor.prototype.onClick.apply(startButton, arguments);\n            if (startButton.state.bits[0]) {\n                setTimeout(function() {\n                    thisExploration.resume();\n                }, 1000);\n            }\n            return true;\n        };\n\n\n        const clockX = startButton.position.x;\n        const clock = new Clock(clockX, 125, 50, 50);\n        clock.inputWires.push(new Wire(startButton, 0));\n        this.components.push(clock);\n        this.clock = clock;\n\n        // when this clock strikes 2*BITS + 4 it will end the operation\n        // but I add one more to avoid confusion\n        const countdown = new Countdown(clockX + 20, 220, BITS+1, 60, 45);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: startButton.position.x + 40, y: countdown.position.y - 40},\n            {x: startButton.position.x + 40, y: startButton.position.y},\n        ]));\n        countdown.inputWires.push(new Wire(clock, 1));\n        this.countdown = countdown;\n\n        const subtractor = new Subtractor(210, 180, BITS, 11*26, 90);\n        //this.outputComponents.push(subtractor);\n\n        // Also not really a register.\n        let remainderRegister = [];\n        this.remainderRight = 585;\n        this.remainderSpacing = 54;\n        for (let i = 0; i < 2*BITS+1; i++) {\n            const reg = new OutputBit(this.remainderRight - this.remainderSpacing*i, 460, 20);\n            remainderRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\", darkColor: \"rgba(160, 48, 160)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.25)\", darkColor: \"rgba(160, 40, 160, 0.33)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n        const blue = {color: \"rgba(32, 64, 128, 0.8)\", darkColor: \"rgba(96, 112, 160, 0.8)\"};\n        const blueFaded = {color: \"rgba(32, 64, 128, 0.4)\", darkColor: \"rgba(96, 112, 160, 0.4)\"};\n        //const yellow = {color: \"rgba(160, 160, 0)\"};\n\n        // Input Numbers (N/D). D = divisor, N = dividend\n        let inputN = [];\n        let inputD = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(subtractor.position.x + subtractor.inputSockets[BITS+i].x, 30, false, 22);\n            this.components.push(input);\n            inputN.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(inputN[i].position.x, 95, false, 22);\n            this.components.push(input);\n            inputD.push(input);\n        }\n\n        // Wires from the registers to the subtractor.\n        for (let i = 0; i < BITS; i++) {\n            const d = 2;\n            const bit = remainderRegister[i + BITS];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            const y2 = subtractor.position.y - 70;\n            subtractor.inputWires.push(new Wire(bit, 0, [\n                {x: subtractor.position.x + subtractor.inputSockets[i].x - 0, y: y2 + d*i},\n                {x: 3 + d*i, y: y2 + d*i},\n                {x: 3 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\"}));\n        }\n        // The other subtractor registers (to the divisor)\n        for (let i = 0; i < BITS; i++) {\n            subtractor.inputWires.push(new Wire(inputD[i], 0));\n        }\n\n        // Choice Gates coming out of the subtractor (writes if subtracted).\n        let subtractorChoiceGates = [];\n        for (let i = 0; i < BITS; i++) {\n            //const x = subtractor.position.x + subtractor.outputSockets[i].x;\n            const y = subtractor.position.y + subtractor.outputSockets[0].y; // put them all on the same line\n            // space them out a little\n            const choice = new ChoiceGate(remainderRegister[i+BITS].position.x - 2, y + 60, 14);\n            // choice depends on whether or not the carry bit is positive or negative\n            choice.inputWires.push(new Wire(subtractor, BITS, [\n                {x: choice.position.x - 20, y: choice.position.y},\n                {x: choice.position.x - 20, y: choice.position.y - 25},\n                {x: subtractor.position.x - subtractor.size.x/2, y: choice.position.y - 25},\n                {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y},\n            ], {color: \"#888\"}));\n            // if negative, we just re-use the remainder register\n            const regBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(regBit, 0, [\n                {x: choice.position.x - 7, y: choice.position.y - 17},\n                {x: regBit.position.x + 20, y: choice.position.y - 17},\n                {x: regBit.position.x + 20, y: regBit.position.y},\n            ], purple));\n            // otherwise we use the subtraction\n            const y2 = choice.position.y - 32 - Math.round(Math.abs(i - BITS/2)) * 4\n            choice.inputWires.push(new Wire(subtractor, i, [\n                {x: choice.position.x + 7, y: y2},\n                {x: subtractor.position.x + subtractor.outputSockets[i].x, y: y2}\n            ]));\n            subtractorChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Remainder Register\n        // wires:\n        // (1) the faded purple wires from the clock control\n        // includes many wires\n        // also includes register for holding the quotient input\n        const fullRow = [];\n        for (let i = 0; i <= 2*BITS; i++) {\n            const regBit = remainderRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            // This is the middle (full) row\n            const choice = new ChoiceGate(regBit.position.x + (i < BITS ? 5 : -1), regBit.position.y - 95, 14);\n            // Selection Wire (from clock's left end)\n            choice.inputWires.push(new Wire(clock, 0, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 40},\n                {x: 540 - 2*i, y: choice.position.y - 50 - 1*i},\n                {x: clockX - 60, y: clock.position.y + clock.size.y/2},\n            ], purpleFaded));\n            // Purple action\n            if (i >= BITS && i < 2*BITS) {\n                // Upper Half of the Register: Conditionally connect to the subtractor.\n                choice.inputWires.push(new Wire(subtractorChoiceGates[i - BITS], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: choice.position.x - 7, y: choice.position.y - 25},\n                    {x: regBit.position.x - 18, y: choice.position.y - 25},\n                    {x: regBit.position.x - 18, y: regBit.position.y},\n                ], purple));\n            }\n            // Shifting and the Ones Bit\n            if (i > 0) {\n                choice.inputWires.push(new Wire(remainderRegister[i-1], 0, [\n                    {x: choice.position.x + 7, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: choice.position.y - 25},\n                    {x: regBit.position.x + 26, y: regBit.position.y + 0},\n                ], teal));\n            } else {\n                const holdWrite = new OutputBit(choice.position.x + 7, choice.position.y - 40, 20);\n                const notY = subtractorChoiceGates[0].position.y - 25;\n                const not = new Not(this.remainderRight - this.remainderSpacing*1.5, notY, 40, -90);\n                not.inputWires.push(new Wire(subtractor, BITS, [\n                    {x: subtractor.position.x - subtractor.size.x/2, y: notY},\n                    {x: subtractor.position.x - subtractor.size.x/2, y: subtractor.position.y}\n                ], {color: \"#888\"}));\n                // set on green\n                //holdWrite.inputWires.push(new Wire(clockNot, 0, [], teal));\n                // value is negated result of subtraction\n                holdWrite.inputWires.push(new Wire(not, 0, [\n                    {x: holdWrite.position.x, y: not.position.y},\n                ], teal));\n                // maybe?\n                //choice.inputWires[1] = new Wire(holdWrite, 0, [], purple);\n                choice.inputWires.push(new Wire(holdWrite, 0, [], teal));\n                this.components.push(not, holdWrite);\n                this.outputComponents.push(holdWrite);\n            }\n\n            this.components.push(choice);\n            fullRow.push(choice);\n        }\n\n        // Computing the Quotient\n\n        // The second input register that is actually a register.\n\n        // Wiring Dividend to seed the remainder register\n        // (blue wires, including faded ones)\n        const blueRightEdge = this.remainderRight + 33 + 2*BITS;\n        let dividendChoice: ChoiceGate[] = [];\n        for (let i = 0; i < BITS; i++) {\n            const regBit = remainderRegister[i];\n            const inBit = inputN[i];\n\n            // This is the one close to the lowest 6 registers\n            const choice = new ChoiceGate(regBit.position.x + 3, regBit.position.y - 50, 12);\n            // Wire coming from the start button\n            choice.inputWires.push(new Wire(startButton, 0, [\n                {x: choice.position.x - 15, y: choice.position.y},\n                {x: choice.position.x - 15, y: choice.position.y + 15, node: true},\n                {x: blueRightEdge, y: choice.position.y + 15},\n                {x: blueRightEdge, y: startButton.position.y + (startButton.position.x - blueRightEdge)},\n            ], blue));\n\n            // If power is on, make it come from the teal/purple stuff\n            choice.inputWires.push(new Wire(fullRow[i], 0));\n\n            // Otherwise, set it to the input\n            const d = 2;\n            const y1 = fullRow[0].position.y - 70 - d*BITS;\n            const y2 = inBit.position.y + 30;\n            const x1 = this.remainderRight + 24 + d*BITS;\n            choice.inputWires.push(new Wire(inBit, 0, [\n                {x: choice.position.x + 6, y: choice.position.y - 10 - d*i},\n                {x: x1 - d*i, y: choice.position.y - 10 - d*i},\n                {x: x1 - d*i, y: y1 + d*i},\n                {x: clockX - 90 - d*i, y: y1 + d*i},\n                {x: clockX - 90 - d*i, y: y2 + d*i},\n                {x: inBit.position.x, y: y2 + d*i},\n            ], blueFaded));\n\n            this.components.push(choice);\n            dividendChoice.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Clearing the \"remainder\" (heh heh) of the register\n        // (blue wires)\n        for (let i = 0; i <= BITS; i++) {\n            const regBit = remainderRegister[i + BITS];\n            const and = new AndGate(regBit.position.x, regBit.position.y - 50, 24, 0);\n            // similar to above, use the full row if the power is on\n            and.inputWires.push(new Wire(fullRow[i+BITS], 0));\n            and.inputWires.push(new Wire(startButton, 0, [\n                {x: and.position.x + 5, y: and.position.y - 20},\n                {x: and.position.x + 14, y: and.position.y - 20},\n                {x: and.position.x + 14, y: and.position.y + 15, node: i < BITS},\n                {x: blueRightEdge, y: and.position.y + 15},\n                {x: blueRightEdge, y: startButton.position.y + (startButton.position.x - blueRightEdge)},\n            ], blue));\n\n            this.components.push(and);\n            regBit.inputWires.push(new Wire(and, 0));\n        }\n\n        // Control Wire from the final register bit to the subtractor's output\n        /*const regLSB = divisorRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = subtractorChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 282, y: choice.position.y - 20},\n                {x: 282, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"rgb(127, 127, 127)\"}));\n            choice.inputWires.unshift(null);\n\n            // Else wire\n            const outBit = remainderRegister[i + BITS];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: choice.position.y - 10},\n                {x: outBit.position.x + 19, y: outBit.position.y - 19},\n            ], purpleFaded));\n        }*/\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i < 2*BITS; i++) {\n            const offset = (i < BITS ? 5 : -10);\n            const from = remainderRegister[i + (i >= BITS ? 1 : 0)];\n            const bit = new RegisterBit(from.position.x + offset, 580, 25);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 14th clock cycle\n            const x1 = countdown.position.x + countdown.outputSockets[0].x;\n            bit.inputWires.push(new Wire(countdown, 0, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: x1, y: bit.position.y - 30},\n                {x: x1, y: countdown.position.y + 40},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const diagonal = 15;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayN = new Display(inputN[0].position.x + 54, inputN[0].position.y, inputN, false, 36);\n        const displayD = new Display(inputD[0].position.x + 54, inputD[0].position.y, inputD, false, 36);\n        const displayQ = new Display(557, 540, finalAnswer.slice(0, BITS), false, 30);\n        const displayR = new Display(200, 540, finalAnswer.slice(BITS, 2*BITS), false, 30);\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(subtractor, countdown, startButton, displayN, displayD, displayQ, displayR);\n\n        this.remainderRegister = remainderRegister;\n    }\n\n    drawRemainderGuide(left: number, right: number, color: string, text: string) {\n        const ctx = this.context;\n        const x1 = (this.remainderRight - left*this.remainderSpacing) - 15;\n        const x2 = (this.remainderRight - right*this.remainderSpacing) + 15;\n        const y = 480;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"none\";\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x1 + 10, y + 10);\n        ctx.lineTo(x2 - 10, y + 10);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.33)\";\n        ctx.lineWidth = 8;\n        ctx.fillStyle = color;\n        ctx.font = \"30px monospace\";\n        ctx.strokeText(text, (x1 + x2)/2, y + 25);\n        ctx.fillText(text, (x1 + x2)/2, y + 25);\n    }\n\n    afterRender = () => {\n        // display the quotient\n        const ctx = this.context;\n        ctx.save();\n\n        const B = this.numBits;\n\n        // get the clock cycle\n        const cycle = this.countdown.state.count;\n        const n = cycle + (1-this.clock.state.clock);\n        if (n <= B+1 && this.clock.state.clock >= 0) {\n            let rValue = 0, qValue = 0;\n            const rOffset = B + 2 - n; // a quirk of my hardware\n            for (let i = 0; i < B; i++) {\n                const bit = this.remainderRegister[i + rOffset];\n                rValue += Number(bit.state.bits[0]) * (1 << i);\n            }\n            for (let i = 0; i < (B - n); i++) {\n                const bit = this.remainderRegister[i];\n                qValue += Number(bit.state.bits[0]) * (1 << (i + n - 1));\n            }\n            this.drawRemainderGuide(rOffset + this.numBits - 1, rOffset, \"#33c\", `Remainder (${rValue})`);\n\n            if (n <= B) {\n                this.drawRemainderGuide(B - n, 0, \"#990\", `Quotient (${qValue})`);\n            }\n        }\n\n        ctx.restore();\n\n        // not sure where to put this\n        if (cycle == 0) {\n            this.startButton.state.bits = [false];\n            if (!this.paused) this.paused = true;\n        }\n    }\n}\n\nexport default DividerExploration;\n","// FullAdderGates.ts\n//\n// Still just one bit each. That is, three total (A,B,carry).\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\nimport { AndGate, OrGate, XorGate } from './Gates';\nimport { BinarySwitch } from './UserGates';\nimport AnswerChecker from './AnswerChecker';\n\nclass FullAdderExploration1 extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 480, 400);\n\n        const inputA = new InputBit(40, 50, false, 32);\n        const inputB = new InputBit(160, 50, false, 32);\n        const inputC = new InputBit(240, 180, false, 32);\n        const output1 = new OutputBit(inputB.position.x - 1, 340, 30);\n        const output2 = new OutputBit(inputA.position.x + 19, 340, 30);\n\n        const and1 = new AndGate(inputA.position.x + 10, 125, 50, 0);\n        and1.inputWires.push(new Wire(inputA, 0));\n        and1.inputWires.push(new Wire(inputB, 0, [\n            {x: and1.position.x + 10, y: and1.position.y - 35},\n        ]));\n\n        const xor1 = new XorGate(inputB.position.x - 10, 125, 50, 0);\n        xor1.inputWires.push(new Wire(inputA, 0, [\n            {x: xor1.position.x - 10, y: and1.position.y - 35},\n        ]));\n        xor1.inputWires.push(new Wire(inputB, 0));\n\n        const xor2 = new BinarySwitch(output1.position.x, 280, 60, 0);\n        xor2.inputWires.push(new Wire(xor1, 0));\n        xor2.inputWires.push(new Wire(inputC, 0, [\n            {x: xor2.position.x + 9, y: inputC.position.y, node: true},\n        ]));\n\n        output1.inputWires.push(new Wire(xor2, 0));\n\n        const and2 = new BinarySwitch(output2.position.x + 30, 220, 60, 0);\n        and2.inputWires.push(new Wire(xor1, 0, [\n            {x: and2.position.x - 9, y: 165},\n            {x: xor1.position.x, y: 165, node: true},\n        ]));\n        and2.inputWires.push(new Wire(inputC, 0, [\n            {x: and2.position.x + 9, y: inputC.position.y},\n        ]));\n\n        // or gate for the \"2\" output\n        const or2 = new BinarySwitch(output2.position.x, output2.position.y - 44, 60, 0);\n        or2.inputWires.push(new Wire(and1, 0));\n        or2.inputWires.push(new Wire(and2, 0, [\n            // add 12 because of the output bit\n            {x: or2.position.x + 9, y: (and2.position.y + or2.position.y + 6)/2},\n            {x: and2.position.x, y: (and2.position.y + or2.position.y + 6)/2}\n        ]));\n        output2.inputWires.push(new Wire(or2, 0));\n\n        this.components.push(output1, output2, and1, xor1, and2, xor2, or2, inputA, inputB, inputC);\n\n        // for ease of visualization\n        const aid1 = new OutputBit(xor1.position.x, xor1.position.y + 27, 12);\n        aid1.inputWires.push(new Wire(xor1, 0));\n        const aid2 = new OutputBit(and1.position.x, and1.position.y + 27, 12);\n        aid2.inputWires.push(new Wire(and1, 0));\n        const aid3 = new OutputBit(and2.position.x, and2.position.y + 30, 12);\n        aid3.inputWires.push(new Wire(and2, 0));\n        this.components.push(aid1, aid2, aid3);\n\n        // Number Display\n        const displayResult = new Display(220, 340, [output1, output2], false, 42);\n        this.components.push(displayResult);\n\n        const labelA = new Text(inputA.position.x, 20, 30, \"A\");\n        const labelB = new Text(inputB.position.x, 20, 30, \"B\");\n        const labelC = new Text(inputC.position.x, inputC.position.y - 40, 30, \"C\");\n        const text1 = new Text(output1.position.x, 375, 30, \"1\", { color: '#333' });\n        const text2 = new Text(output2.position.x, 375, 30, \"2\", { color: '#333' });\n        this.components.push(labelA, labelB, labelC, text1, text2);\n\n        // Updating\n        this.outputComponents.push(output1, output2, aid1, aid2, aid3);\n\n        // The Answer\n        const correctAdder = new Adder(370, 200, 1, 140);\n        const rightInputA = new InputBit(correctAdder.position.x + correctAdder.inputSockets[0].x, 120, false, 25);\n        const rightInputB = new InputBit(correctAdder.position.x + correctAdder.inputSockets[1].x, 120, false, 25);\n        const rightInputC = new InputBit(460, 200, false, 25);\n        this.components.push(correctAdder, rightInputA, rightInputB, rightInputC);\n\n        const rightOutput1 = new OutputBit(correctAdder.position.x, 270, 25);\n        const rightOutput2 = new OutputBit(correctAdder.position.x + correctAdder.outputSockets[1].x, 270, 25);\n        rightOutput1.inputWires.push(new Wire(correctAdder, 0));\n        rightOutput2.inputWires.push(new Wire(correctAdder, 1));\n        this.components.push(rightOutput1, rightOutput2);\n        this.outputComponents.push(rightOutput1, rightOutput2);\n\n        const helpText1 = new Text(correctAdder.position.x, 60, 20, \"Can you make the\");\n        const helpText2 = new Text(correctAdder.position.x, 80, 20, \"left side do this?\");\n        this.components.push(helpText1, helpText2);\n\n        correctAdder.inputWires = [new Wire(rightInputA, 0), new Wire(rightInputB, 0), new Wire(rightInputC, 0)];\n\n        this.components.push(new AnswerChecker(this, 380, 345,\n            [\n                [inputA, rightInputA],\n                [inputB, rightInputB],\n                [inputC, rightInputC],\n            ],\n            [output2, output1],\n            function(bits: boolean[]) {\n                return [\n                    (Number(bits[0]) + Number(bits[1]) + Number(bits[2])) >= 2,\n                    Boolean(bits[0] !== bits[1]) !== bits[2]\n                ]\n            }\n        ));\n    }\n}\n\nexport default FullAdderExploration1;\n","// FullAdderGates.ts\n//\n// Still just one bit each. That is, three total (A,B,carry).\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\nimport { AndGate, OrGate, XorGate, Not } from './Gates';\n\nclass FullSubtractorExploration1 extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 400, 400);\n\n        const inputA = new InputBit(80, 50, false, 30);\n        const inputB = new InputBit(200, 50, false, 30);\n        const inputC = new InputBit(300, 200, false, 30);\n        const output1 = new OutputBit(200, 340, 30);\n        const output2 = new OutputBit(100, 340, 30);\n\n        const notA1 = new Not(inputA.position.x, inputA.position.y + 40, 30, 0);\n        notA1.inputWires.push(new Wire(inputA, 0));\n\n        const and1 = new AndGate(inputA.position.x + 10, 140, 50, 0);\n        and1.inputWires.push(new Wire(notA1, 0));\n        and1.inputWires.push(new Wire(inputB, 0, [\n            {x: and1.position.x + 10, y: and1.position.y - 40},\n        ]));\n\n        const xor1 = new XorGate(inputB.position.x - 10, 140, 50, 0);\n        xor1.inputWires.push(new Wire(inputA, 0, [\n            {x: xor1.position.x - 10, y: and1.position.y - 40},\n        ]));\n        xor1.inputWires.push(new Wire(inputB, 0));\n\n        const notX1 = new Not(xor1.position.x - 30, 180, 30, 90);\n        notX1.inputWires.push(new Wire(xor1, 0, [\n            {x: xor1.position.x, y: notX1.position.y, node: true},\n        ]));\n\n        const notX1Aid = new OutputBit(notX1.position.x - 25, notX1.position.y, 12);\n        notX1Aid.inputWires.push(new Wire(notX1, 0));\n\n        const xor2 = new XorGate(200, 280, 50, 0);\n        xor2.inputWires.push(new Wire(xor1, 0));\n        xor2.inputWires.push(new Wire(inputC, 0, [\n            {x: xor2.position.x + 10, y: inputC.position.y, node: true},\n        ]));\n\n        output1.inputWires.push(new Wire(xor2, 0));\n\n        const and2 = new AndGate(output2.position.x + 30, 230, 50, 0);\n        and2.inputWires.push(new Wire(notX1, 0, [\n            {x: and2.position.x - 10, y: notX1.position.y},\n        ]));\n        and2.inputWires.push(new Wire(inputC, 0, [\n            {x: and2.position.x + 10, y: inputC.position.y},\n        ]));\n\n        // or gate for the \"2\" output\n        const or2 = new OrGate(output2.position.x, output2.position.y - 44, 50, 0);\n        or2.inputWires.push(new Wire(and1, 0, [\n            {x: or2.position.x - 10, y: and1.position.y + 30},\n            {x: and1.position.x, y: and1.position.y + 30},\n        ]));\n        or2.inputWires.push(new Wire(and2, 0, [\n            // add 12 because of the output bit\n            {x: or2.position.x + 10, y: (and2.position.y + or2.position.y + 12)/2},\n            {x: and2.position.x, y: (and2.position.y + or2.position.y + 12)/2}\n        ]));\n        output2.inputWires.push(new Wire(or2, 0));\n\n        this.components.push(output1, output2, notA1, notX1, and1, xor1, and2, xor2, or2, inputA, inputB, inputC);\n\n        // for ease of visualization\n        const aid1 = new OutputBit(xor1.position.x, xor1.position.y + 27, 12);\n        aid1.inputWires.push(new Wire(xor1, 0));\n        const aid2 = new OutputBit(and1.position.x, and1.position.y + 27, 12);\n        aid2.inputWires.push(new Wire(and1, 0));\n        const aid3 = new OutputBit(and2.position.x, and2.position.y + 27, 12);\n        aid3.inputWires.push(new Wire(and2, 0));\n        this.components.push(aid1, aid2, aid3, notX1Aid);\n\n        // Number Display\n        const displayResult = new Display(320, 340, [output1, output2], \"2comp\", 42);\n        this.components.push(displayResult);\n\n        const labelA = new Text(inputA.position.x, 20, 30, \"A\");\n        const labelB = new Text(inputB.position.x, 20, 30, \"B\");\n        const labelC = new Text(inputC.position.x, inputC.position.y - 40, 30, \"C\");\n        const text1 = new Text(output1.position.x, 375, 30, \"1\");\n        const text2 = new Text(output2.position.x, 375, 30, \"Borrow\");\n        this.components.push(labelA, labelB, labelC, text1, text2);\n\n        // Updating\n        this.outputComponents.push(output1, output2, aid1, aid2, aid3, notX1Aid);\n    }\n}\n\nexport default FullSubtractorExploration1;\n","// GateExploration\n//\n// Basic exploration of AND, OR, XOR, and NOT gates\n\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\n\nclass GateExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 480, 240);\n\n        const types = [AndGate, OrGate, XorGate];\n        for (let i = 0; i < 3; i++) {\n            const bit1 = new InputBit(i*120 + 60, 40, false, 30);\n            const bit2 = new InputBit(i*120 + 120, 40, false, 30);\n            const gate = new types[i](i*120 + 90, 120, 60, 0);\n            gate.inputWires.push(new Wire(bit1, 0, [\n                {x: gate.position.x - 12, y: gate.position.y - 40},\n                {x: bit1.position.x, y: gate.position.y - 40},\n            ]));\n            gate.inputWires.push(new Wire(bit2, 0, [\n                {x: gate.position.x + 12, y: gate.position.y - 40},\n                {x: bit2.position.x, y: gate.position.y - 40},\n            ]));\n            const out = new OutputBit(i*120 + 90, 200, 30);\n            out.inputWires.push(new Wire(gate, 0));\n            this.components.push(gate, bit1, bit2, out);\n            this.outputComponents.push(out);\n        }\n\n        const notInput = new InputBit(420, 40, false, 30);\n        const notGate = new Not(420, 120, 60, 0);\n        notGate.inputWires.push(new Wire(notInput, 0));\n        const notOutput = new OutputBit(420, 200, 30);\n        notOutput.inputWires.push(new Wire(notGate, 0));\n        this.components.push(notGate, notInput, notOutput);\n        this.outputComponents.push(notOutput);\n    }\n\n}\n\nexport default GateExploration;\n","// HalfAdderCheat.ts\n//\n// The finished product with no accompanying circuit.\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\nimport { BinarySwitch } from './UserGates';\nimport AnswerChecker from './AnswerChecker';\n\nclass HalfAdderBuild extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 480, 320);\n\n        // left side\n        const adder = new Adder(120, 160, 1, 180, 80);\n        const inputA = new InputBit(adder.position.x + adder.inputSockets[0].x, 60, false, 30);\n        const inputB = new InputBit(adder.position.x + adder.inputSockets[1].x, 60, false, 30);\n        const output1 = new OutputBit(adder.position.x + adder.outputSockets[0].x, 260, 30);\n        const output2 = new OutputBit(adder.position.x + adder.outputSockets[1].x, 260, 30);\n        this.components.push(adder, inputA, inputB, output1, output2);\n        adder.inputWires.push(new Wire(inputA, 0));\n        adder.inputWires.push(new Wire(inputB, 0));\n        output1.inputWires.push(new Wire(adder, 0));\n        output2.inputWires.push(new Wire(adder, 1));\n\n        // const displayResult = new Display(180, 240, [output1, output2], false, 40);\n        // this.components.push(displayResult);\n        this.outputComponents.push(output1, output2);\n\n        const thisIsYourTarget = new Text(adder.position.x, 30, 18, \"Can you make this...\");\n        const text1 = new Text(output1.position.x, 295, 30, \"1\");\n        const text2 = new Text(output2.position.x, 295, 30, \"2\");\n        this.components.push(thisIsYourTarget, text1, text2);\n\n\n        // right side\n        const x2 = 390;\n        const userA = new InputBit(x2 - 45, 60, false, 30);\n        const userB = new InputBit(x2 + 45, 60, false, 30);\n\n        const switch1 = new BinarySwitch(userB.position.x - 9, 160, 60, 0);\n        switch1.state.whichGate = 1;\n        const switch2 = new BinarySwitch(userA.position.x + 9, 160, 60, 0);\n        switch2.state.whichGate = 1;\n\n        switch1.inputWires.push(new Wire(userA, 0));\n        switch1.inputWires.push(new Wire(userB, 0));\n        switch2.inputWires.push(new Wire(userA, 0));\n        switch2.inputWires.push(new Wire(userB, 0));\n\n        const userOutput1 = new OutputBit(switch1.position.x, 260, 30);\n        const userOutput2 = new OutputBit(switch2.position.x, 260, 30);\n        userOutput1.inputWires.push(new Wire(switch1, 0));\n        userOutput2.inputWires.push(new Wire(switch2, 0));\n\n        const thisIsYourCanvas = new Text(x2, 30, 18, \"...on this side?\");\n        this.components.push(thisIsYourCanvas, switch1, switch2, userA, userB, userOutput1, userOutput2);\n        this.outputComponents.push(userOutput1, userOutput2);\n\n        const userText1 = new Text(userOutput1.position.x, 295, 30, \"1\");\n        const userText2 = new Text(userOutput2.position.x, 295, 30, \"2\");\n        this.components.push(userText1, userText2);\n\n        const testButton = new AnswerChecker(this, 235, 270, [\n            [userA, inputA],\n            [userB, inputB],\n        ], [userOutput2, userOutput1], function(bits: boolean[]): boolean[] {\n            return [bits[0] && bits[1], bits[0] !== bits[1]];\n        });\n        this.components.push(testButton);\n\n        // Link the bits for easy comparison\n        inputA.linkedBits.push(userA);\n        userA.linkedBits.push(inputA);\n        inputB.linkedBits.push(userB);\n        userB.linkedBits.push(inputB);\n    }\n}\n\nexport default HalfAdderBuild;\n","// MakeALUExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport { Not } from './Gates';\nimport { NotSwitch, BinarySwitch } from './UserGates';\nimport Text from './Text';\n\nclass MakeALUExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 500, 500);\n\n        const adder = new Adder(180, 280, 4, 288, 120);\n        this.components.push(adder);\n\n        // need this up here...\n        const operBit = new InputBit(460, 70, false, 40);\n\n        let inputA = [], inputB = [];\n        for (let i = 0; i < 4; i++) {\n            const bit = new InputBit(30 + 36*i, 60, false, 25);\n            adder.inputWires.unshift(new Wire(bit, 0, [\n                {x: adder.position.x + adder.inputSockets[3-i].x, y: bit.position.y + 120 - 25*i},\n                {x: bit.position.x, y: bit.position.y + 120 - 25*i},\n            ]));\n            this.components.push(bit);\n            inputA.unshift(bit);\n\n            // right side is more complicated\n            const bit2 = new InputBit(380 - 60*i, 60, false, 25);\n            const gate = new BinarySwitch(bit2.position.x + 6, bit2.position.y + 70, 40, 0);\n            gate.inputWires.push(new Wire(bit2, 0));\n            gate.inputWires.push(new Wire(operBit, 0, [\n                {x: gate.position.x + 6, y: gate.position.y - 30, node: (i !== 3)},\n                {x: operBit.position.x, y: gate.position.y - 30, node: true},\n            ]));\n            adder.inputWires.push(new Wire(gate, 0, [\n                {x: adder.position.x + adder.inputSockets[4+i].x, y: gate.position.y + 70 - 10*i},\n                {x: gate.position.x, y: gate.position.y + 70 - 10*i},\n            ]));\n            this.components.push(gate, bit2);\n            inputB.push(bit2);\n        }\n\n        // operation control\n        const operSwitch = new NotSwitch(operBit.position.x, operBit.position.y + 100, 50, 0);\n        operSwitch.state.whichGate = 1; // start you off with the wrong gate, heh heh\n        const operText1 = new Text(operBit.position.x, operBit.position.y - 50, 20, \"OPER\");\n        const operText2 = new Text(operBit.position.x, operBit.position.y - 32, 20, function() {\n            return (operBit.state.bits[0]) ? \"(SUB)\" : \"(ADD)\";\n        });\n        operSwitch.inputWires.push(new Wire(operBit, 0));\n        adder.inputWires.push(new Wire(operSwitch, 0, [\n            {x: operSwitch.position.x, y: adder.position.y},\n        ]));\n        this.components.push(operSwitch, operBit, operText1, operText2);\n        const outputBits = [];\n        for (let i = 0; i < 4; i++) {\n            const output = new OutputBit(adder.position.x + adder.outputSockets[i].x, 410, 25);\n            output.inputWires.push(new Wire(adder, i, []));\n            outputBits.push(output);\n        }\n        this.outputComponents.push(...outputBits);\n        this.components.push(...outputBits);\n\n        // Displays\n        const displayA = new Display((inputA[1].position.x + inputA[2].position.x)/2, 25, inputA, true);\n        const displayB = new Display((inputB[1].position.x + inputB[2].position.x)/2, 25, inputB, true);\n        this.components.push(displayA, displayB, new Display(adder.position.x, 460, outputBits, true, 50));\n\n        // Error\n        const calc1 = new Text(370, 430, 30, function() {\n            const a = Number(displayA.getValue());\n            const b = Number(displayB.getValue());\n            const op = operBit.state.bits[0];\n            const raw = op ? (a+b) : (a-b);\n            // add 8, mod 16, then subtract 8 makes it return in -8..7\n            const overflow = ((raw + 24) % 16) - 8;\n            return `Actual: ${overflow}` + (raw === overflow ? \"\" : \"*\");\n        });\n        const overflowNote = new Text(370, 460, 20, \"* means overflow\");\n        this.components.push(calc1, overflowNote);\n    }\n}\n\nexport default MakeALUExploration;\n","// MultiplierExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport RegisterBit from './RegisterBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport Display from './Display';\nimport {AndGate, OrGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\nimport Text from './Text';\nimport Countdown from './Countdown';\n\nclass MultiplierExploration extends Exploration {\n    countdown: Countdown;\n    regSpacing: number;\n    regRight: number;\n    productRegister: OutputBit[];\n    numBits: number;\n    startButton: InputBit;\n\n    animated: boolean = true;\n    clock: Clock;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        canvas.width = 720;\n        canvas.height = 600;\n\n        const BITS = 6;\n        this.numBits = BITS;\n\n        const startButton = new InputBit(680, 60, false, 50);\n        this.startButton = startButton;\n        const startText = new Text(startButton.position.x, startButton.position.y - 35, 24, function() {\n            return (startButton.state.bits[0]) ? \"ABORT\" : \"START\";\n        });\n        this.components.push(startText);\n\n        const thisExploration = this;\n        startButton.onClick = function() {\n            thisExploration.update();\n            startButton.constructor.prototype.onClick.apply(startButton, arguments);\n            if (startButton.state.bits[0]) {\n                thisExploration.resume();\n            }\n            return true;\n        };\n        const clockX = startButton.position.x;\n\n        // not gate adjusting the initial register\n        const startNot = new Not(startButton.position.x - 60, 40, 30, 90);\n        startNot.inputWires.push(new Wire(startButton, 0));\n        this.components.push(startNot);\n\n        const clock = new Clock(clockX, 150);\n        clock.inputWires.push(new Wire(startButton, 0));\n        this.clock = clock;\n        //this.components.push(clock); // do it later\n        //this.outputComponents.push(clock);\n\n        // when the clock strikes 2*BITS + 1 it will end the operation\n        const countdown = new Countdown(clockX + 5, 260, this.numBits, 50, 50);\n        countdown.inputWires.push(new Wire(startButton, 0, [\n            {x: countdown.position.x, y: countdown.position.y - 40},\n            {x: clockX + 30, y: countdown.position.y - 40},\n            {x: clockX + 30, y: startButton.position.y},\n        ]));\n        countdown.inputWires.push(new Wire(clock, 1));\n        this.countdown = countdown;\n\n        const adder = new Adder(170, 175, BITS, 270, 100);\n        //this.outputComponents.push(adder);\n\n        // The \"Register\" that really isn't.\n        // The Add and Shift steps should be successfully separated...\n        let productRegister = [];\n        this.regRight = 610;\n        this.regSpacing = 50;\n        for (let i = 0; i < 2*BITS; i++) {\n            const reg = new OutputBit(this.regRight - this.regSpacing*i, 400, 20);\n            productRegister.push(reg);\n            this.outputComponents.unshift(reg); // todo: is needed?\n            this.components.push(reg);\n        }\n\n        // Wire Coloring\n        const purple = {color: \"rgb(128, 32, 128)\", darkColor: \"rgb(160, 80, 160)\"};\n        const purpleFaded = {color: \"rgba(128, 0, 128, 0.4)\", darkColor: \"rgba(160, 80, 160, 0.6)\"};\n        const teal = {color: \"rgb(0, 128, 128)\"};\n        const tealFaded = {color: \"rgba(0, 128, 128, 0.35)\"};\n\n        // Wires from the registers to the adder.\n        // (deep purple, left)\n        for (let i = 0; i < BITS; i++) {\n            const d = 2;\n            const bit = productRegister[i + BITS - 1];\n            // basically, we want the most significant bit to be highest\n            const y1 = bit.position.y + 15 + d * (BITS - i);\n            const y2 = adder.position.y - adder.size.y/2 - 15 - d*BITS;\n            adder.inputWires.push(new Wire(bit, 0, [\n                {x: adder.position.x + adder.inputSockets[i].x, y: y2 + d*i},\n                {x: 10 + d*i, y: y2 + d*i},\n                {x: 10 + d*i, y: y1},\n                {x: bit.position.x, y: y1},\n            ], {color: \"rgba(128, 0, 128, 0.75)\", darkColor: \"rgba(160, 80, 160, 0.67)\"}));\n        }\n\n        // And Gates coming out of the adder (for the clock).\n        let adderChoiceGates = [];\n        for (let i = 0; i <= BITS; i++) {\n            // and gate\n            //const x = adder.position.x + adder.outputSockets[i].x;\n            const y = adder.position.y + adder.outputSockets[0].y; // put them all on the same line\n            // space them a bit\n            const choice = new ChoiceGate(productRegister[i+BITS-1].position.x - 7, y + 50, 10);\n            // this will be input 0 temporarily but we will unshift later\n            const x2 = adder.position.x + adder.outputSockets[i].x;\n            let y2 = y + 10 + 4*i;\n            if (choice.position.x < x2) y2 = y + 20;\n            choice.inputWires.push(new Wire(adder, i, [\n                {x: choice.position.x + choice.inputSockets[1].x, y: y2},\n                {x: x2, y: y2},\n            ]));\n            adderChoiceGates.push(choice);\n            this.components.push(choice);\n        }\n\n        // Shifting the Multiplication Register\n        for (let i = 0; i < 2*BITS; i++) {\n            const regBit = productRegister[i];\n            /*const or = new OrGate(regBit.position.x, regBit.position.y - 30, 20, 0);\n            this.components.push(or);\n            regBit.inputWires.push(new Wire(or, 0));*/\n\n            const choice = new ChoiceGate(regBit.position.x, regBit.position.y - 40, 14);\n            // Selection Wire (from clock's NOT)\n            choice.inputWires.push(new Wire(clock, 1, [\n                {x: choice.position.x - 18, y: choice.position.y},\n                {x: choice.position.x - 18, y: choice.position.y - 38 - 2*i},\n                {x: 630 - 2*i, y: choice.position.y - 38 - 2*i},\n                {x: clock.position.x - 40, y: clock.position.y + clock.size.y/2},\n            ], tealFaded));\n\n            if (i >= BITS-1) {\n                // Upper Half of the Register: Conditionally connect to the adder.\n                choice.inputWires.push(new Wire(adderChoiceGates[i - BITS + 1], 0, [], purple));\n            } else {\n                // Lower Half of the Register: Connect to itself.\n                choice.inputWires.push(new Wire(regBit, 0, [\n                    {x: regBit.position.x - 7, y: choice.position.y - 30},\n                    {x: regBit.position.x + 20, y: choice.position.y - 30},\n                    {x: regBit.position.x + 20, y: regBit.position.y},\n                ], purple));\n            }\n\n            // Shifting\n            if (i < 2*BITS-1) {\n                choice.inputWires.push(new Wire(productRegister[i+1], 0, [\n                    {x: regBit.position.x + 7, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: choice.position.y - 20},\n                    {x: regBit.position.x - 24, y: regBit.position.y},\n                ], teal));\n            } else {\n                choice.inputWires.push(null);\n            }\n\n            this.components.push(choice);\n            regBit.inputWires.push(new Wire(choice, 0));\n        }\n\n        // Input Numbers (A and B).\n        let inputA = [];\n        let inputB = [];\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(310 - i*30, 60, false, 25);\n            this.components.push(input);\n            adder.inputWires.push(new Wire(input, 0));\n            inputA.push(input); // in case we need it\n        }\n        for (let i = 0; i < BITS; i++) {\n            const input = new InputBit(610 - i*50, 60, false, 25);\n            this.components.push(input);\n            inputB.push(input);\n        }\n\n        // The second input register that is actually a register.\n        let multiplierRegister: RegisterBit[] = [];\n        let multiplierRegisterChoice = [];\n        for (let i = 0; i < BITS; i++) {\n            const reg = new RegisterBit(inputB[i].position.x - 3, 170, 20);\n            multiplierRegister.push(reg);\n            this.components.push(reg);\n            this.outputComponents.push(reg);\n        }\n        // Wiring to the Multiplier Register\n        for (let i = 0; i < BITS; i++) {\n            const reg = multiplierRegister[i];\n            const or = new OrGate(reg.position.x - 9, reg.position.y - 25, 20, 0);\n            const choice = new ChoiceGate(reg.position.x + 9, reg.position.y - 60, 12);\n            reg.inputWires.push(new Wire(or, 0), new Wire(choice, 0));\n\n            // wire path for the OR and the selection bit\n            const wirePath = [\n                {x: reg.position.x - 13, y: choice.position.y, node: true},\n                {x: reg.position.x - 13, y: startNot.position.y, node: (i < BITS-1)},\n            ];\n            or.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n            or.inputWires.push(new Wire(clock, 1, [\n                {x: or.position.x + 10, y: or.position.y - 18 - i/2},\n                {x: clock.position.x - 60, y: or.position.y - 18 - i},\n                {x: clock.position.x - 40, y: clock.position.y + clock.size.y/2, node: true},\n            ], tealFaded));\n\n            // choice gate is [0] ? [1] : [2]\n            // the selection comes first\n            choice.inputWires.push(new Wire(startNot, 0, wirePath, {color: \"rgba(100, 100, 130, 0.75)\"}));\n\n            // If the clock is off, the registers need to use the input bits\n            choice.inputWires.push(new Wire(inputB[i], 0));\n            // Otherwise hold\n            choice.inputWires.push(new Wire(multiplierRegister[i+1] || null, 0, [\n                {x: reg.position.x + 15, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y - 80},\n                {x: reg.position.x - 22, y: reg.position.y + 10},\n            ]));\n\n            this.components.push(or, choice);\n        }\n\n        // Control Wire from the final register bit to the adder's output\n        // Also the wiring between the product register and the choice gates\n        const regLSB = multiplierRegister[0];\n        for (let i = 0; i <= BITS; i++) {\n            const choice = adderChoiceGates[i];\n            // Selector Wire\n            choice.inputWires.unshift(new Wire(regLSB, 0, [\n                {x: choice.position.x - 13, y: choice.position.y},\n                {x: choice.position.x - 13, y: choice.position.y - 20},\n                {x: 400, y: choice.position.y - 20},\n                {x: 400, y: regLSB.position.y + 20},\n                {x: regLSB.position.x, y: regLSB.position.y + 20},\n            ], {color: \"#7f7f7f\", darkColor: \"#555\"}));\n\n            // Else wire\n            const outBit = productRegister[i + BITS - 1];\n            choice.inputWires.push(new Wire(outBit, 0, [\n                {x: choice.position.x + 5, y: choice.position.y - 10},\n                {x: outBit.position.x + 17, y: choice.position.y - 10},\n                {x: outBit.position.x + 17, y: outBit.position.y - 18},\n            ], purpleFaded));\n        }\n\n        // Answer Register\n        const finalAnswer: RegisterBit[] = [];\n        for (let i = 0; i < 2*BITS; i++) {\n            const offset = 5;\n            const bit = new RegisterBit(productRegister[i].position.x + offset, 510, 30);\n            this.components.push(bit);\n            this.outputComponents.push(bit);\n\n            // set wire: on at the 12th clock cycle\n            bit.inputWires.push(new Wire(countdown, 0, [\n                {x: bit.position.x - 15, y: bit.position.y - 15},\n                {x: bit.position.x - 15, y: bit.position.y - 30},\n                {x: countdown.position.x + countdown.outputSockets[0].x, y: bit.position.y - 30},\n            ], {color: \"rgb(128, 128, 128)\"}));\n\n            // what wire: from the corresponding from the product \"register\"\n            const from = productRegister[i];\n            const diagonal = 16;\n            bit.inputWires.push(new Wire(from, 0, [\n                {x: bit.position.x + diagonal, y: bit.position.y - diagonal},\n                {x: from.position.x + diagonal + offset, y: from.position.y + diagonal + offset},\n            ]));\n\n            finalAnswer.push(bit);\n        }\n\n        // finally, add displays\n        const displayA = new Display((inputA[0].position.x + inputA[BITS-1].position.x)/2, 25, inputA, false, 30);\n        const displayB = new Display((inputB[0].position.x + inputB[BITS-1].position.x)/2, 20, inputB, false, 30);\n        const displayEnd = new Display(375, 565, finalAnswer, false, 60);\n        displayEnd.size.x = 2*displayEnd.size.y;\n\n        // rendering trick, because input wires are drawn with a component\n        // so pushing these last makes them render last so it looks cleaner\n        this.components.push(adder, countdown, startButton, displayA, displayB, displayEnd, clock);\n        this.productRegister = productRegister;\n    }\n\n    drawProductGuide(left: number, right: number, color: string, text: string) {\n        const ctx = this.context;\n        const x1 = (this.regRight - left*this.regSpacing) - 15;\n        const x2 = (this.regRight - right*this.regSpacing) + 15;\n        const y = 435;\n        ctx.save();\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"none\";\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x1 + 10, y + 10);\n        ctx.lineTo(x2 - 10, y + 10);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.75)\";\n        ctx.lineWidth = 16;\n        ctx.fillStyle = color;\n        ctx.font = \"30px monospace\";\n        ctx.strokeText(text, (x1 + x2)/2, y + 25);\n        ctx.fillText(text, (x1 + x2)/2, y + 25);\n        ctx.restore();\n    }\n\n    afterRender = () => {\n        const ctx = this.context;\n\n        const cycle = this.countdown.state.count;\n        if (this.startButton.state.bits[0]) {\n            const n = this.numBits - cycle + 1;\n            if (n <= 5) {\n                ctx.fillStyle = \"rgba(255,255,255,0.75)\";\n                const west = (this.regRight - this.regSpacing * (5-n)) - 20;\n                const north = 329, south = 479;\n                const east = (this.regRight) + 22;\n                ctx.fillRect(west, north, east-west, south-north);\n            }\n\n            if (n <= 6) {\n                // product value\n                let productValue = 0;\n                for (let i = 0; i < this.numBits + n; i++) {\n                    const bit = this.productRegister[i + (6-n)];\n                    productValue += Number(bit.state.bits[0]) * (1 << i);\n                }\n\n                this.drawProductGuide(2 * this.numBits - 1, this.numBits - n, \"#33c\", `Product (${productValue})`);\n            }\n        }\n\n        if (this.countdown.state.count == 0) {\n            this.startButton.state.bits = [false];\n            this.paused = true;\n            // but clear the register first\n            const update = this.update.bind(this);\n            for (let bit of this.productRegister) {\n                bit.state.bits[0] = false;\n            }\n        }\n    }\n}\n\nexport default MultiplierExploration;\n","// MultiplierNaiveExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport {AndGate, OrGate, XorGate} from './Gates';\nimport Display from './Display';\n\nclass MultiplierNaiveExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 600, 600);\n\n        const blue = {color: \"rgba(32,32,128,0.75)\"};\n        const teal = {color: \"rgba(96,160,160,1)\"};\n\n        const numBits = 4;\n\n        let inputA = [], inputB = [], outputBits = [];\n\n        for (let i = 0; i < numBits; i++) {\n            const bitA = new InputBit(140 - 35*i, 30, false, 30);\n            inputA.push(bitA);\n\n            const bitB = new InputBit(465 - 35*i, 30, false, 30);\n            inputB.push(bitB);\n        }\n\n        let adders = [];\n        for (let i = 0; i < numBits; i++) {\n            const adder = new Adder(430 - 75*i, 170 + 105*i, numBits, 200, 60);\n            adders.push(adder);\n\n            for (let j = 0; j < numBits; j++) {\n                const and = new AndGate(\n                    adder.position.x + adder.inputSockets[j].x,\n                    adder.position.y - adder.size.y/2 - 20,\n                    20,\n                    0\n                );\n                and.inputWires.push(new Wire(inputA[i], 0, [\n                    {x: and.position.x - 6, y: and.position.y - 20},\n                    {x: inputA[i].position.x, y: and.position.y - 20},\n                ], blue));\n\n                const d1 = 24 + 3*i - (8+i)*j;\n                and.inputWires.push(new Wire(inputB[j], 0, (i > 0) ? [\n                    {x: and.position.x + 4, y: and.position.y - 28},\n                    {x: and.position.x + 4 - d1, y: and.position.y - 28 - d1},\n                    {x: and.position.x + 4 - d1, y: inputB[j].position.y + 30 + 8*j, node: true},\n                    {x: inputB[j].position.x, y: inputB[j].position.y + 30 + 8*j, node: true},\n                ] : [\n                    // don't need the bending\n                    {x: and.position.x + 4, y: and.position.y - 28},\n                    {x: inputB[j].position.x, y: inputB[j].position.y + 30 + 8*j},\n                    {x: inputB[j].position.x, y: inputB[j].position.y + 30 + 8*j, node: true},\n                ], teal));\n                this.components.push(and);\n                adder.inputWires.push(new Wire(and, 0));\n            }\n\n            if (i > 0) {\n                for (let j = 0; j < numBits; j++) {\n                    adder.inputWires.push(new Wire(adders[i-1], j + 1));\n                }\n            } else {\n                for (let j = 0; j < numBits; j++) {\n                    adder.inputWires.push(null);\n                }\n            }\n        }\n\n\n        for (let i = 0; i < 2*numBits; i++) {\n            const outBit = new OutputBit(440 - 50*i, 570, 25);\n            if (i < numBits) {\n                outBit.inputWires.push(new Wire(adders[i], 0));\n            } else {\n                outBit.inputWires.push(new Wire(adders[numBits-1], i - numBits + 1));\n            }\n            outputBits.push(outBit);\n        }\n\n\n        const displayA = new Display(200, 30, inputA, false, 32);\n        const displayB = new Display(525, 30, inputB, false, 32);\n        const displayOutput = new Display(550, 570, outputBits, false, 40);\n        this.components.push(...outputBits, ...adders, ...inputA, ...inputB);\n        this.components.push(displayA, displayB, displayOutput);\n        this.outputComponents.push(...outputBits);\n    }\n}\n\nexport default MultiplierNaiveExploration;\n","// AdderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\n\nclass OnesComplementExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 400, 300);\n\n        const adder = new Adder(200, 160, 4);\n        this.components.push(adder);\n\n        let inputA = [];\n        let inputB = [];\n\n        for (let i = 0; i < 4; i++) {\n            const y = 90 - i*10;\n            const bitA = new InputBit(adder.position.x - 100 + i*25, 30);\n            adder.inputWires.unshift(new Wire(bitA, 0, [\n                {x: bitA.position.x + 12.5, y: y},\n                {x: bitA.position.x, y: y},\n            ]));\n            inputA.unshift(bitA);\n\n            const bitB = new InputBit(adder.position.x + 100 - i*25, 30);\n            adder.inputWires.push(new Wire(bitB, 0, [\n                {x: bitB.position.x - 12.5, y: y},\n                {x: bitB.position.x, y: y},\n            ]));\n            inputB.push(bitB);\n        }\n\n        let outputBits = [];\n        for (let i = 0; i < 4; i++) {\n            const output = new OutputBit(adder.position.x + 37.5 - i*25, 260);\n            output.inputWires.push(new Wire(adder, i, []));\n            outputBits.push(output);\n        }\n\n        this.components.push(...inputA, ...inputB, ...outputBits);\n\n        const displayA = new Display(35, 30, inputA, \"1comp\");\n        const displayB = new Display(365, 30, inputB, \"1comp\");\n        const displayResult = new Display(200, 350, outputBits, \"1comp\", 40);\n\n        const calc1 = new Text(330, 230, 20, function() {\n            const a = Number(displayA.getValue());\n            const b = Number(displayB.getValue());\n            return `Correct: ${a + b}`;\n        });\n        const calc2 = new Text(calc1.position.x, calc1.position.y + 25, 20, function() {\n            const displayed = displayResult.getValue();\n            return `Guess: ${displayed}`;\n        });\n        const calc3 = new Text(calc2.position.x, calc2.position.y + 25, 20, function() {\n            const a = Number(displayA.getValue());\n            const b = Number(displayB.getValue());\n            const sum = Number(displayResult.getValue());\n            const error = sum - a - b;\n            return `Error: ${(error <= 0 ? '' : '+')}${error}`;\n        });\n\n        this.components.push(displayA, displayB, displayResult, calc1, calc2, calc3);\n\n        this.outputComponents.push(...outputBits);\n    }\n}\n\nexport default OnesComplementExploration;\n","// RegisterExploration\n//\n// Exploration that shows how a register bit works.\n// Most of these (not multipliers and dividers) have the expanded version on the left and a compact version on the right.\n\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport RegisterBit from './RegisterBit';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\nimport ChoiceGate from './ChoiceGate';\n\nclass RegisterExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n\n        const inputSet = new InputBit(40, 80, false, 30);\n        this.components.push(inputSet);\n\n        const inputWhat = new InputBit(140, 80, false, 30);\n        this.components.push(inputWhat);\n\n        const choice = new ChoiceGate(100, 200, 50);\n        this.components.push(choice);\n\n        choice.inputWires.push(new Wire(inputSet, 0, [\n            {x: inputSet.position.x, y: choice.position.y},\n        ]));\n        choice.inputWires.push(new Wire(inputWhat, 0, [\n            {x: choice.position.x + choice.inputSockets[1].x, y: choice.position.y - 70},\n            {x: inputWhat.position.x, y: choice.position.y - 70},\n        ]));\n        choice.inputWires.push(new Wire(choice, 0, [\n            {x: choice.position.x + choice.inputSockets[2].x, y: choice.position.y - 50},\n            {x: choice.position.x + 60, y: choice.position.y - 50},\n            {x: choice.position.x + 60, y: choice.position.y + 50},\n            {x: choice.position.x, y: choice.position.y + 50, node: true},\n        ]));\n\n\n        const output = new OutputBit(100, 320, 32);\n        output.inputWires.push(new Wire(choice, 0))\n        this.components.push(output);\n        this.outputComponents.push(output);\n\n        // the simplified version\n        const inputOff2 = new InputBit(250, 150, false, 32);\n        const inputOn2 = new InputBit(350, 150, false, 32);\n        const register = new RegisterBit(300, 200, 40);\n        const output2 = new OutputBit(300, 250);\n        register.inputWires.push(new Wire(inputOff2, 0));\n        register.inputWires.push(new Wire(inputOn2, 0));\n        output2.inputWires.push(new Wire(register, 0));\n\n        this.components.push(register, output2, inputOn2, inputOff2);\n        this.outputComponents.push(output2);\n    }\n\n}\n\nexport default RegisterExploration;\n","// BinaryExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\n\nclass SignMagnitudeExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 480, 240);\n\n        const NUM_BITS = 6;\n        let bitArray = [];\n        for (let i = 0; i < NUM_BITS; i++) {\n            const bit = new InputBit(440 - 80*i, 80, false, 30);\n            bitArray.push(bit);\n\n            const text = new Text(bit.position.x, bit.position.y / 2, 30,\n                i == 5 ? \"±\" : String(2**i));\n            this.components.push(text);\n        }\n\n        this.components.push(...bitArray);\n        this.outputComponents.push(...bitArray);\n\n        const display = new Display(240, 160, bitArray, \"signmag\", 48);\n        this.components.push(display);\n        this.outputComponents.push(display);\n    }\n}\n\nexport default SignMagnitudeExploration;\n","// adderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport { Not } from './Gates';\n\nclass SubtractorExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 400, 400);\n\n        const adder = new Adder(200, 200, 4, 216);\n        this.components.push(adder);\n\n        let inputA = [], inputB = [];\n        for (let i = 0; i < 4; i++) {\n            const bit = new InputBit(adder.position.x + adder.inputSockets[3-i].x, 60);\n            adder.inputWires.unshift(new Wire(bit, 0));\n            this.components.push(bit);\n            inputA.unshift(bit);\n\n            const bit2 = new InputBit(adder.position.x + adder.inputSockets[4+i].x, 60);\n            const not = new Not(bit2.position.x, bit2.position.y + 50, 30, 0);\n            not.inputWires.push(new Wire(bit2, 0));\n            adder.inputWires.push(new Wire(not, 0));\n            this.components.push(bit2, not);\n            inputB.push(bit2);\n        }\n        const floatingNot = new Not(320, 200, 30, 90);\n        adder.inputWires.push(new Wire(floatingNot, 0));\n        this.components.push(floatingNot);\n        const outputBits = [];\n        for (let i = 0; i < 4; i++) {\n            const output = new OutputBit(adder.position.x + adder.outputSockets[i].x, 310);\n            output.inputWires.push(new Wire(adder, i, []));\n            outputBits.push(output);\n        }\n        this.outputComponents.push(...outputBits);\n        this.components.push(...outputBits);\n\n        this.components.push(new Display(150, 25, inputA, true));\n        this.components.push(new Display(250, 25, inputB, true));\n        this.components.push(new Display(adder.position.x, 360, outputBits, true, 40));\n\n    }\n}\n\nexport default SubtractorExploration;\n","// AdderExploration.ts\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\n\nclass TwosCompAdderExploration extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 400, 300);\n\n        const adder = new Adder(200, 160, 4);\n        this.components.push(adder);\n\n        let inputA = [];\n        let inputB = [];\n\n        for (let i = 0; i < 4; i++) {\n            const y = 90 - i*10;\n            const bitA = new InputBit(adder.position.x - 100 + i*25, 30);\n            adder.inputWires.unshift(new Wire(bitA, 0, [\n                {x: bitA.position.x + 12.5, y: y},\n                {x: bitA.position.x, y: y},\n            ]));\n            inputA.unshift(bitA);\n\n            const bitB = new InputBit(adder.position.x + 100 - i*25, 30);\n            adder.inputWires.push(new Wire(bitB, 0, [\n                {x: bitB.position.x - 12.5, y: y},\n                {x: bitB.position.x, y: y},\n            ]));\n            inputB.push(bitB);\n        }\n\n        let outputBits = [];\n        for (let i = 0; i < 4; i++) {\n            const output = new OutputBit(adder.position.x + 37.5 - i*25, 260);\n            output.inputWires.push(new Wire(adder, i, []));\n            outputBits.push(output);\n        }\n\n        this.components.push(...inputA, ...inputB, ...outputBits);\n\n        const displayA = new Display(35, 30, inputA, \"2comp\");\n        const displayB = new Display(365, 30, inputB, \"2comp\");\n        const displayResult = new Display(200, 350, outputBits, \"2comp\", 40);\n\n        const calc1 = new Text(330, 230, 20, function() {\n            const a = Number(displayA.getValue());\n            const b = Number(displayB.getValue());\n            return `Correct: ${a + b}`;\n        });\n        const calc2 = new Text(calc1.position.x, calc1.position.y + 25, 20, function() {\n            const displayed = displayResult.getValue();\n            return `Guess: ${displayed}`;\n        });\n        const calc3 = new Text(calc2.position.x, calc2.position.y + 25, 20, function() {\n            const a = Number(displayA.getValue());\n            const b = Number(displayB.getValue());\n            const sum = Number(displayResult.getValue());\n            const error = sum - a - b;\n            return `Error: ${(error <= 0 ? '' : '+')}${error}`;\n        });\n\n        this.components.push(displayA, displayB, displayResult, calc1, calc2, calc3);\n\n        this.outputComponents.push(...outputBits);\n    }\n}\n\nexport default TwosCompAdderExploration;\n","// FullAdderGates.ts\n//\n// Still just one bit each. That is, three total (A,B,carry).\n\nimport Exploration from './Exploration';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport Adder from './Adder';\nimport Wire from './Wire';\nimport Display from './Display';\nimport Text from './Text';\nimport { AndGate, OrGate, XorGate } from './Gates';\nimport { BinarySwitch } from './UserGates';\nimport AnswerChecker from './AnswerChecker';\n\nclass FullAdderAnswer extends Exploration {\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 300, 400);\n\n        const inputA = new InputBit(40, 50, false, 32);\n        const inputB = new InputBit(160, 50, false, 32);\n        const inputC = new InputBit(250, 180, false, 32);\n        const output1 = new OutputBit(inputB.position.x - 1, 340, 30);\n        const output2 = new OutputBit(inputA.position.x + 19, 340, 30);\n\n        const and1 = new AndGate(inputA.position.x + 10, 125, 50, 0);\n        and1.inputWires.push(new Wire(inputA, 0));\n        and1.inputWires.push(new Wire(inputB, 0, [\n            {x: and1.position.x + 10, y: and1.position.y - 35},\n        ]));\n\n        const xor1 = new XorGate(inputB.position.x - 10, 125, 50, 0);\n        xor1.inputWires.push(new Wire(inputA, 0, [\n            {x: xor1.position.x - 10, y: and1.position.y - 35},\n        ]));\n        xor1.inputWires.push(new Wire(inputB, 0));\n\n        const xor2 = new XorGate(output1.position.x, 280, 45, 0);\n        xor2.inputWires.push(new Wire(xor1, 0));\n        xor2.inputWires.push(new Wire(inputC, 0, [\n            {x: xor2.position.x + 9, y: inputC.position.y, node: true},\n        ]));\n\n        output1.inputWires.push(new Wire(xor2, 0));\n\n        const and2 = new AndGate(output2.position.x + 30, 220, 45, 0);\n        and2.inputWires.push(new Wire(xor1, 0, [\n            {x: and2.position.x - 9, y: 165},\n            {x: xor1.position.x, y: 165, node: true},\n        ]));\n        and2.inputWires.push(new Wire(inputC, 0, [\n            {x: and2.position.x + 9, y: inputC.position.y},\n        ]));\n\n        // or gate for the \"2\" output\n        const or2 = new OrGate(output2.position.x, output2.position.y - 44, 45, 0);\n        or2.inputWires.push(new Wire(and1, 0));\n        or2.inputWires.push(new Wire(and2, 0, [\n            // add 12 because of the output bit\n            {x: or2.position.x + 9, y: (and2.position.y + or2.position.y + 6)/2},\n            {x: and2.position.x, y: (and2.position.y + or2.position.y + 6)/2}\n        ]));\n        output2.inputWires.push(new Wire(or2, 0));\n\n        this.components.push(output1, output2, and1, xor1, and2, xor2, or2, inputA, inputB, inputC);\n\n        // for ease of visualization\n        const aid1 = new OutputBit(xor1.position.x, xor1.position.y + 27, 12);\n        aid1.inputWires.push(new Wire(xor1, 0));\n        const aid2 = new OutputBit(and1.position.x, and1.position.y + 27, 12);\n        aid2.inputWires.push(new Wire(and1, 0));\n        const aid3 = new OutputBit(and2.position.x, and2.position.y + 30, 12);\n        aid3.inputWires.push(new Wire(and2, 0));\n        this.components.push(aid1, aid2, aid3);\n\n        // Number Display\n        const displayResult = new Display(240, 340, [output1, output2], false, 42);\n        this.components.push(displayResult);\n\n        const labelA = new Text(inputA.position.x, 20, 30, \"A\");\n        const labelB = new Text(inputB.position.x, 20, 30, \"B\");\n        const labelC = new Text(inputC.position.x, inputC.position.y - 40, 30, \"C\");\n        const text1 = new Text(output1.position.x, 375, 30, \"1\", { color: '#333' });\n        const text2 = new Text(output2.position.x, 375, 30, \"2\", { color: '#333' });\n        this.components.push(labelA, labelB, labelC, text1, text2);\n\n        // Updating\n        this.outputComponents.push(output1, output2, aid1, aid2, aid3);\n    }\n}\n\nexport default FullAdderAnswer;\n","// ClockExploration.ts\n//\n// Exploration of a clock, more meant to illustrate the time-based explorations.\n\nimport Component from './Component';\nimport Exploration from './Exploration';\nimport Wire from './Wire';\nimport Clock from './Clock';\nimport InputBit from './InputBit';\nimport OutputBit from './OutputBit';\nimport {AndGate, OrGate, XorGate, Not} from './Gates';\nimport Countdown from './Countdown';\nimport Subtractor from './Subtractor';\n\n// pass the components and output components arrays\nclass CountdownExploration extends Exploration {\n    animated: boolean = true;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas, 300, 300);\n\n        const power = new InputBit(150, 60, false, 40);\n\n        const clock = new Clock(100, 130);\n        this.components.push(clock);\n        clock.inputWires.push(new Wire(power, 0, [\n            {x: clock.position.x, y: power.position.y},\n        ]))\n\n        const countdown = new Countdown(200, 200, 5);\n        countdown.inputWires.push(new Wire(power, 0, [\n            {x: countdown.position.x, y: power.position.y},\n        ]));\n        countdown.inputWires.push(new Wire(clock, 0, [\n            {\n                x: clock.position.x + clock.outputSockets[0].x,\n                y: countdown.position.y + countdown.inputSockets[0].y,\n            }\n        ]));\n        this.components.push(countdown);\n\n        const countdownOutput = new OutputBit(countdown.position.x, 260, 30);\n        this.components.push(countdownOutput);\n        countdownOutput.inputWires.push(new Wire(countdown, 0));\n\n        this.components.push(power);\n\n        this.outputComponents.push(countdownOutput);\n\n        // some logic\n        const thisExploration = this;\n        power.onClick = function() {\n            if (!power.state.bits[0]) {\n                thisExploration.update();\n                power.constructor.prototype.onClick.apply(power, arguments);\n                thisExploration.resume();\n            } else {\n                thisExploration.pause();\n                power.constructor.prototype.onClick.apply(power, arguments);\n            }\n            return true;\n        };\n\n        /*\n        // on the right...\n        const countdown = new Countdown(450, 200, 5);\n        this.components.push(countdown);\n\n        const countdownSwitch = new InputBit(countdown.position.x, 125, false, 40);\n        this.components.push(countdownSwitch);\n        countdown.inputWires.push(new Wire(countdownSwitch, 0));\n\n        const countdownOutput = new OutputBit(countdown.position.x, 275, 30);\n        this.components.push(countdownOutput);\n        countdownOutput.inputWires.push(new Wire(countdown, 0));\n        */\n\n        /*\n\n        // on the left...\n        const numBits = 3;\n        const start = 5;\n\n        const powerLeft = new InputBit(100, 50, false, 42);\n\n        const subtractor = new Subtractor(160, 200, numBits, 7 * 24, 80);\n        for (let i = 0; i < numBits; i++) {\n            if (i == 0) {\n                const x1 = subtractor.position.x + subtractor.inputSockets[i].x;\n                const y1 = 110;\n                const comp = new Not(x1, y1, 30, 0);\n                subtractor.inputWires.push(new Wire(comp, 0));\n                this.components.push(comp);\n            } else {\n                subtractor.inputWires.push(new Wire(null, 0));\n            }\n        }\n\n        // Subtractor self-wiring\n        for (let i = 0; i < numBits; i++) {\n            const d = 12 + 12*i;\n            const y1 = subtractor.position.y + subtractor.size.y/2 + d + 10;\n            const y2 = subtractor.position.y - subtractor.size.y/2 - d - 10;\n            subtractor.inputWires.push(new Wire(subtractor, i, [\n                {x: subtractor.position.x + subtractor.inputSockets[3+i].x, y: y2},\n                {x: subtractor.position.x + subtractor.size.x/2 + d, y: y2},\n                {x: subtractor.position.x + subtractor.size.x/2 + d, y: y1},\n                {x: subtractor.position.x + subtractor.outputSockets[i].x, y: y1, node: true},\n            ]))\n        }\n\n        this.components.push(subtractor, powerLeft);\n\n        powerLeft.linkedBits.push(countdownSwitch);\n        countdownSwitch.linkedBits.push(powerLeft);\n        */\n    }\n\n}\n\nexport default CountdownExploration;\n","\nimport Exploration from './Exploration';\n\n// Alphabetized because... idunno\nimport AdderExploration from './AdderExploration';\nimport AdderFailExploration from './AdderFailExploration';\nimport BinaryExploration from './BinaryExploration';\nimport ChoiceExploration from './ChoiceExploration';\nimport ClockExploration from './ClockExploration';\nimport DividerExploration from './DividerExploration';\nimport FullAdderExploration1 from './FullAdderGates';\nimport FullSubtractorExploration1 from './FullSubtractorGates';\nimport GateExploration from './GateExploration';\nimport HalfAdderBuild from './HalfAdderBuild';\nimport MakeALUExploration from './MakeALUExploration';\nimport MultiplierExploration from './MultiplierExploration';\nimport MultiplierNaiveExploration from './MultiplierNaiveExploration';\nimport OnesComplementExploration from './OnesComplementExploration';\nimport RegisterExploration from './RegisterExploration';\nimport SignMagnitudeExploration from './SignMagnitudeExploration';\nimport SubtractorExploration from './SubtractorExploration';\nimport TwosCompAdderExploration from './TwosCompAdderExploration';\nimport FullAdderAnswer from './FullAdderAnswer';\nimport CountdownExploration from './CountdownExploration';\n\nfunction createCanvas(): HTMLCanvasElement {\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    return canvas;\n}\n\n// in milliseconds\nconst UPDATE_TIMES = [4000, 2500, 1600, 1000, 630, 400, 250]\n\nfunction createExploration(id: string, type: typeof Exploration): Exploration | undefined {\n    const element = document.getElementById(id);\n    if (!element) {\n        console.warn(\"Document element \" + id + \" not found.\");\n        return;\n    }\n\n    element.className += \" row\";\n\n    const canvasWrapper = document.createElement(\"div\");\n    canvasWrapper.className = \"canvas-wrapper col-auto\";\n    const canvas = createCanvas();\n    canvasWrapper.appendChild(canvas);\n    element.appendChild(canvasWrapper);\n\n    const exploration = new type(canvas);\n    exploration.update();\n    canvas.addEventListener(\"click\", function(event) {\n        exploration.onClick(event.offsetX, event.offsetY);\n    });\n\n    // For animated explorations, have speed controls\n    if (exploration.animated) {\n        const controls = document.createElement(\"div\");\n        controls.className = \"controls col-auto\";\n        controls.innerHTML = `\n            <h4>Speed</h4>\n            <p style=\"margin-top: 0\">\n                Slow\n                <input id=\"speed-${id}\" name=\"speed\" type=\"range\" min=\"0\" max=\"${UPDATE_TIMES.length - 1}\" />\n                Fast\n            </p>\n            <div class=\"buttons\">\n                <button id=\"pause-${id}\">Pause</button>\n                <button id=\"resume-${id}\">Play</button>\n                <button id=\"step-${id}\">Step</button>\n            </div>\n        `;\n        // get those buttons\n        controls.querySelector(\"#speed-\" + id)!.addEventListener(\"change\", function(event) {\n            exploration.updateTime = UPDATE_TIMES[Number((event.target as HTMLInputElement).value)];\n        });\n        element.appendChild(controls);\n\n        const pauseButton = (controls.querySelector(\"#pause-\" + id) as HTMLButtonElement);\n        exploration.pause = function() {\n            exploration.constructor.prototype.pause.call(exploration);\n            pauseButton.disabled = true;\n            resumeButton.disabled = false;\n        };\n        pauseButton.addEventListener(\"click\", exploration.pause);\n        pauseButton.disabled = true;\n        const resumeButton = controls.querySelector(\"#resume-\" + id) as HTMLButtonElement;\n        exploration.resume = function() {\n            exploration.constructor.prototype.resume.call(exploration);\n            pauseButton.disabled = false;\n            resumeButton.disabled = true;\n        };\n        resumeButton.addEventListener(\"click\", exploration.resume);\n        controls.querySelector(\"#step-\" + id)!.addEventListener(\"click\", exploration.update.bind(exploration));\n\n        //exploration.resume();\n    }\n\n    return exploration;\n}\n\n\n\n// Explorations\n// {htmlId: Class}\nconst explorationMap: {[id: string]: typeof Exploration} = {\n    // part 1 (and maybe part 2 as well)\n    'binary-basic': BinaryExploration,\n    'adder': AdderExploration,\n    'gates': GateExploration,\n    'half-adder-build': HalfAdderBuild,\n    'gates-again': GateExploration,\n    'full-adder1': FullAdderExploration1,\n    'clock': ClockExploration,\n\n    // part 2\n    'signmag': SignMagnitudeExploration,\n    'adder-fail': AdderFailExploration,\n    'full-subtractor1': FullSubtractorExploration1,\n    'full-adder-answer': FullAdderAnswer,\n    'ones-complement': OnesComplementExploration,\n    'twos-comp-adder': TwosCompAdderExploration,\n    'subtractor': SubtractorExploration,\n    'make-alu': MakeALUExploration,\n\n    // part 3\n    'multiplier-naive': MultiplierNaiveExploration,\n    'choice': ChoiceExploration,\n    'register': RegisterExploration,\n    'countdown': CountdownExploration,\n    'multiplier-full': MultiplierExploration,\n    'divider-full': DividerExploration,\n};\nlet ALL_EXPLORATIONS: (Exploration | undefined)[] = [];\nfor (let id in explorationMap) {\n    ALL_EXPLORATIONS.push(createExploration(id, explorationMap[id]));\n}\n\nlet isDark = false;\n\nfunction renderLoop() {\n    // TODO: Put this in exploration\n    for (let i = 0; i < ALL_EXPLORATIONS.length; i++) {\n        const exploration = ALL_EXPLORATIONS[i];\n        if (exploration) {\n            exploration.render(isDark);\n        }\n    }\n    requestAnimationFrame(renderLoop);\n}\nrenderLoop();\n\n// some other stuff\nfunction fillInteractiveTable(table: HTMLTableElement | null) {\n    if (table === null) return;\n    const html = `<input type=\"number\" min=\"0\" max=\"1\" size=\"4\" style=\"min-width: 3em\" />`;\n    const fillIn = table.tBodies[0].getElementsByTagName(\"tr\");\n    for (let i = 0; i < fillIn.length; i++) {\n        const out1 = document.createElement(\"td\");\n        out1.innerHTML = html;\n        const out2 = document.createElement(\"td\");\n        out2.innerHTML = html;\n        fillIn[i].appendChild(out1);\n        fillIn[i].appendChild(out2);\n    }\n}\nfillInteractiveTable(document.getElementById(\"fill-in\") as (HTMLTableElement | null));\n\nfunction setDark(on: boolean) {\n    if (on) {\n        document.body.style.backgroundColor = \"#212529\";\n        document.body.style.color = \"#909396\";\n        isDark = true;\n    } else {\n        document.body.style.backgroundColor = \"#fff\";\n        document.body.style.color = \"#212519\";\n        isDark = false;\n    }\n    renderLoop();\n}\n\nsetDark(false);\n"]}